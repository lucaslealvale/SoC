
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040020

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x0000004c memsz 0x0000004c flags r--
    LOAD off    0x00002000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00002020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00004930 memsz 0x00004930 flags r-x
    LOAD off    0x0000704c vaddr 0x0002004c paddr 0x00044950 align 2**12
         filesz 0x00000a2c memsz 0x00000a70 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00040020  00040020  00007a78  2**0
                  CONTENTS
  2 .text         00004930  00040020  00040020  00002020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00020000  00020000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  0002004c  00044950  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00020a78  0004537c  00007a78  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00020abc  00020abc  00007a78  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0004537c  0004537c  00007a78  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007a78  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000008c8  00000000  00000000  00007aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000149a4  00000000  00000000  00008368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000053a9  00000000  00000000  0001cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005f31  00000000  00000000  000220b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001294  00000000  00000000  00027fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f54  00000000  00000000  0002927c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  0002b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0002fc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005d0  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003227e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00032281  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003228d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003228e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0003228f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0003229a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000322a5  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  000322b0  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000032  00000000  00000000  000322b8  2**0
                  CONTENTS, READONLY
 27 .jdi          00004ee5  00000000  00000000  000322ea  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00046ace  00000000  00000000  000371cf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040020 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
0002004c l    d  .rwdata	00000000 .rwdata
00020a78 l    d  .bss	00000000 .bss
00020abc l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
0004537c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00040068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00040314 l     F .text	00000008 __fp_unlock
00040328 l     F .text	0000019c __sinit.part.1
000404c4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002004c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00042f70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004307c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000430a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00043194 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00043274 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00043360 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00043534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00020a74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000437b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000438e4 l     F .text	00000034 alt_dev_reg
00020a20 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00043d64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00043f38 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00044078 l     F .text	0000003c alt_get_errno
000440b4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00042d68 g     F .text	00000054 _isatty_r
00043470 g     F .text	0000007c alt_main
000401a8 g     F .text	000000c0 _puts_r
00042a90 g     F .text	00000060 _lseek_r
00044950 g       *ABS*	00000000 __flash_rwdata_start
00020abc g       *ABS*	00000000 __alt_heap_start
00042044 g     F .text	0000005c __sseek
00040664 g     F .text	00000010 __sinit
000404cc g     F .text	00000068 __sfmoreglue
00043510 g     F .text	00000024 __malloc_unlock
00041730 g     F .text	0000015c memmove
0004064c g     F .text	00000018 _cleanup
000442cc g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00042d0c g     F .text	0000005c _fstat_r
00020a84 g     O .bss	00000004 errno
00041fc0 g     F .text	00000008 __seofread
00020a8c g     O .bss	00000004 alt_argv
00028a4c g       *ABS*	00000000 _gp
00043780 g     F .text	00000030 usleep
000208a0 g     O .rwdata	00000180 alt_fd_list
000442f0 g     F .text	00000090 alt_find_dev
000415e8 g     F .text	00000148 memcpy
0004031c g     F .text	0000000c _cleanup_r
00043ffc g     F .text	0000007c alt_io_redirect
00044950 g       *ABS*	00000000 __DTOR_END__
00040268 g     F .text	00000014 puts
00043a44 g     F .text	000000ec altera_avalon_jtag_uart_read
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00042eb4 g     F .text	00000064 .hidden __udivsi3
000431d0 g     F .text	000000a4 isatty
0004452c g     F .text	00000090 alt_icache_flush
00020a80 g     O .bss	00000004 __malloc_top_pad
000406b4 g     F .text	000004bc __sfvwrite_r
00041f18 g     F .text	00000054 _sbrk_r
00042cac g     F .text	00000060 _read_r
00020a6c g     O .rwdata	00000004 alt_max_fd
000422b0 g     F .text	000000f0 _fclose_r
0004262c g     F .text	00000030 fflush
00020a7c g     O .bss	00000004 __malloc_max_sbrked_mem
0004339c g     F .text	000000d4 lseek
00020a4c g     O .rwdata	00000004 _global_impure_ptr
000419b4 g     F .text	00000564 _realloc_r
00020abc g       *ABS*	00000000 __bss_end
00040684 g     F .text	00000018 __fp_lock_all
00020878 g     O .rwdata	00000028 alt_dev_null
00043d1c g     F .text	00000048 alt_dcache_flush_all
00020a78 g       *ABS*	00000000 __ram_rwdata_end
00020a64 g     O .rwdata	00000008 alt_dev_list
000437ec g     F .text	000000f8 write
0002004c g       *ABS*	00000000 __ram_rodata_end
000430e4 g     F .text	000000b0 fstat
00042f18 g     F .text	00000058 .hidden __umodsi3
00020abc g       *ABS*	00000000 end
00044950 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
00043b30 g     F .text	00000094 altera_avalon_jtag_uart_write
00040674 g     F .text	00000004 __sfp_lock_acquire
00041504 g     F .text	000000e4 memchr
00042780 g     F .text	00000310 _free_r
0004479c g     F .text	00000180 __call_exitprocs
00020a54 g     O .rwdata	00000004 __malloc_sbrk_base
00040020 g     F .text	0000004c _start
00043570 g     F .text	000000fc read
00043950 g     F .text	00000034 alt_sys_init
00044684 g     F .text	00000118 __register_exitproc
0002004c g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
00020a94 g     O .bss	00000028 __malloc_current_mallinfo
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00043984 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00044488 g     F .text	000000a4 alt_get_fd
00043bc4 g     F .text	00000158 alt_busy_sleep
0004225c g     F .text	00000054 _close_r
00044608 g     F .text	0000007c memcmp
00020abc g       *ABS*	00000000 __alt_stack_base
00042108 g     F .text	00000154 __swsetup_r
00040534 g     F .text	00000118 __sfp
00020470 g     O .rwdata	00000408 __malloc_av_
00040680 g     F .text	00000004 __sinit_lock_release
00041f6c g     F .text	00000054 __sread
00044380 g     F .text	00000108 alt_find_file
00043da0 g     F .text	000000a4 alt_dev_llist_insert
000434ec g     F .text	00000024 __malloc_lock
000436d0 g     F .text	000000b0 sbrk
000425d0 g     F .text	0000005c _fflush_r
00020a78 g       *ABS*	00000000 __bss_start
0004188c g     F .text	00000128 memset
000400b0 g     F .text	000000f8 main
00020a90 g     O .bss	00000004 alt_envp
00020a78 g     O .bss	00000004 __malloc_max_total_mem
000439e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000420a0 g     F .text	00000008 __sclose
0003f400 g       *ABS*	00000000 __alt_heap_limit
000423a0 g     F .text	00000014 fclose
00040cf8 g     F .text	0000080c _malloc_r
00020a70 g     O .rwdata	00000004 alt_errno
00040b70 g     F .text	000000c4 _fwalk
00042dbc g     F .text	00000084 .hidden __divsi3
0004265c g     F .text	00000124 _malloc_trim_r
00044950 g       *ABS*	00000000 __CTOR_END__
00020000 g       *ABS*	00000000 __flash_rodata_start
00044950 g       *ABS*	00000000 __DTOR_LIST__
0004006c g     F .text	00000044 delay
00043918 g     F .text	00000038 alt_irq_init
0004366c g     F .text	00000064 alt_release_fd
000445bc g     F .text	00000014 atexit
000420a8 g     F .text	00000060 _write_r
00020a50 g     O .rwdata	00000004 _impure_ptr
00020a88 g     O .bss	00000004 alt_argc
000423b4 g     F .text	0000021c __sflush_r
00043ea4 g     F .text	00000060 _do_dtors
0004069c g     F .text	00000018 __fp_unlock_all
00020a5c g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00020a78 g       *ABS*	00000000 _edata
00020abc g       *ABS*	00000000 _end
00040020 g       *ABS*	00000000 __ram_exceptions_end
00041fc8 g     F .text	0000007c __swrite
00020a58 g     O .rwdata	00000004 __malloc_trim_threshold
000445d0 g     F .text	00000038 exit
00040c34 g     F .text	000000c4 _fwalk_reent
00042e40 g     F .text	00000074 .hidden __modsi3
0003f400 g       *ABS*	00000000 __alt_data_end
00040678 g     F .text	00000004 __sfp_lock_release
0004491c g     F .text	00000034 _exit
00042af0 g     F .text	000001bc __smakebuf_r
0004027c g     F .text	00000098 strlen
00044178 g     F .text	00000154 open
00043f04 g     F .text	00000034 alt_icache_flush_all
00043e44 g     F .text	00000060 _do_ctors
00042fac g     F .text	000000d0 close
000432dc g     F .text	00000084 alt_load
0004067c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08400814 	ori	at,at,32
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>

Disassembly of section .text:

00040020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   4002c:	00bffd16 	blt	zero,r2,40024 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40030:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   40034:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   40038:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   4003c:	d6a29314 	ori	gp,gp,35404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40040:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   40044:	10829e14 	ori	r2,r2,2680

    movhi r3, %hi(__bss_end)
   40048:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   4004c:	18c2af14 	ori	r3,r3,2748

    beq r2, r3, 1f
   40050:	10c00326 	beq	r2,r3,40060 <_start+0x40>

0:
    stw zero, (r2)
   40054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   40058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   4005c:	10fffd36 	bltu	r2,r3,40054 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40060:	00432dc0 	call	432dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40064:	00434700 	call	43470 <alt_main>

00040068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40068:	003fff06 	br	40068 <alt_after_alt_main>

0004006c <delay>:
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n)
{
   4006c:	defffd04 	addi	sp,sp,-12
   40070:	df000215 	stw	fp,8(sp)
   40074:	df000204 	addi	fp,sp,8
   40078:	e13fff15 	stw	r4,-4(fp)
    unsigned int delay = 0;
   4007c:	e03ffe15 	stw	zero,-8(fp)
    while (delay < n)
   40080:	00000306 	br	40090 <delay+0x24>
    {
        delay++;
   40084:	e0bffe17 	ldw	r2,-8(fp)
   40088:	10800044 	addi	r2,r2,1
   4008c:	e0bffe15 	stw	r2,-8(fp)
#include <io.h> /* Leiutura e escrita no Avalon */

int delay(int n)
{
    unsigned int delay = 0;
    while (delay < n)
   40090:	e0bfff17 	ldw	r2,-4(fp)
   40094:	e0fffe17 	ldw	r3,-8(fp)
   40098:	18bffa36 	bltu	r3,r2,40084 <delay+0x18>
    {
        delay++;
    }
}
   4009c:	0001883a 	nop
   400a0:	e037883a 	mov	sp,fp
   400a4:	df000017 	ldw	fp,0(sp)
   400a8:	dec00104 	addi	sp,sp,4
   400ac:	f800283a 	ret

000400b0 <main>:

int main(void)
{
   400b0:	defff904 	addi	sp,sp,-28
   400b4:	dfc00615 	stw	ra,24(sp)
   400b8:	df000515 	stw	fp,20(sp)
   400bc:	df000504 	addi	fp,sp,20
    unsigned int led = 0;
   400c0:	e03ffc15 	stw	zero,-16(fp)
    unsigned int motorPhase = 0;
   400c4:	e03ffb15 	stw	zero,-20(fp)
    unsigned int switches = 0;
   400c8:	e03ffd15 	stw	zero,-12(fp)
    char en = 0;
   400cc:	e03ffe05 	stb	zero,-8(fp)
    char dir = 0;
   400d0:	e03ffe45 	stb	zero,-7(fp)
    char vel0 = 0;
   400d4:	e03ffe85 	stb	zero,-6(fp)
    char vel1 = 0;
   400d8:	e03ffec5 	stb	zero,-5(fp)
    char vel2 = 0;
   400dc:	e03fff05 	stb	zero,-4(fp)
    char vel3 = 0;
   400e0:	e03fff45 	stb	zero,-3(fp)
    printf("Embarcados++ \n");
   400e4:	010000b4 	movhi	r4,2
   400e8:	21000004 	addi	r4,r4,0
   400ec:	00402680 	call	40268 <puts>

    while (1)
    {
        en = IORD_32DIRECT(PIO_1_BASE, 0) & 1;
   400f0:	008001b4 	movhi	r2,6
   400f4:	10840004 	addi	r2,r2,4096
   400f8:	10800037 	ldwio	r2,0(r2)
   400fc:	1080004c 	andi	r2,r2,1
   40100:	e0bffe05 	stb	r2,-8(fp)
        dir = IORD_32DIRECT(PIO_1_BASE, 0) & 2;
   40104:	008001b4 	movhi	r2,6
   40108:	10840004 	addi	r2,r2,4096
   4010c:	10800037 	ldwio	r2,0(r2)
   40110:	1080008c 	andi	r2,r2,2
   40114:	e0bffe45 	stb	r2,-7(fp)
        //vel3 = IORD_32DIRECT(PIO_1_BASE, 0) & 4 & 8 & 16 & 32;
        //printf("vel0:%c\n",vel0);
        //printf("vel1:%c\n",vel1);
        //printf("vel2:%c\n",vel2);
        //printf("vel3:%c\n",vel3);
        if (en)
   40118:	e0bffe07 	ldb	r2,-8(fp)
   4011c:	103ff426 	beq	r2,zero,400f0 <main+0x40>
        {
            if (dir)
   40120:	e0bffe47 	ldb	r2,-7(fp)
   40124:	10001026 	beq	r2,zero,40168 <main+0xb8>
            {
                if (motorPhase <= 3)
   40128:	e0bffb17 	ldw	r2,-20(fp)
   4012c:	10800128 	cmpgeui	r2,r2,4
   40130:	10000b1e 	bne	r2,zero,40160 <main+0xb0>
                {

                    IOWR_32DIRECT(PIO_2_BASE, 0, 0x01 << motorPhase++);
   40134:	e0bffb17 	ldw	r2,-20(fp)
   40138:	10c00044 	addi	r3,r2,1
   4013c:	e0fffb15 	stw	r3,-20(fp)
   40140:	00c00044 	movi	r3,1
   40144:	1886983a 	sll	r3,r3,r2
   40148:	008001b4 	movhi	r2,6
   4014c:	10840404 	addi	r2,r2,4112
   40150:	10c00035 	stwio	r3,0(r2)
                    usleep(5000);
   40154:	0104e204 	movi	r4,5000
   40158:	00437800 	call	43780 <usleep>
   4015c:	003fe406 	br	400f0 <main+0x40>
                    //     usleep(50);
                    // }
                }
                else
                {
                    motorPhase = 0;
   40160:	e03ffb15 	stw	zero,-20(fp)
   40164:	003fe206 	br	400f0 <main+0x40>
                }
            }
            else
            {

                if (motorPhase <= 3)
   40168:	e0bffb17 	ldw	r2,-20(fp)
   4016c:	10800128 	cmpgeui	r2,r2,4
   40170:	10000b1e 	bne	r2,zero,401a0 <main+0xf0>
                {

                    IOWR_32DIRECT(PIO_2_BASE, 0, 0x08 >> motorPhase++);
   40174:	e0bffb17 	ldw	r2,-20(fp)
   40178:	10c00044 	addi	r3,r2,1
   4017c:	e0fffb15 	stw	r3,-20(fp)
   40180:	00c00204 	movi	r3,8
   40184:	1887d83a 	sra	r3,r3,r2
   40188:	008001b4 	movhi	r2,6
   4018c:	10840404 	addi	r2,r2,4112
   40190:	10c00035 	stwio	r3,0(r2)
                    usleep(5000);
   40194:	0104e204 	movi	r4,5000
   40198:	00437800 	call	43780 <usleep>
   4019c:	003fd406 	br	400f0 <main+0x40>
                    //     usleep(50);
                    // }
                }
                else
                {
                    motorPhase = 0;
   401a0:	e03ffb15 	stw	zero,-20(fp)
                }
            }
        };
    }
   401a4:	003fd206 	br	400f0 <main+0x40>

000401a8 <_puts_r>:
   401a8:	defff604 	addi	sp,sp,-40
   401ac:	dc000715 	stw	r16,28(sp)
   401b0:	2021883a 	mov	r16,r4
   401b4:	2809883a 	mov	r4,r5
   401b8:	dc400815 	stw	r17,32(sp)
   401bc:	dfc00915 	stw	ra,36(sp)
   401c0:	2823883a 	mov	r17,r5
   401c4:	004027c0 	call	4027c <strlen>
   401c8:	10c00044 	addi	r3,r2,1
   401cc:	d8800115 	stw	r2,4(sp)
   401d0:	008000b4 	movhi	r2,2
   401d4:	10800404 	addi	r2,r2,16
   401d8:	d8800215 	stw	r2,8(sp)
   401dc:	00800044 	movi	r2,1
   401e0:	d8800315 	stw	r2,12(sp)
   401e4:	00800084 	movi	r2,2
   401e8:	dc400015 	stw	r17,0(sp)
   401ec:	d8c00615 	stw	r3,24(sp)
   401f0:	dec00415 	stw	sp,16(sp)
   401f4:	d8800515 	stw	r2,20(sp)
   401f8:	80000226 	beq	r16,zero,40204 <_puts_r+0x5c>
   401fc:	80800e17 	ldw	r2,56(r16)
   40200:	10001426 	beq	r2,zero,40254 <_puts_r+0xac>
   40204:	81400217 	ldw	r5,8(r16)
   40208:	2880030b 	ldhu	r2,12(r5)
   4020c:	10c8000c 	andi	r3,r2,8192
   40210:	1800061e 	bne	r3,zero,4022c <_puts_r+0x84>
   40214:	29001917 	ldw	r4,100(r5)
   40218:	00f7ffc4 	movi	r3,-8193
   4021c:	10880014 	ori	r2,r2,8192
   40220:	20c6703a 	and	r3,r4,r3
   40224:	2880030d 	sth	r2,12(r5)
   40228:	28c01915 	stw	r3,100(r5)
   4022c:	d9800404 	addi	r6,sp,16
   40230:	8009883a 	mov	r4,r16
   40234:	00406b40 	call	406b4 <__sfvwrite_r>
   40238:	1000091e 	bne	r2,zero,40260 <_puts_r+0xb8>
   4023c:	00800284 	movi	r2,10
   40240:	dfc00917 	ldw	ra,36(sp)
   40244:	dc400817 	ldw	r17,32(sp)
   40248:	dc000717 	ldw	r16,28(sp)
   4024c:	dec00a04 	addi	sp,sp,40
   40250:	f800283a 	ret
   40254:	8009883a 	mov	r4,r16
   40258:	00406640 	call	40664 <__sinit>
   4025c:	003fe906 	br	40204 <_puts_r+0x5c>
   40260:	00bfffc4 	movi	r2,-1
   40264:	003ff606 	br	40240 <_puts_r+0x98>

00040268 <puts>:
   40268:	008000b4 	movhi	r2,2
   4026c:	10829404 	addi	r2,r2,2640
   40270:	200b883a 	mov	r5,r4
   40274:	11000017 	ldw	r4,0(r2)
   40278:	00401a81 	jmpi	401a8 <_puts_r>

0004027c <strlen>:
   4027c:	208000cc 	andi	r2,r4,3
   40280:	10002026 	beq	r2,zero,40304 <strlen+0x88>
   40284:	20800007 	ldb	r2,0(r4)
   40288:	10002026 	beq	r2,zero,4030c <strlen+0x90>
   4028c:	2005883a 	mov	r2,r4
   40290:	00000206 	br	4029c <strlen+0x20>
   40294:	10c00007 	ldb	r3,0(r2)
   40298:	18001826 	beq	r3,zero,402fc <strlen+0x80>
   4029c:	10800044 	addi	r2,r2,1
   402a0:	10c000cc 	andi	r3,r2,3
   402a4:	183ffb1e 	bne	r3,zero,40294 <strlen+0x18>
   402a8:	10c00017 	ldw	r3,0(r2)
   402ac:	01ffbff4 	movhi	r7,65279
   402b0:	39ffbfc4 	addi	r7,r7,-257
   402b4:	00ca303a 	nor	r5,zero,r3
   402b8:	01a02074 	movhi	r6,32897
   402bc:	19c7883a 	add	r3,r3,r7
   402c0:	31a02004 	addi	r6,r6,-32640
   402c4:	1946703a 	and	r3,r3,r5
   402c8:	1986703a 	and	r3,r3,r6
   402cc:	1800091e 	bne	r3,zero,402f4 <strlen+0x78>
   402d0:	10800104 	addi	r2,r2,4
   402d4:	10c00017 	ldw	r3,0(r2)
   402d8:	19cb883a 	add	r5,r3,r7
   402dc:	00c6303a 	nor	r3,zero,r3
   402e0:	28c6703a 	and	r3,r5,r3
   402e4:	1986703a 	and	r3,r3,r6
   402e8:	183ff926 	beq	r3,zero,402d0 <strlen+0x54>
   402ec:	00000106 	br	402f4 <strlen+0x78>
   402f0:	10800044 	addi	r2,r2,1
   402f4:	10c00007 	ldb	r3,0(r2)
   402f8:	183ffd1e 	bne	r3,zero,402f0 <strlen+0x74>
   402fc:	1105c83a 	sub	r2,r2,r4
   40300:	f800283a 	ret
   40304:	2005883a 	mov	r2,r4
   40308:	003fe706 	br	402a8 <strlen+0x2c>
   4030c:	0005883a 	mov	r2,zero
   40310:	f800283a 	ret

00040314 <__fp_unlock>:
   40314:	0005883a 	mov	r2,zero
   40318:	f800283a 	ret

0004031c <_cleanup_r>:
   4031c:	01400134 	movhi	r5,4
   40320:	2948ac04 	addi	r5,r5,8880
   40324:	0040c341 	jmpi	40c34 <_fwalk_reent>

00040328 <__sinit.part.1>:
   40328:	defff704 	addi	sp,sp,-36
   4032c:	00c00134 	movhi	r3,4
   40330:	dfc00815 	stw	ra,32(sp)
   40334:	ddc00715 	stw	r23,28(sp)
   40338:	dd800615 	stw	r22,24(sp)
   4033c:	dd400515 	stw	r21,20(sp)
   40340:	dd000415 	stw	r20,16(sp)
   40344:	dcc00315 	stw	r19,12(sp)
   40348:	dc800215 	stw	r18,8(sp)
   4034c:	dc400115 	stw	r17,4(sp)
   40350:	dc000015 	stw	r16,0(sp)
   40354:	18c0c704 	addi	r3,r3,796
   40358:	24000117 	ldw	r16,4(r4)
   4035c:	20c00f15 	stw	r3,60(r4)
   40360:	2080bb04 	addi	r2,r4,748
   40364:	00c000c4 	movi	r3,3
   40368:	20c0b915 	stw	r3,740(r4)
   4036c:	2080ba15 	stw	r2,744(r4)
   40370:	2000b815 	stw	zero,736(r4)
   40374:	05c00204 	movi	r23,8
   40378:	00800104 	movi	r2,4
   4037c:	2025883a 	mov	r18,r4
   40380:	b80d883a 	mov	r6,r23
   40384:	81001704 	addi	r4,r16,92
   40388:	000b883a 	mov	r5,zero
   4038c:	80000015 	stw	zero,0(r16)
   40390:	80000115 	stw	zero,4(r16)
   40394:	80000215 	stw	zero,8(r16)
   40398:	8080030d 	sth	r2,12(r16)
   4039c:	80001915 	stw	zero,100(r16)
   403a0:	8000038d 	sth	zero,14(r16)
   403a4:	80000415 	stw	zero,16(r16)
   403a8:	80000515 	stw	zero,20(r16)
   403ac:	80000615 	stw	zero,24(r16)
   403b0:	004188c0 	call	4188c <memset>
   403b4:	05800134 	movhi	r22,4
   403b8:	94400217 	ldw	r17,8(r18)
   403bc:	05400134 	movhi	r21,4
   403c0:	05000134 	movhi	r20,4
   403c4:	04c00134 	movhi	r19,4
   403c8:	b587db04 	addi	r22,r22,8044
   403cc:	ad47f204 	addi	r21,r21,8136
   403d0:	a5081104 	addi	r20,r20,8260
   403d4:	9cc82804 	addi	r19,r19,8352
   403d8:	85800815 	stw	r22,32(r16)
   403dc:	85400915 	stw	r21,36(r16)
   403e0:	85000a15 	stw	r20,40(r16)
   403e4:	84c00b15 	stw	r19,44(r16)
   403e8:	84000715 	stw	r16,28(r16)
   403ec:	00800284 	movi	r2,10
   403f0:	8880030d 	sth	r2,12(r17)
   403f4:	00800044 	movi	r2,1
   403f8:	b80d883a 	mov	r6,r23
   403fc:	89001704 	addi	r4,r17,92
   40400:	000b883a 	mov	r5,zero
   40404:	88000015 	stw	zero,0(r17)
   40408:	88000115 	stw	zero,4(r17)
   4040c:	88000215 	stw	zero,8(r17)
   40410:	88001915 	stw	zero,100(r17)
   40414:	8880038d 	sth	r2,14(r17)
   40418:	88000415 	stw	zero,16(r17)
   4041c:	88000515 	stw	zero,20(r17)
   40420:	88000615 	stw	zero,24(r17)
   40424:	004188c0 	call	4188c <memset>
   40428:	94000317 	ldw	r16,12(r18)
   4042c:	00800484 	movi	r2,18
   40430:	8c400715 	stw	r17,28(r17)
   40434:	8d800815 	stw	r22,32(r17)
   40438:	8d400915 	stw	r21,36(r17)
   4043c:	8d000a15 	stw	r20,40(r17)
   40440:	8cc00b15 	stw	r19,44(r17)
   40444:	8080030d 	sth	r2,12(r16)
   40448:	00800084 	movi	r2,2
   4044c:	80000015 	stw	zero,0(r16)
   40450:	80000115 	stw	zero,4(r16)
   40454:	80000215 	stw	zero,8(r16)
   40458:	80001915 	stw	zero,100(r16)
   4045c:	8080038d 	sth	r2,14(r16)
   40460:	80000415 	stw	zero,16(r16)
   40464:	80000515 	stw	zero,20(r16)
   40468:	80000615 	stw	zero,24(r16)
   4046c:	b80d883a 	mov	r6,r23
   40470:	000b883a 	mov	r5,zero
   40474:	81001704 	addi	r4,r16,92
   40478:	004188c0 	call	4188c <memset>
   4047c:	00800044 	movi	r2,1
   40480:	84000715 	stw	r16,28(r16)
   40484:	85800815 	stw	r22,32(r16)
   40488:	85400915 	stw	r21,36(r16)
   4048c:	85000a15 	stw	r20,40(r16)
   40490:	84c00b15 	stw	r19,44(r16)
   40494:	90800e15 	stw	r2,56(r18)
   40498:	dfc00817 	ldw	ra,32(sp)
   4049c:	ddc00717 	ldw	r23,28(sp)
   404a0:	dd800617 	ldw	r22,24(sp)
   404a4:	dd400517 	ldw	r21,20(sp)
   404a8:	dd000417 	ldw	r20,16(sp)
   404ac:	dcc00317 	ldw	r19,12(sp)
   404b0:	dc800217 	ldw	r18,8(sp)
   404b4:	dc400117 	ldw	r17,4(sp)
   404b8:	dc000017 	ldw	r16,0(sp)
   404bc:	dec00904 	addi	sp,sp,36
   404c0:	f800283a 	ret

000404c4 <__fp_lock>:
   404c4:	0005883a 	mov	r2,zero
   404c8:	f800283a 	ret

000404cc <__sfmoreglue>:
   404cc:	defffc04 	addi	sp,sp,-16
   404d0:	dc400115 	stw	r17,4(sp)
   404d4:	2c7fffc4 	addi	r17,r5,-1
   404d8:	8c401a24 	muli	r17,r17,104
   404dc:	dc800215 	stw	r18,8(sp)
   404e0:	2825883a 	mov	r18,r5
   404e4:	89401d04 	addi	r5,r17,116
   404e8:	dc000015 	stw	r16,0(sp)
   404ec:	dfc00315 	stw	ra,12(sp)
   404f0:	0040cf80 	call	40cf8 <_malloc_r>
   404f4:	1021883a 	mov	r16,r2
   404f8:	10000726 	beq	r2,zero,40518 <__sfmoreglue+0x4c>
   404fc:	11000304 	addi	r4,r2,12
   40500:	10000015 	stw	zero,0(r2)
   40504:	14800115 	stw	r18,4(r2)
   40508:	11000215 	stw	r4,8(r2)
   4050c:	89801a04 	addi	r6,r17,104
   40510:	000b883a 	mov	r5,zero
   40514:	004188c0 	call	4188c <memset>
   40518:	8005883a 	mov	r2,r16
   4051c:	dfc00317 	ldw	ra,12(sp)
   40520:	dc800217 	ldw	r18,8(sp)
   40524:	dc400117 	ldw	r17,4(sp)
   40528:	dc000017 	ldw	r16,0(sp)
   4052c:	dec00404 	addi	sp,sp,16
   40530:	f800283a 	ret

00040534 <__sfp>:
   40534:	defffb04 	addi	sp,sp,-20
   40538:	dc000015 	stw	r16,0(sp)
   4053c:	040000b4 	movhi	r16,2
   40540:	84029304 	addi	r16,r16,2636
   40544:	dcc00315 	stw	r19,12(sp)
   40548:	2027883a 	mov	r19,r4
   4054c:	81000017 	ldw	r4,0(r16)
   40550:	dfc00415 	stw	ra,16(sp)
   40554:	dc800215 	stw	r18,8(sp)
   40558:	20800e17 	ldw	r2,56(r4)
   4055c:	dc400115 	stw	r17,4(sp)
   40560:	1000021e 	bne	r2,zero,4056c <__sfp+0x38>
   40564:	00403280 	call	40328 <__sinit.part.1>
   40568:	81000017 	ldw	r4,0(r16)
   4056c:	2480b804 	addi	r18,r4,736
   40570:	047fffc4 	movi	r17,-1
   40574:	91000117 	ldw	r4,4(r18)
   40578:	94000217 	ldw	r16,8(r18)
   4057c:	213fffc4 	addi	r4,r4,-1
   40580:	20000a16 	blt	r4,zero,405ac <__sfp+0x78>
   40584:	8080030f 	ldh	r2,12(r16)
   40588:	10000c26 	beq	r2,zero,405bc <__sfp+0x88>
   4058c:	80c01d04 	addi	r3,r16,116
   40590:	00000206 	br	4059c <__sfp+0x68>
   40594:	18bfe60f 	ldh	r2,-104(r3)
   40598:	10000826 	beq	r2,zero,405bc <__sfp+0x88>
   4059c:	213fffc4 	addi	r4,r4,-1
   405a0:	1c3ffd04 	addi	r16,r3,-12
   405a4:	18c01a04 	addi	r3,r3,104
   405a8:	247ffa1e 	bne	r4,r17,40594 <__sfp+0x60>
   405ac:	90800017 	ldw	r2,0(r18)
   405b0:	10001d26 	beq	r2,zero,40628 <__sfp+0xf4>
   405b4:	1025883a 	mov	r18,r2
   405b8:	003fee06 	br	40574 <__sfp+0x40>
   405bc:	00bfffc4 	movi	r2,-1
   405c0:	8080038d 	sth	r2,14(r16)
   405c4:	00800044 	movi	r2,1
   405c8:	8080030d 	sth	r2,12(r16)
   405cc:	80001915 	stw	zero,100(r16)
   405d0:	80000015 	stw	zero,0(r16)
   405d4:	80000215 	stw	zero,8(r16)
   405d8:	80000115 	stw	zero,4(r16)
   405dc:	80000415 	stw	zero,16(r16)
   405e0:	80000515 	stw	zero,20(r16)
   405e4:	80000615 	stw	zero,24(r16)
   405e8:	01800204 	movi	r6,8
   405ec:	000b883a 	mov	r5,zero
   405f0:	81001704 	addi	r4,r16,92
   405f4:	004188c0 	call	4188c <memset>
   405f8:	8005883a 	mov	r2,r16
   405fc:	80000c15 	stw	zero,48(r16)
   40600:	80000d15 	stw	zero,52(r16)
   40604:	80001115 	stw	zero,68(r16)
   40608:	80001215 	stw	zero,72(r16)
   4060c:	dfc00417 	ldw	ra,16(sp)
   40610:	dcc00317 	ldw	r19,12(sp)
   40614:	dc800217 	ldw	r18,8(sp)
   40618:	dc400117 	ldw	r17,4(sp)
   4061c:	dc000017 	ldw	r16,0(sp)
   40620:	dec00504 	addi	sp,sp,20
   40624:	f800283a 	ret
   40628:	01400104 	movi	r5,4
   4062c:	9809883a 	mov	r4,r19
   40630:	00404cc0 	call	404cc <__sfmoreglue>
   40634:	90800015 	stw	r2,0(r18)
   40638:	103fde1e 	bne	r2,zero,405b4 <__sfp+0x80>
   4063c:	00800304 	movi	r2,12
   40640:	98800015 	stw	r2,0(r19)
   40644:	0005883a 	mov	r2,zero
   40648:	003ff006 	br	4060c <__sfp+0xd8>

0004064c <_cleanup>:
   4064c:	008000b4 	movhi	r2,2
   40650:	10829304 	addi	r2,r2,2636
   40654:	11000017 	ldw	r4,0(r2)
   40658:	01400134 	movhi	r5,4
   4065c:	2948ac04 	addi	r5,r5,8880
   40660:	0040c341 	jmpi	40c34 <_fwalk_reent>

00040664 <__sinit>:
   40664:	20800e17 	ldw	r2,56(r4)
   40668:	10000126 	beq	r2,zero,40670 <__sinit+0xc>
   4066c:	f800283a 	ret
   40670:	00403281 	jmpi	40328 <__sinit.part.1>

00040674 <__sfp_lock_acquire>:
   40674:	f800283a 	ret

00040678 <__sfp_lock_release>:
   40678:	f800283a 	ret

0004067c <__sinit_lock_acquire>:
   4067c:	f800283a 	ret

00040680 <__sinit_lock_release>:
   40680:	f800283a 	ret

00040684 <__fp_lock_all>:
   40684:	008000b4 	movhi	r2,2
   40688:	10829404 	addi	r2,r2,2640
   4068c:	11000017 	ldw	r4,0(r2)
   40690:	01400134 	movhi	r5,4
   40694:	29413104 	addi	r5,r5,1220
   40698:	0040b701 	jmpi	40b70 <_fwalk>

0004069c <__fp_unlock_all>:
   4069c:	008000b4 	movhi	r2,2
   406a0:	10829404 	addi	r2,r2,2640
   406a4:	11000017 	ldw	r4,0(r2)
   406a8:	01400134 	movhi	r5,4
   406ac:	2940c504 	addi	r5,r5,788
   406b0:	0040b701 	jmpi	40b70 <_fwalk>

000406b4 <__sfvwrite_r>:
   406b4:	30800217 	ldw	r2,8(r6)
   406b8:	10006726 	beq	r2,zero,40858 <__sfvwrite_r+0x1a4>
   406bc:	28c0030b 	ldhu	r3,12(r5)
   406c0:	defff404 	addi	sp,sp,-48
   406c4:	dd400715 	stw	r21,28(sp)
   406c8:	dd000615 	stw	r20,24(sp)
   406cc:	dc000215 	stw	r16,8(sp)
   406d0:	dfc00b15 	stw	ra,44(sp)
   406d4:	df000a15 	stw	fp,40(sp)
   406d8:	ddc00915 	stw	r23,36(sp)
   406dc:	dd800815 	stw	r22,32(sp)
   406e0:	dcc00515 	stw	r19,20(sp)
   406e4:	dc800415 	stw	r18,16(sp)
   406e8:	dc400315 	stw	r17,12(sp)
   406ec:	1880020c 	andi	r2,r3,8
   406f0:	2821883a 	mov	r16,r5
   406f4:	202b883a 	mov	r21,r4
   406f8:	3029883a 	mov	r20,r6
   406fc:	10002726 	beq	r2,zero,4079c <__sfvwrite_r+0xe8>
   40700:	28800417 	ldw	r2,16(r5)
   40704:	10002526 	beq	r2,zero,4079c <__sfvwrite_r+0xe8>
   40708:	1880008c 	andi	r2,r3,2
   4070c:	a4400017 	ldw	r17,0(r20)
   40710:	10002a26 	beq	r2,zero,407bc <__sfvwrite_r+0x108>
   40714:	05a00034 	movhi	r22,32768
   40718:	0027883a 	mov	r19,zero
   4071c:	0025883a 	mov	r18,zero
   40720:	b5bf0004 	addi	r22,r22,-1024
   40724:	980d883a 	mov	r6,r19
   40728:	a809883a 	mov	r4,r21
   4072c:	90004626 	beq	r18,zero,40848 <__sfvwrite_r+0x194>
   40730:	900f883a 	mov	r7,r18
   40734:	b480022e 	bgeu	r22,r18,40740 <__sfvwrite_r+0x8c>
   40738:	01e00034 	movhi	r7,32768
   4073c:	39ff0004 	addi	r7,r7,-1024
   40740:	80800917 	ldw	r2,36(r16)
   40744:	81400717 	ldw	r5,28(r16)
   40748:	103ee83a 	callr	r2
   4074c:	0080570e 	bge	zero,r2,408ac <__sfvwrite_r+0x1f8>
   40750:	a0c00217 	ldw	r3,8(r20)
   40754:	98a7883a 	add	r19,r19,r2
   40758:	90a5c83a 	sub	r18,r18,r2
   4075c:	1885c83a 	sub	r2,r3,r2
   40760:	a0800215 	stw	r2,8(r20)
   40764:	103fef1e 	bne	r2,zero,40724 <__sfvwrite_r+0x70>
   40768:	0005883a 	mov	r2,zero
   4076c:	dfc00b17 	ldw	ra,44(sp)
   40770:	df000a17 	ldw	fp,40(sp)
   40774:	ddc00917 	ldw	r23,36(sp)
   40778:	dd800817 	ldw	r22,32(sp)
   4077c:	dd400717 	ldw	r21,28(sp)
   40780:	dd000617 	ldw	r20,24(sp)
   40784:	dcc00517 	ldw	r19,20(sp)
   40788:	dc800417 	ldw	r18,16(sp)
   4078c:	dc400317 	ldw	r17,12(sp)
   40790:	dc000217 	ldw	r16,8(sp)
   40794:	dec00c04 	addi	sp,sp,48
   40798:	f800283a 	ret
   4079c:	800b883a 	mov	r5,r16
   407a0:	a809883a 	mov	r4,r21
   407a4:	00421080 	call	42108 <__swsetup_r>
   407a8:	1000eb1e 	bne	r2,zero,40b58 <__sfvwrite_r+0x4a4>
   407ac:	80c0030b 	ldhu	r3,12(r16)
   407b0:	a4400017 	ldw	r17,0(r20)
   407b4:	1880008c 	andi	r2,r3,2
   407b8:	103fd61e 	bne	r2,zero,40714 <__sfvwrite_r+0x60>
   407bc:	1880004c 	andi	r2,r3,1
   407c0:	10003f1e 	bne	r2,zero,408c0 <__sfvwrite_r+0x20c>
   407c4:	0039883a 	mov	fp,zero
   407c8:	0025883a 	mov	r18,zero
   407cc:	90001a26 	beq	r18,zero,40838 <__sfvwrite_r+0x184>
   407d0:	1880800c 	andi	r2,r3,512
   407d4:	84c00217 	ldw	r19,8(r16)
   407d8:	10002126 	beq	r2,zero,40860 <__sfvwrite_r+0x1ac>
   407dc:	982f883a 	mov	r23,r19
   407e0:	94c09336 	bltu	r18,r19,40a30 <__sfvwrite_r+0x37c>
   407e4:	1881200c 	andi	r2,r3,1152
   407e8:	10009e1e 	bne	r2,zero,40a64 <__sfvwrite_r+0x3b0>
   407ec:	81000017 	ldw	r4,0(r16)
   407f0:	b80d883a 	mov	r6,r23
   407f4:	e00b883a 	mov	r5,fp
   407f8:	00417300 	call	41730 <memmove>
   407fc:	80c00217 	ldw	r3,8(r16)
   40800:	81000017 	ldw	r4,0(r16)
   40804:	9005883a 	mov	r2,r18
   40808:	1ce7c83a 	sub	r19,r3,r19
   4080c:	25cf883a 	add	r7,r4,r23
   40810:	84c00215 	stw	r19,8(r16)
   40814:	81c00015 	stw	r7,0(r16)
   40818:	a0c00217 	ldw	r3,8(r20)
   4081c:	e0b9883a 	add	fp,fp,r2
   40820:	90a5c83a 	sub	r18,r18,r2
   40824:	18a7c83a 	sub	r19,r3,r2
   40828:	a4c00215 	stw	r19,8(r20)
   4082c:	983fce26 	beq	r19,zero,40768 <__sfvwrite_r+0xb4>
   40830:	80c0030b 	ldhu	r3,12(r16)
   40834:	903fe61e 	bne	r18,zero,407d0 <__sfvwrite_r+0x11c>
   40838:	8f000017 	ldw	fp,0(r17)
   4083c:	8c800117 	ldw	r18,4(r17)
   40840:	8c400204 	addi	r17,r17,8
   40844:	003fe106 	br	407cc <__sfvwrite_r+0x118>
   40848:	8cc00017 	ldw	r19,0(r17)
   4084c:	8c800117 	ldw	r18,4(r17)
   40850:	8c400204 	addi	r17,r17,8
   40854:	003fb306 	br	40724 <__sfvwrite_r+0x70>
   40858:	0005883a 	mov	r2,zero
   4085c:	f800283a 	ret
   40860:	81000017 	ldw	r4,0(r16)
   40864:	80800417 	ldw	r2,16(r16)
   40868:	11005736 	bltu	r2,r4,409c8 <__sfvwrite_r+0x314>
   4086c:	85c00517 	ldw	r23,20(r16)
   40870:	95c05536 	bltu	r18,r23,409c8 <__sfvwrite_r+0x314>
   40874:	00a00034 	movhi	r2,32768
   40878:	10bfffc4 	addi	r2,r2,-1
   4087c:	9009883a 	mov	r4,r18
   40880:	1480012e 	bgeu	r2,r18,40888 <__sfvwrite_r+0x1d4>
   40884:	1009883a 	mov	r4,r2
   40888:	b80b883a 	mov	r5,r23
   4088c:	0042dbc0 	call	42dbc <__divsi3>
   40890:	15cf383a 	mul	r7,r2,r23
   40894:	81400717 	ldw	r5,28(r16)
   40898:	80800917 	ldw	r2,36(r16)
   4089c:	e00d883a 	mov	r6,fp
   408a0:	a809883a 	mov	r4,r21
   408a4:	103ee83a 	callr	r2
   408a8:	00bfdb16 	blt	zero,r2,40818 <__sfvwrite_r+0x164>
   408ac:	8080030b 	ldhu	r2,12(r16)
   408b0:	10801014 	ori	r2,r2,64
   408b4:	8080030d 	sth	r2,12(r16)
   408b8:	00bfffc4 	movi	r2,-1
   408bc:	003fab06 	br	4076c <__sfvwrite_r+0xb8>
   408c0:	0027883a 	mov	r19,zero
   408c4:	0011883a 	mov	r8,zero
   408c8:	0039883a 	mov	fp,zero
   408cc:	0025883a 	mov	r18,zero
   408d0:	90001f26 	beq	r18,zero,40950 <__sfvwrite_r+0x29c>
   408d4:	40005a26 	beq	r8,zero,40a40 <__sfvwrite_r+0x38c>
   408d8:	982d883a 	mov	r22,r19
   408dc:	94c0012e 	bgeu	r18,r19,408e4 <__sfvwrite_r+0x230>
   408e0:	902d883a 	mov	r22,r18
   408e4:	81000017 	ldw	r4,0(r16)
   408e8:	80800417 	ldw	r2,16(r16)
   408ec:	b02f883a 	mov	r23,r22
   408f0:	81c00517 	ldw	r7,20(r16)
   408f4:	1100032e 	bgeu	r2,r4,40904 <__sfvwrite_r+0x250>
   408f8:	80c00217 	ldw	r3,8(r16)
   408fc:	38c7883a 	add	r3,r7,r3
   40900:	1d801816 	blt	r3,r22,40964 <__sfvwrite_r+0x2b0>
   40904:	b1c03e16 	blt	r22,r7,40a00 <__sfvwrite_r+0x34c>
   40908:	80800917 	ldw	r2,36(r16)
   4090c:	81400717 	ldw	r5,28(r16)
   40910:	e00d883a 	mov	r6,fp
   40914:	da000115 	stw	r8,4(sp)
   40918:	a809883a 	mov	r4,r21
   4091c:	103ee83a 	callr	r2
   40920:	102f883a 	mov	r23,r2
   40924:	da000117 	ldw	r8,4(sp)
   40928:	00bfe00e 	bge	zero,r2,408ac <__sfvwrite_r+0x1f8>
   4092c:	9de7c83a 	sub	r19,r19,r23
   40930:	98001f26 	beq	r19,zero,409b0 <__sfvwrite_r+0x2fc>
   40934:	a0800217 	ldw	r2,8(r20)
   40938:	e5f9883a 	add	fp,fp,r23
   4093c:	95e5c83a 	sub	r18,r18,r23
   40940:	15efc83a 	sub	r23,r2,r23
   40944:	a5c00215 	stw	r23,8(r20)
   40948:	b83f8726 	beq	r23,zero,40768 <__sfvwrite_r+0xb4>
   4094c:	903fe11e 	bne	r18,zero,408d4 <__sfvwrite_r+0x220>
   40950:	8f000017 	ldw	fp,0(r17)
   40954:	8c800117 	ldw	r18,4(r17)
   40958:	0011883a 	mov	r8,zero
   4095c:	8c400204 	addi	r17,r17,8
   40960:	003fdb06 	br	408d0 <__sfvwrite_r+0x21c>
   40964:	180d883a 	mov	r6,r3
   40968:	e00b883a 	mov	r5,fp
   4096c:	da000115 	stw	r8,4(sp)
   40970:	d8c00015 	stw	r3,0(sp)
   40974:	00417300 	call	41730 <memmove>
   40978:	d8c00017 	ldw	r3,0(sp)
   4097c:	80800017 	ldw	r2,0(r16)
   40980:	800b883a 	mov	r5,r16
   40984:	a809883a 	mov	r4,r21
   40988:	10c5883a 	add	r2,r2,r3
   4098c:	80800015 	stw	r2,0(r16)
   40990:	d8c00015 	stw	r3,0(sp)
   40994:	00425d00 	call	425d0 <_fflush_r>
   40998:	d8c00017 	ldw	r3,0(sp)
   4099c:	da000117 	ldw	r8,4(sp)
   409a0:	103fc21e 	bne	r2,zero,408ac <__sfvwrite_r+0x1f8>
   409a4:	182f883a 	mov	r23,r3
   409a8:	9de7c83a 	sub	r19,r19,r23
   409ac:	983fe11e 	bne	r19,zero,40934 <__sfvwrite_r+0x280>
   409b0:	800b883a 	mov	r5,r16
   409b4:	a809883a 	mov	r4,r21
   409b8:	00425d00 	call	425d0 <_fflush_r>
   409bc:	103fbb1e 	bne	r2,zero,408ac <__sfvwrite_r+0x1f8>
   409c0:	0011883a 	mov	r8,zero
   409c4:	003fdb06 	br	40934 <__sfvwrite_r+0x280>
   409c8:	94c0012e 	bgeu	r18,r19,409d0 <__sfvwrite_r+0x31c>
   409cc:	9027883a 	mov	r19,r18
   409d0:	980d883a 	mov	r6,r19
   409d4:	e00b883a 	mov	r5,fp
   409d8:	00417300 	call	41730 <memmove>
   409dc:	80800217 	ldw	r2,8(r16)
   409e0:	80c00017 	ldw	r3,0(r16)
   409e4:	14c5c83a 	sub	r2,r2,r19
   409e8:	1cc7883a 	add	r3,r3,r19
   409ec:	80800215 	stw	r2,8(r16)
   409f0:	80c00015 	stw	r3,0(r16)
   409f4:	10004326 	beq	r2,zero,40b04 <__sfvwrite_r+0x450>
   409f8:	9805883a 	mov	r2,r19
   409fc:	003f8606 	br	40818 <__sfvwrite_r+0x164>
   40a00:	b00d883a 	mov	r6,r22
   40a04:	e00b883a 	mov	r5,fp
   40a08:	da000115 	stw	r8,4(sp)
   40a0c:	00417300 	call	41730 <memmove>
   40a10:	80800217 	ldw	r2,8(r16)
   40a14:	80c00017 	ldw	r3,0(r16)
   40a18:	da000117 	ldw	r8,4(sp)
   40a1c:	1585c83a 	sub	r2,r2,r22
   40a20:	1dad883a 	add	r22,r3,r22
   40a24:	80800215 	stw	r2,8(r16)
   40a28:	85800015 	stw	r22,0(r16)
   40a2c:	003fbf06 	br	4092c <__sfvwrite_r+0x278>
   40a30:	81000017 	ldw	r4,0(r16)
   40a34:	9027883a 	mov	r19,r18
   40a38:	902f883a 	mov	r23,r18
   40a3c:	003f6c06 	br	407f0 <__sfvwrite_r+0x13c>
   40a40:	900d883a 	mov	r6,r18
   40a44:	01400284 	movi	r5,10
   40a48:	e009883a 	mov	r4,fp
   40a4c:	00415040 	call	41504 <memchr>
   40a50:	10003e26 	beq	r2,zero,40b4c <__sfvwrite_r+0x498>
   40a54:	10800044 	addi	r2,r2,1
   40a58:	1727c83a 	sub	r19,r2,fp
   40a5c:	02000044 	movi	r8,1
   40a60:	003f9d06 	br	408d8 <__sfvwrite_r+0x224>
   40a64:	80800517 	ldw	r2,20(r16)
   40a68:	81400417 	ldw	r5,16(r16)
   40a6c:	81c00017 	ldw	r7,0(r16)
   40a70:	10a7883a 	add	r19,r2,r2
   40a74:	9885883a 	add	r2,r19,r2
   40a78:	1026d7fa 	srli	r19,r2,31
   40a7c:	396dc83a 	sub	r22,r7,r5
   40a80:	b1000044 	addi	r4,r22,1
   40a84:	9885883a 	add	r2,r19,r2
   40a88:	1027d07a 	srai	r19,r2,1
   40a8c:	2485883a 	add	r2,r4,r18
   40a90:	980d883a 	mov	r6,r19
   40a94:	9880022e 	bgeu	r19,r2,40aa0 <__sfvwrite_r+0x3ec>
   40a98:	1027883a 	mov	r19,r2
   40a9c:	100d883a 	mov	r6,r2
   40aa0:	18c1000c 	andi	r3,r3,1024
   40aa4:	18001c26 	beq	r3,zero,40b18 <__sfvwrite_r+0x464>
   40aa8:	300b883a 	mov	r5,r6
   40aac:	a809883a 	mov	r4,r21
   40ab0:	0040cf80 	call	40cf8 <_malloc_r>
   40ab4:	102f883a 	mov	r23,r2
   40ab8:	10002926 	beq	r2,zero,40b60 <__sfvwrite_r+0x4ac>
   40abc:	81400417 	ldw	r5,16(r16)
   40ac0:	b00d883a 	mov	r6,r22
   40ac4:	1009883a 	mov	r4,r2
   40ac8:	00415e80 	call	415e8 <memcpy>
   40acc:	8080030b 	ldhu	r2,12(r16)
   40ad0:	00fedfc4 	movi	r3,-1153
   40ad4:	10c4703a 	and	r2,r2,r3
   40ad8:	10802014 	ori	r2,r2,128
   40adc:	8080030d 	sth	r2,12(r16)
   40ae0:	bd89883a 	add	r4,r23,r22
   40ae4:	9d8fc83a 	sub	r7,r19,r22
   40ae8:	85c00415 	stw	r23,16(r16)
   40aec:	84c00515 	stw	r19,20(r16)
   40af0:	81000015 	stw	r4,0(r16)
   40af4:	9027883a 	mov	r19,r18
   40af8:	81c00215 	stw	r7,8(r16)
   40afc:	902f883a 	mov	r23,r18
   40b00:	003f3b06 	br	407f0 <__sfvwrite_r+0x13c>
   40b04:	800b883a 	mov	r5,r16
   40b08:	a809883a 	mov	r4,r21
   40b0c:	00425d00 	call	425d0 <_fflush_r>
   40b10:	103fb926 	beq	r2,zero,409f8 <__sfvwrite_r+0x344>
   40b14:	003f6506 	br	408ac <__sfvwrite_r+0x1f8>
   40b18:	a809883a 	mov	r4,r21
   40b1c:	00419b40 	call	419b4 <_realloc_r>
   40b20:	102f883a 	mov	r23,r2
   40b24:	103fee1e 	bne	r2,zero,40ae0 <__sfvwrite_r+0x42c>
   40b28:	81400417 	ldw	r5,16(r16)
   40b2c:	a809883a 	mov	r4,r21
   40b30:	00427800 	call	42780 <_free_r>
   40b34:	8080030b 	ldhu	r2,12(r16)
   40b38:	00ffdfc4 	movi	r3,-129
   40b3c:	1884703a 	and	r2,r3,r2
   40b40:	00c00304 	movi	r3,12
   40b44:	a8c00015 	stw	r3,0(r21)
   40b48:	003f5906 	br	408b0 <__sfvwrite_r+0x1fc>
   40b4c:	94c00044 	addi	r19,r18,1
   40b50:	02000044 	movi	r8,1
   40b54:	003f6006 	br	408d8 <__sfvwrite_r+0x224>
   40b58:	00bfffc4 	movi	r2,-1
   40b5c:	003f0306 	br	4076c <__sfvwrite_r+0xb8>
   40b60:	00800304 	movi	r2,12
   40b64:	a8800015 	stw	r2,0(r21)
   40b68:	8080030b 	ldhu	r2,12(r16)
   40b6c:	003f5006 	br	408b0 <__sfvwrite_r+0x1fc>

00040b70 <_fwalk>:
   40b70:	defff704 	addi	sp,sp,-36
   40b74:	dd000415 	stw	r20,16(sp)
   40b78:	dfc00815 	stw	ra,32(sp)
   40b7c:	ddc00715 	stw	r23,28(sp)
   40b80:	dd800615 	stw	r22,24(sp)
   40b84:	dd400515 	stw	r21,20(sp)
   40b88:	dcc00315 	stw	r19,12(sp)
   40b8c:	dc800215 	stw	r18,8(sp)
   40b90:	dc400115 	stw	r17,4(sp)
   40b94:	dc000015 	stw	r16,0(sp)
   40b98:	2500b804 	addi	r20,r4,736
   40b9c:	a0002326 	beq	r20,zero,40c2c <_fwalk+0xbc>
   40ba0:	282b883a 	mov	r21,r5
   40ba4:	002f883a 	mov	r23,zero
   40ba8:	05800044 	movi	r22,1
   40bac:	04ffffc4 	movi	r19,-1
   40bb0:	a4400117 	ldw	r17,4(r20)
   40bb4:	a4800217 	ldw	r18,8(r20)
   40bb8:	8c7fffc4 	addi	r17,r17,-1
   40bbc:	88000d16 	blt	r17,zero,40bf4 <_fwalk+0x84>
   40bc0:	94000304 	addi	r16,r18,12
   40bc4:	94800384 	addi	r18,r18,14
   40bc8:	8080000b 	ldhu	r2,0(r16)
   40bcc:	8c7fffc4 	addi	r17,r17,-1
   40bd0:	813ffd04 	addi	r4,r16,-12
   40bd4:	b080042e 	bgeu	r22,r2,40be8 <_fwalk+0x78>
   40bd8:	9080000f 	ldh	r2,0(r18)
   40bdc:	14c00226 	beq	r2,r19,40be8 <_fwalk+0x78>
   40be0:	a83ee83a 	callr	r21
   40be4:	b8aeb03a 	or	r23,r23,r2
   40be8:	84001a04 	addi	r16,r16,104
   40bec:	94801a04 	addi	r18,r18,104
   40bf0:	8cfff51e 	bne	r17,r19,40bc8 <_fwalk+0x58>
   40bf4:	a5000017 	ldw	r20,0(r20)
   40bf8:	a03fed1e 	bne	r20,zero,40bb0 <_fwalk+0x40>
   40bfc:	b805883a 	mov	r2,r23
   40c00:	dfc00817 	ldw	ra,32(sp)
   40c04:	ddc00717 	ldw	r23,28(sp)
   40c08:	dd800617 	ldw	r22,24(sp)
   40c0c:	dd400517 	ldw	r21,20(sp)
   40c10:	dd000417 	ldw	r20,16(sp)
   40c14:	dcc00317 	ldw	r19,12(sp)
   40c18:	dc800217 	ldw	r18,8(sp)
   40c1c:	dc400117 	ldw	r17,4(sp)
   40c20:	dc000017 	ldw	r16,0(sp)
   40c24:	dec00904 	addi	sp,sp,36
   40c28:	f800283a 	ret
   40c2c:	002f883a 	mov	r23,zero
   40c30:	003ff206 	br	40bfc <_fwalk+0x8c>

00040c34 <_fwalk_reent>:
   40c34:	defff704 	addi	sp,sp,-36
   40c38:	dd000415 	stw	r20,16(sp)
   40c3c:	dfc00815 	stw	ra,32(sp)
   40c40:	ddc00715 	stw	r23,28(sp)
   40c44:	dd800615 	stw	r22,24(sp)
   40c48:	dd400515 	stw	r21,20(sp)
   40c4c:	dcc00315 	stw	r19,12(sp)
   40c50:	dc800215 	stw	r18,8(sp)
   40c54:	dc400115 	stw	r17,4(sp)
   40c58:	dc000015 	stw	r16,0(sp)
   40c5c:	2500b804 	addi	r20,r4,736
   40c60:	a0002326 	beq	r20,zero,40cf0 <_fwalk_reent+0xbc>
   40c64:	282b883a 	mov	r21,r5
   40c68:	2027883a 	mov	r19,r4
   40c6c:	002f883a 	mov	r23,zero
   40c70:	05800044 	movi	r22,1
   40c74:	04bfffc4 	movi	r18,-1
   40c78:	a4400117 	ldw	r17,4(r20)
   40c7c:	a4000217 	ldw	r16,8(r20)
   40c80:	8c7fffc4 	addi	r17,r17,-1
   40c84:	88000c16 	blt	r17,zero,40cb8 <_fwalk_reent+0x84>
   40c88:	84000304 	addi	r16,r16,12
   40c8c:	8080000b 	ldhu	r2,0(r16)
   40c90:	8c7fffc4 	addi	r17,r17,-1
   40c94:	817ffd04 	addi	r5,r16,-12
   40c98:	b080052e 	bgeu	r22,r2,40cb0 <_fwalk_reent+0x7c>
   40c9c:	8080008f 	ldh	r2,2(r16)
   40ca0:	9809883a 	mov	r4,r19
   40ca4:	14800226 	beq	r2,r18,40cb0 <_fwalk_reent+0x7c>
   40ca8:	a83ee83a 	callr	r21
   40cac:	b8aeb03a 	or	r23,r23,r2
   40cb0:	84001a04 	addi	r16,r16,104
   40cb4:	8cbff51e 	bne	r17,r18,40c8c <_fwalk_reent+0x58>
   40cb8:	a5000017 	ldw	r20,0(r20)
   40cbc:	a03fee1e 	bne	r20,zero,40c78 <_fwalk_reent+0x44>
   40cc0:	b805883a 	mov	r2,r23
   40cc4:	dfc00817 	ldw	ra,32(sp)
   40cc8:	ddc00717 	ldw	r23,28(sp)
   40ccc:	dd800617 	ldw	r22,24(sp)
   40cd0:	dd400517 	ldw	r21,20(sp)
   40cd4:	dd000417 	ldw	r20,16(sp)
   40cd8:	dcc00317 	ldw	r19,12(sp)
   40cdc:	dc800217 	ldw	r18,8(sp)
   40ce0:	dc400117 	ldw	r17,4(sp)
   40ce4:	dc000017 	ldw	r16,0(sp)
   40ce8:	dec00904 	addi	sp,sp,36
   40cec:	f800283a 	ret
   40cf0:	002f883a 	mov	r23,zero
   40cf4:	003ff206 	br	40cc0 <_fwalk_reent+0x8c>

00040cf8 <_malloc_r>:
   40cf8:	defff504 	addi	sp,sp,-44
   40cfc:	dc800315 	stw	r18,12(sp)
   40d00:	dfc00a15 	stw	ra,40(sp)
   40d04:	df000915 	stw	fp,36(sp)
   40d08:	ddc00815 	stw	r23,32(sp)
   40d0c:	dd800715 	stw	r22,28(sp)
   40d10:	dd400615 	stw	r21,24(sp)
   40d14:	dd000515 	stw	r20,20(sp)
   40d18:	dcc00415 	stw	r19,16(sp)
   40d1c:	dc400215 	stw	r17,8(sp)
   40d20:	dc000115 	stw	r16,4(sp)
   40d24:	288002c4 	addi	r2,r5,11
   40d28:	00c00584 	movi	r3,22
   40d2c:	2025883a 	mov	r18,r4
   40d30:	18807f2e 	bgeu	r3,r2,40f30 <_malloc_r+0x238>
   40d34:	047ffe04 	movi	r17,-8
   40d38:	1462703a 	and	r17,r2,r17
   40d3c:	8800a316 	blt	r17,zero,40fcc <_malloc_r+0x2d4>
   40d40:	8940a236 	bltu	r17,r5,40fcc <_malloc_r+0x2d4>
   40d44:	00434ec0 	call	434ec <__malloc_lock>
   40d48:	00807dc4 	movi	r2,503
   40d4c:	1441e92e 	bgeu	r2,r17,414f4 <_malloc_r+0x7fc>
   40d50:	8804d27a 	srli	r2,r17,9
   40d54:	1000a126 	beq	r2,zero,40fdc <_malloc_r+0x2e4>
   40d58:	00c00104 	movi	r3,4
   40d5c:	18811e36 	bltu	r3,r2,411d8 <_malloc_r+0x4e0>
   40d60:	8804d1ba 	srli	r2,r17,6
   40d64:	12000e44 	addi	r8,r2,57
   40d68:	11c00e04 	addi	r7,r2,56
   40d6c:	4209883a 	add	r4,r8,r8
   40d70:	04c000b4 	movhi	r19,2
   40d74:	2109883a 	add	r4,r4,r4
   40d78:	9cc11c04 	addi	r19,r19,1136
   40d7c:	2109883a 	add	r4,r4,r4
   40d80:	9909883a 	add	r4,r19,r4
   40d84:	24000117 	ldw	r16,4(r4)
   40d88:	213ffe04 	addi	r4,r4,-8
   40d8c:	24009726 	beq	r4,r16,40fec <_malloc_r+0x2f4>
   40d90:	80800117 	ldw	r2,4(r16)
   40d94:	01bfff04 	movi	r6,-4
   40d98:	014003c4 	movi	r5,15
   40d9c:	1184703a 	and	r2,r2,r6
   40da0:	1447c83a 	sub	r3,r2,r17
   40da4:	28c00716 	blt	r5,r3,40dc4 <_malloc_r+0xcc>
   40da8:	1800920e 	bge	r3,zero,40ff4 <_malloc_r+0x2fc>
   40dac:	84000317 	ldw	r16,12(r16)
   40db0:	24008e26 	beq	r4,r16,40fec <_malloc_r+0x2f4>
   40db4:	80800117 	ldw	r2,4(r16)
   40db8:	1184703a 	and	r2,r2,r6
   40dbc:	1447c83a 	sub	r3,r2,r17
   40dc0:	28fff90e 	bge	r5,r3,40da8 <_malloc_r+0xb0>
   40dc4:	3809883a 	mov	r4,r7
   40dc8:	018000b4 	movhi	r6,2
   40dcc:	9c000417 	ldw	r16,16(r19)
   40dd0:	31811c04 	addi	r6,r6,1136
   40dd4:	32000204 	addi	r8,r6,8
   40dd8:	82013426 	beq	r16,r8,412ac <_malloc_r+0x5b4>
   40ddc:	80c00117 	ldw	r3,4(r16)
   40de0:	00bfff04 	movi	r2,-4
   40de4:	188e703a 	and	r7,r3,r2
   40de8:	3c45c83a 	sub	r2,r7,r17
   40dec:	00c003c4 	movi	r3,15
   40df0:	18811f16 	blt	r3,r2,41270 <_malloc_r+0x578>
   40df4:	32000515 	stw	r8,20(r6)
   40df8:	32000415 	stw	r8,16(r6)
   40dfc:	10007f0e 	bge	r2,zero,40ffc <_malloc_r+0x304>
   40e00:	00807fc4 	movi	r2,511
   40e04:	11c0fd36 	bltu	r2,r7,411fc <_malloc_r+0x504>
   40e08:	3806d0fa 	srli	r3,r7,3
   40e0c:	01c00044 	movi	r7,1
   40e10:	30800117 	ldw	r2,4(r6)
   40e14:	19400044 	addi	r5,r3,1
   40e18:	294b883a 	add	r5,r5,r5
   40e1c:	1807d0ba 	srai	r3,r3,2
   40e20:	294b883a 	add	r5,r5,r5
   40e24:	294b883a 	add	r5,r5,r5
   40e28:	298b883a 	add	r5,r5,r6
   40e2c:	38c6983a 	sll	r3,r7,r3
   40e30:	29c00017 	ldw	r7,0(r5)
   40e34:	2a7ffe04 	addi	r9,r5,-8
   40e38:	1886b03a 	or	r3,r3,r2
   40e3c:	82400315 	stw	r9,12(r16)
   40e40:	81c00215 	stw	r7,8(r16)
   40e44:	30c00115 	stw	r3,4(r6)
   40e48:	2c000015 	stw	r16,0(r5)
   40e4c:	3c000315 	stw	r16,12(r7)
   40e50:	2005d0ba 	srai	r2,r4,2
   40e54:	01400044 	movi	r5,1
   40e58:	288a983a 	sll	r5,r5,r2
   40e5c:	19406f36 	bltu	r3,r5,4101c <_malloc_r+0x324>
   40e60:	28c4703a 	and	r2,r5,r3
   40e64:	10000a1e 	bne	r2,zero,40e90 <_malloc_r+0x198>
   40e68:	00bfff04 	movi	r2,-4
   40e6c:	294b883a 	add	r5,r5,r5
   40e70:	2088703a 	and	r4,r4,r2
   40e74:	28c4703a 	and	r2,r5,r3
   40e78:	21000104 	addi	r4,r4,4
   40e7c:	1000041e 	bne	r2,zero,40e90 <_malloc_r+0x198>
   40e80:	294b883a 	add	r5,r5,r5
   40e84:	28c4703a 	and	r2,r5,r3
   40e88:	21000104 	addi	r4,r4,4
   40e8c:	103ffc26 	beq	r2,zero,40e80 <_malloc_r+0x188>
   40e90:	02bfff04 	movi	r10,-4
   40e94:	024003c4 	movi	r9,15
   40e98:	21800044 	addi	r6,r4,1
   40e9c:	318d883a 	add	r6,r6,r6
   40ea0:	318d883a 	add	r6,r6,r6
   40ea4:	318d883a 	add	r6,r6,r6
   40ea8:	998d883a 	add	r6,r19,r6
   40eac:	333ffe04 	addi	r12,r6,-8
   40eb0:	2017883a 	mov	r11,r4
   40eb4:	31800104 	addi	r6,r6,4
   40eb8:	34000017 	ldw	r16,0(r6)
   40ebc:	31fffd04 	addi	r7,r6,-12
   40ec0:	81c0041e 	bne	r16,r7,40ed4 <_malloc_r+0x1dc>
   40ec4:	0000fb06 	br	412b4 <_malloc_r+0x5bc>
   40ec8:	1801030e 	bge	r3,zero,412d8 <_malloc_r+0x5e0>
   40ecc:	84000317 	ldw	r16,12(r16)
   40ed0:	81c0f826 	beq	r16,r7,412b4 <_malloc_r+0x5bc>
   40ed4:	80800117 	ldw	r2,4(r16)
   40ed8:	1284703a 	and	r2,r2,r10
   40edc:	1447c83a 	sub	r3,r2,r17
   40ee0:	48fff90e 	bge	r9,r3,40ec8 <_malloc_r+0x1d0>
   40ee4:	80800317 	ldw	r2,12(r16)
   40ee8:	81000217 	ldw	r4,8(r16)
   40eec:	89400054 	ori	r5,r17,1
   40ef0:	81400115 	stw	r5,4(r16)
   40ef4:	20800315 	stw	r2,12(r4)
   40ef8:	11000215 	stw	r4,8(r2)
   40efc:	8463883a 	add	r17,r16,r17
   40f00:	9c400515 	stw	r17,20(r19)
   40f04:	9c400415 	stw	r17,16(r19)
   40f08:	18800054 	ori	r2,r3,1
   40f0c:	88800115 	stw	r2,4(r17)
   40f10:	8a000315 	stw	r8,12(r17)
   40f14:	8a000215 	stw	r8,8(r17)
   40f18:	88e3883a 	add	r17,r17,r3
   40f1c:	88c00015 	stw	r3,0(r17)
   40f20:	9009883a 	mov	r4,r18
   40f24:	00435100 	call	43510 <__malloc_unlock>
   40f28:	80800204 	addi	r2,r16,8
   40f2c:	00001b06 	br	40f9c <_malloc_r+0x2a4>
   40f30:	04400404 	movi	r17,16
   40f34:	89402536 	bltu	r17,r5,40fcc <_malloc_r+0x2d4>
   40f38:	00434ec0 	call	434ec <__malloc_lock>
   40f3c:	00800184 	movi	r2,6
   40f40:	01000084 	movi	r4,2
   40f44:	04c000b4 	movhi	r19,2
   40f48:	1085883a 	add	r2,r2,r2
   40f4c:	9cc11c04 	addi	r19,r19,1136
   40f50:	1085883a 	add	r2,r2,r2
   40f54:	9885883a 	add	r2,r19,r2
   40f58:	14000117 	ldw	r16,4(r2)
   40f5c:	10fffe04 	addi	r3,r2,-8
   40f60:	80c0d926 	beq	r16,r3,412c8 <_malloc_r+0x5d0>
   40f64:	80c00117 	ldw	r3,4(r16)
   40f68:	81000317 	ldw	r4,12(r16)
   40f6c:	00bfff04 	movi	r2,-4
   40f70:	1884703a 	and	r2,r3,r2
   40f74:	81400217 	ldw	r5,8(r16)
   40f78:	8085883a 	add	r2,r16,r2
   40f7c:	10c00117 	ldw	r3,4(r2)
   40f80:	29000315 	stw	r4,12(r5)
   40f84:	21400215 	stw	r5,8(r4)
   40f88:	18c00054 	ori	r3,r3,1
   40f8c:	10c00115 	stw	r3,4(r2)
   40f90:	9009883a 	mov	r4,r18
   40f94:	00435100 	call	43510 <__malloc_unlock>
   40f98:	80800204 	addi	r2,r16,8
   40f9c:	dfc00a17 	ldw	ra,40(sp)
   40fa0:	df000917 	ldw	fp,36(sp)
   40fa4:	ddc00817 	ldw	r23,32(sp)
   40fa8:	dd800717 	ldw	r22,28(sp)
   40fac:	dd400617 	ldw	r21,24(sp)
   40fb0:	dd000517 	ldw	r20,20(sp)
   40fb4:	dcc00417 	ldw	r19,16(sp)
   40fb8:	dc800317 	ldw	r18,12(sp)
   40fbc:	dc400217 	ldw	r17,8(sp)
   40fc0:	dc000117 	ldw	r16,4(sp)
   40fc4:	dec00b04 	addi	sp,sp,44
   40fc8:	f800283a 	ret
   40fcc:	00800304 	movi	r2,12
   40fd0:	90800015 	stw	r2,0(r18)
   40fd4:	0005883a 	mov	r2,zero
   40fd8:	003ff006 	br	40f9c <_malloc_r+0x2a4>
   40fdc:	01002004 	movi	r4,128
   40fe0:	02001004 	movi	r8,64
   40fe4:	01c00fc4 	movi	r7,63
   40fe8:	003f6106 	br	40d70 <_malloc_r+0x78>
   40fec:	4009883a 	mov	r4,r8
   40ff0:	003f7506 	br	40dc8 <_malloc_r+0xd0>
   40ff4:	81000317 	ldw	r4,12(r16)
   40ff8:	003fde06 	br	40f74 <_malloc_r+0x27c>
   40ffc:	81c5883a 	add	r2,r16,r7
   41000:	11400117 	ldw	r5,4(r2)
   41004:	9009883a 	mov	r4,r18
   41008:	29400054 	ori	r5,r5,1
   4100c:	11400115 	stw	r5,4(r2)
   41010:	00435100 	call	43510 <__malloc_unlock>
   41014:	80800204 	addi	r2,r16,8
   41018:	003fe006 	br	40f9c <_malloc_r+0x2a4>
   4101c:	9c000217 	ldw	r16,8(r19)
   41020:	00bfff04 	movi	r2,-4
   41024:	85800117 	ldw	r22,4(r16)
   41028:	b0ac703a 	and	r22,r22,r2
   4102c:	b4400336 	bltu	r22,r17,4103c <_malloc_r+0x344>
   41030:	b445c83a 	sub	r2,r22,r17
   41034:	00c003c4 	movi	r3,15
   41038:	18805d16 	blt	r3,r2,411b0 <_malloc_r+0x4b8>
   4103c:	05c000b4 	movhi	r23,2
   41040:	008000b4 	movhi	r2,2
   41044:	1082a004 	addi	r2,r2,2688
   41048:	bdc29504 	addi	r23,r23,2644
   4104c:	15400017 	ldw	r21,0(r2)
   41050:	b8c00017 	ldw	r3,0(r23)
   41054:	00bfffc4 	movi	r2,-1
   41058:	858d883a 	add	r6,r16,r22
   4105c:	8d6b883a 	add	r21,r17,r21
   41060:	1880ea26 	beq	r3,r2,4140c <_malloc_r+0x714>
   41064:	ad4403c4 	addi	r21,r21,4111
   41068:	00bc0004 	movi	r2,-4096
   4106c:	a8aa703a 	and	r21,r21,r2
   41070:	a80b883a 	mov	r5,r21
   41074:	9009883a 	mov	r4,r18
   41078:	d9800015 	stw	r6,0(sp)
   4107c:	0041f180 	call	41f18 <_sbrk_r>
   41080:	1029883a 	mov	r20,r2
   41084:	00bfffc4 	movi	r2,-1
   41088:	d9800017 	ldw	r6,0(sp)
   4108c:	a080e826 	beq	r20,r2,41430 <_malloc_r+0x738>
   41090:	a180a636 	bltu	r20,r6,4132c <_malloc_r+0x634>
   41094:	070000b4 	movhi	fp,2
   41098:	e702a504 	addi	fp,fp,2708
   4109c:	e0800017 	ldw	r2,0(fp)
   410a0:	a887883a 	add	r3,r21,r2
   410a4:	e0c00015 	stw	r3,0(fp)
   410a8:	3500e626 	beq	r6,r20,41444 <_malloc_r+0x74c>
   410ac:	b9000017 	ldw	r4,0(r23)
   410b0:	00bfffc4 	movi	r2,-1
   410b4:	2080ee26 	beq	r4,r2,41470 <_malloc_r+0x778>
   410b8:	a185c83a 	sub	r2,r20,r6
   410bc:	10c5883a 	add	r2,r2,r3
   410c0:	e0800015 	stw	r2,0(fp)
   410c4:	a0c001cc 	andi	r3,r20,7
   410c8:	1800bc26 	beq	r3,zero,413bc <_malloc_r+0x6c4>
   410cc:	a0e9c83a 	sub	r20,r20,r3
   410d0:	00840204 	movi	r2,4104
   410d4:	a5000204 	addi	r20,r20,8
   410d8:	10c7c83a 	sub	r3,r2,r3
   410dc:	a545883a 	add	r2,r20,r21
   410e0:	1083ffcc 	andi	r2,r2,4095
   410e4:	18abc83a 	sub	r21,r3,r2
   410e8:	a80b883a 	mov	r5,r21
   410ec:	9009883a 	mov	r4,r18
   410f0:	0041f180 	call	41f18 <_sbrk_r>
   410f4:	00ffffc4 	movi	r3,-1
   410f8:	10c0e126 	beq	r2,r3,41480 <_malloc_r+0x788>
   410fc:	1505c83a 	sub	r2,r2,r20
   41100:	1545883a 	add	r2,r2,r21
   41104:	10800054 	ori	r2,r2,1
   41108:	e0c00017 	ldw	r3,0(fp)
   4110c:	9d000215 	stw	r20,8(r19)
   41110:	a0800115 	stw	r2,4(r20)
   41114:	a8c7883a 	add	r3,r21,r3
   41118:	e0c00015 	stw	r3,0(fp)
   4111c:	84c00e26 	beq	r16,r19,41158 <_malloc_r+0x460>
   41120:	018003c4 	movi	r6,15
   41124:	3580a72e 	bgeu	r6,r22,413c4 <_malloc_r+0x6cc>
   41128:	81400117 	ldw	r5,4(r16)
   4112c:	013ffe04 	movi	r4,-8
   41130:	b0bffd04 	addi	r2,r22,-12
   41134:	1104703a 	and	r2,r2,r4
   41138:	2900004c 	andi	r4,r5,1
   4113c:	2088b03a 	or	r4,r4,r2
   41140:	81000115 	stw	r4,4(r16)
   41144:	01400144 	movi	r5,5
   41148:	8089883a 	add	r4,r16,r2
   4114c:	21400115 	stw	r5,4(r4)
   41150:	21400215 	stw	r5,8(r4)
   41154:	3080cd36 	bltu	r6,r2,4148c <_malloc_r+0x794>
   41158:	008000b4 	movhi	r2,2
   4115c:	10829f04 	addi	r2,r2,2684
   41160:	11000017 	ldw	r4,0(r2)
   41164:	20c0012e 	bgeu	r4,r3,4116c <_malloc_r+0x474>
   41168:	10c00015 	stw	r3,0(r2)
   4116c:	008000b4 	movhi	r2,2
   41170:	10829e04 	addi	r2,r2,2680
   41174:	11000017 	ldw	r4,0(r2)
   41178:	9c000217 	ldw	r16,8(r19)
   4117c:	20c0012e 	bgeu	r4,r3,41184 <_malloc_r+0x48c>
   41180:	10c00015 	stw	r3,0(r2)
   41184:	80c00117 	ldw	r3,4(r16)
   41188:	00bfff04 	movi	r2,-4
   4118c:	1886703a 	and	r3,r3,r2
   41190:	1c45c83a 	sub	r2,r3,r17
   41194:	1c400236 	bltu	r3,r17,411a0 <_malloc_r+0x4a8>
   41198:	00c003c4 	movi	r3,15
   4119c:	18800416 	blt	r3,r2,411b0 <_malloc_r+0x4b8>
   411a0:	9009883a 	mov	r4,r18
   411a4:	00435100 	call	43510 <__malloc_unlock>
   411a8:	0005883a 	mov	r2,zero
   411ac:	003f7b06 	br	40f9c <_malloc_r+0x2a4>
   411b0:	88c00054 	ori	r3,r17,1
   411b4:	80c00115 	stw	r3,4(r16)
   411b8:	8463883a 	add	r17,r16,r17
   411bc:	10800054 	ori	r2,r2,1
   411c0:	9c400215 	stw	r17,8(r19)
   411c4:	88800115 	stw	r2,4(r17)
   411c8:	9009883a 	mov	r4,r18
   411cc:	00435100 	call	43510 <__malloc_unlock>
   411d0:	80800204 	addi	r2,r16,8
   411d4:	003f7106 	br	40f9c <_malloc_r+0x2a4>
   411d8:	00c00504 	movi	r3,20
   411dc:	18804a2e 	bgeu	r3,r2,41308 <_malloc_r+0x610>
   411e0:	00c01504 	movi	r3,84
   411e4:	18806e36 	bltu	r3,r2,413a0 <_malloc_r+0x6a8>
   411e8:	8804d33a 	srli	r2,r17,12
   411ec:	12001bc4 	addi	r8,r2,111
   411f0:	11c01b84 	addi	r7,r2,110
   411f4:	4209883a 	add	r4,r8,r8
   411f8:	003edd06 	br	40d70 <_malloc_r+0x78>
   411fc:	3804d27a 	srli	r2,r7,9
   41200:	00c00104 	movi	r3,4
   41204:	1880442e 	bgeu	r3,r2,41318 <_malloc_r+0x620>
   41208:	00c00504 	movi	r3,20
   4120c:	18808136 	bltu	r3,r2,41414 <_malloc_r+0x71c>
   41210:	11401704 	addi	r5,r2,92
   41214:	10c016c4 	addi	r3,r2,91
   41218:	294b883a 	add	r5,r5,r5
   4121c:	294b883a 	add	r5,r5,r5
   41220:	294b883a 	add	r5,r5,r5
   41224:	994b883a 	add	r5,r19,r5
   41228:	28800017 	ldw	r2,0(r5)
   4122c:	018000b4 	movhi	r6,2
   41230:	297ffe04 	addi	r5,r5,-8
   41234:	31811c04 	addi	r6,r6,1136
   41238:	28806526 	beq	r5,r2,413d0 <_malloc_r+0x6d8>
   4123c:	01bfff04 	movi	r6,-4
   41240:	10c00117 	ldw	r3,4(r2)
   41244:	1986703a 	and	r3,r3,r6
   41248:	38c0022e 	bgeu	r7,r3,41254 <_malloc_r+0x55c>
   4124c:	10800217 	ldw	r2,8(r2)
   41250:	28bffb1e 	bne	r5,r2,41240 <_malloc_r+0x548>
   41254:	11400317 	ldw	r5,12(r2)
   41258:	98c00117 	ldw	r3,4(r19)
   4125c:	81400315 	stw	r5,12(r16)
   41260:	80800215 	stw	r2,8(r16)
   41264:	2c000215 	stw	r16,8(r5)
   41268:	14000315 	stw	r16,12(r2)
   4126c:	003ef806 	br	40e50 <_malloc_r+0x158>
   41270:	88c00054 	ori	r3,r17,1
   41274:	80c00115 	stw	r3,4(r16)
   41278:	8463883a 	add	r17,r16,r17
   4127c:	34400515 	stw	r17,20(r6)
   41280:	34400415 	stw	r17,16(r6)
   41284:	10c00054 	ori	r3,r2,1
   41288:	8a000315 	stw	r8,12(r17)
   4128c:	8a000215 	stw	r8,8(r17)
   41290:	88c00115 	stw	r3,4(r17)
   41294:	88a3883a 	add	r17,r17,r2
   41298:	88800015 	stw	r2,0(r17)
   4129c:	9009883a 	mov	r4,r18
   412a0:	00435100 	call	43510 <__malloc_unlock>
   412a4:	80800204 	addi	r2,r16,8
   412a8:	003f3c06 	br	40f9c <_malloc_r+0x2a4>
   412ac:	30c00117 	ldw	r3,4(r6)
   412b0:	003ee706 	br	40e50 <_malloc_r+0x158>
   412b4:	5ac00044 	addi	r11,r11,1
   412b8:	588000cc 	andi	r2,r11,3
   412bc:	31800204 	addi	r6,r6,8
   412c0:	103efd1e 	bne	r2,zero,40eb8 <_malloc_r+0x1c0>
   412c4:	00002406 	br	41358 <_malloc_r+0x660>
   412c8:	14000317 	ldw	r16,12(r2)
   412cc:	143f251e 	bne	r2,r16,40f64 <_malloc_r+0x26c>
   412d0:	21000084 	addi	r4,r4,2
   412d4:	003ebc06 	br	40dc8 <_malloc_r+0xd0>
   412d8:	8085883a 	add	r2,r16,r2
   412dc:	10c00117 	ldw	r3,4(r2)
   412e0:	81000317 	ldw	r4,12(r16)
   412e4:	81400217 	ldw	r5,8(r16)
   412e8:	18c00054 	ori	r3,r3,1
   412ec:	10c00115 	stw	r3,4(r2)
   412f0:	29000315 	stw	r4,12(r5)
   412f4:	21400215 	stw	r5,8(r4)
   412f8:	9009883a 	mov	r4,r18
   412fc:	00435100 	call	43510 <__malloc_unlock>
   41300:	80800204 	addi	r2,r16,8
   41304:	003f2506 	br	40f9c <_malloc_r+0x2a4>
   41308:	12001704 	addi	r8,r2,92
   4130c:	11c016c4 	addi	r7,r2,91
   41310:	4209883a 	add	r4,r8,r8
   41314:	003e9606 	br	40d70 <_malloc_r+0x78>
   41318:	3804d1ba 	srli	r2,r7,6
   4131c:	11400e44 	addi	r5,r2,57
   41320:	10c00e04 	addi	r3,r2,56
   41324:	294b883a 	add	r5,r5,r5
   41328:	003fbc06 	br	4121c <_malloc_r+0x524>
   4132c:	84ff5926 	beq	r16,r19,41094 <_malloc_r+0x39c>
   41330:	008000b4 	movhi	r2,2
   41334:	10811c04 	addi	r2,r2,1136
   41338:	14000217 	ldw	r16,8(r2)
   4133c:	00bfff04 	movi	r2,-4
   41340:	80c00117 	ldw	r3,4(r16)
   41344:	1886703a 	and	r3,r3,r2
   41348:	003f9106 	br	41190 <_malloc_r+0x498>
   4134c:	60800217 	ldw	r2,8(r12)
   41350:	213fffc4 	addi	r4,r4,-1
   41354:	1300651e 	bne	r2,r12,414ec <_malloc_r+0x7f4>
   41358:	208000cc 	andi	r2,r4,3
   4135c:	633ffe04 	addi	r12,r12,-8
   41360:	103ffa1e 	bne	r2,zero,4134c <_malloc_r+0x654>
   41364:	98800117 	ldw	r2,4(r19)
   41368:	0146303a 	nor	r3,zero,r5
   4136c:	1884703a 	and	r2,r3,r2
   41370:	98800115 	stw	r2,4(r19)
   41374:	294b883a 	add	r5,r5,r5
   41378:	117f2836 	bltu	r2,r5,4101c <_malloc_r+0x324>
   4137c:	283f2726 	beq	r5,zero,4101c <_malloc_r+0x324>
   41380:	2886703a 	and	r3,r5,r2
   41384:	5809883a 	mov	r4,r11
   41388:	183ec31e 	bne	r3,zero,40e98 <_malloc_r+0x1a0>
   4138c:	294b883a 	add	r5,r5,r5
   41390:	2886703a 	and	r3,r5,r2
   41394:	21000104 	addi	r4,r4,4
   41398:	183ffc26 	beq	r3,zero,4138c <_malloc_r+0x694>
   4139c:	003ebe06 	br	40e98 <_malloc_r+0x1a0>
   413a0:	00c05504 	movi	r3,340
   413a4:	18801236 	bltu	r3,r2,413f0 <_malloc_r+0x6f8>
   413a8:	8804d3fa 	srli	r2,r17,15
   413ac:	12001e04 	addi	r8,r2,120
   413b0:	11c01dc4 	addi	r7,r2,119
   413b4:	4209883a 	add	r4,r8,r8
   413b8:	003e6d06 	br	40d70 <_malloc_r+0x78>
   413bc:	00c40004 	movi	r3,4096
   413c0:	003f4606 	br	410dc <_malloc_r+0x3e4>
   413c4:	00800044 	movi	r2,1
   413c8:	a0800115 	stw	r2,4(r20)
   413cc:	003f7406 	br	411a0 <_malloc_r+0x4a8>
   413d0:	1805d0ba 	srai	r2,r3,2
   413d4:	01c00044 	movi	r7,1
   413d8:	30c00117 	ldw	r3,4(r6)
   413dc:	388e983a 	sll	r7,r7,r2
   413e0:	2805883a 	mov	r2,r5
   413e4:	38c6b03a 	or	r3,r7,r3
   413e8:	30c00115 	stw	r3,4(r6)
   413ec:	003f9b06 	br	4125c <_malloc_r+0x564>
   413f0:	00c15504 	movi	r3,1364
   413f4:	18801a36 	bltu	r3,r2,41460 <_malloc_r+0x768>
   413f8:	8804d4ba 	srli	r2,r17,18
   413fc:	12001f44 	addi	r8,r2,125
   41400:	11c01f04 	addi	r7,r2,124
   41404:	4209883a 	add	r4,r8,r8
   41408:	003e5906 	br	40d70 <_malloc_r+0x78>
   4140c:	ad400404 	addi	r21,r21,16
   41410:	003f1706 	br	41070 <_malloc_r+0x378>
   41414:	00c01504 	movi	r3,84
   41418:	18802336 	bltu	r3,r2,414a8 <_malloc_r+0x7b0>
   4141c:	3804d33a 	srli	r2,r7,12
   41420:	11401bc4 	addi	r5,r2,111
   41424:	10c01b84 	addi	r3,r2,110
   41428:	294b883a 	add	r5,r5,r5
   4142c:	003f7b06 	br	4121c <_malloc_r+0x524>
   41430:	9c000217 	ldw	r16,8(r19)
   41434:	00bfff04 	movi	r2,-4
   41438:	80c00117 	ldw	r3,4(r16)
   4143c:	1886703a 	and	r3,r3,r2
   41440:	003f5306 	br	41190 <_malloc_r+0x498>
   41444:	3083ffcc 	andi	r2,r6,4095
   41448:	103f181e 	bne	r2,zero,410ac <_malloc_r+0x3b4>
   4144c:	99000217 	ldw	r4,8(r19)
   41450:	b545883a 	add	r2,r22,r21
   41454:	10800054 	ori	r2,r2,1
   41458:	20800115 	stw	r2,4(r4)
   4145c:	003f3e06 	br	41158 <_malloc_r+0x460>
   41460:	01003f84 	movi	r4,254
   41464:	02001fc4 	movi	r8,127
   41468:	01c01f84 	movi	r7,126
   4146c:	003e4006 	br	40d70 <_malloc_r+0x78>
   41470:	008000b4 	movhi	r2,2
   41474:	10829504 	addi	r2,r2,2644
   41478:	15000015 	stw	r20,0(r2)
   4147c:	003f1106 	br	410c4 <_malloc_r+0x3cc>
   41480:	00800044 	movi	r2,1
   41484:	002b883a 	mov	r21,zero
   41488:	003f1f06 	br	41108 <_malloc_r+0x410>
   4148c:	81400204 	addi	r5,r16,8
   41490:	9009883a 	mov	r4,r18
   41494:	00427800 	call	42780 <_free_r>
   41498:	008000b4 	movhi	r2,2
   4149c:	1082a504 	addi	r2,r2,2708
   414a0:	10c00017 	ldw	r3,0(r2)
   414a4:	003f2c06 	br	41158 <_malloc_r+0x460>
   414a8:	00c05504 	movi	r3,340
   414ac:	18800536 	bltu	r3,r2,414c4 <_malloc_r+0x7cc>
   414b0:	3804d3fa 	srli	r2,r7,15
   414b4:	11401e04 	addi	r5,r2,120
   414b8:	10c01dc4 	addi	r3,r2,119
   414bc:	294b883a 	add	r5,r5,r5
   414c0:	003f5606 	br	4121c <_malloc_r+0x524>
   414c4:	00c15504 	movi	r3,1364
   414c8:	18800536 	bltu	r3,r2,414e0 <_malloc_r+0x7e8>
   414cc:	3804d4ba 	srli	r2,r7,18
   414d0:	11401f44 	addi	r5,r2,125
   414d4:	10c01f04 	addi	r3,r2,124
   414d8:	294b883a 	add	r5,r5,r5
   414dc:	003f4f06 	br	4121c <_malloc_r+0x524>
   414e0:	01403f84 	movi	r5,254
   414e4:	00c01f84 	movi	r3,126
   414e8:	003f4c06 	br	4121c <_malloc_r+0x524>
   414ec:	98800117 	ldw	r2,4(r19)
   414f0:	003fa006 	br	41374 <_malloc_r+0x67c>
   414f4:	8808d0fa 	srli	r4,r17,3
   414f8:	20800044 	addi	r2,r4,1
   414fc:	1085883a 	add	r2,r2,r2
   41500:	003e9006 	br	40f44 <_malloc_r+0x24c>

00041504 <memchr>:
   41504:	208000cc 	andi	r2,r4,3
   41508:	280f883a 	mov	r7,r5
   4150c:	10003426 	beq	r2,zero,415e0 <memchr+0xdc>
   41510:	30bfffc4 	addi	r2,r6,-1
   41514:	30001a26 	beq	r6,zero,41580 <memchr+0x7c>
   41518:	20c00003 	ldbu	r3,0(r4)
   4151c:	29803fcc 	andi	r6,r5,255
   41520:	30c0051e 	bne	r6,r3,41538 <memchr+0x34>
   41524:	00001806 	br	41588 <memchr+0x84>
   41528:	10001526 	beq	r2,zero,41580 <memchr+0x7c>
   4152c:	20c00003 	ldbu	r3,0(r4)
   41530:	10bfffc4 	addi	r2,r2,-1
   41534:	30c01426 	beq	r6,r3,41588 <memchr+0x84>
   41538:	21000044 	addi	r4,r4,1
   4153c:	20c000cc 	andi	r3,r4,3
   41540:	183ff91e 	bne	r3,zero,41528 <memchr+0x24>
   41544:	020000c4 	movi	r8,3
   41548:	40801136 	bltu	r8,r2,41590 <memchr+0x8c>
   4154c:	10000c26 	beq	r2,zero,41580 <memchr+0x7c>
   41550:	20c00003 	ldbu	r3,0(r4)
   41554:	29403fcc 	andi	r5,r5,255
   41558:	28c00b26 	beq	r5,r3,41588 <memchr+0x84>
   4155c:	20c00044 	addi	r3,r4,1
   41560:	39803fcc 	andi	r6,r7,255
   41564:	2089883a 	add	r4,r4,r2
   41568:	00000306 	br	41578 <memchr+0x74>
   4156c:	18c00044 	addi	r3,r3,1
   41570:	197fffc3 	ldbu	r5,-1(r3)
   41574:	31400526 	beq	r6,r5,4158c <memchr+0x88>
   41578:	1805883a 	mov	r2,r3
   4157c:	20fffb1e 	bne	r4,r3,4156c <memchr+0x68>
   41580:	0005883a 	mov	r2,zero
   41584:	f800283a 	ret
   41588:	2005883a 	mov	r2,r4
   4158c:	f800283a 	ret
   41590:	28c03fcc 	andi	r3,r5,255
   41594:	1812923a 	slli	r9,r3,8
   41598:	02ffbff4 	movhi	r11,65279
   4159c:	02a02074 	movhi	r10,32897
   415a0:	48d2b03a 	or	r9,r9,r3
   415a4:	4806943a 	slli	r3,r9,16
   415a8:	5affbfc4 	addi	r11,r11,-257
   415ac:	52a02004 	addi	r10,r10,-32640
   415b0:	48d2b03a 	or	r9,r9,r3
   415b4:	20c00017 	ldw	r3,0(r4)
   415b8:	48c6f03a 	xor	r3,r9,r3
   415bc:	1acd883a 	add	r6,r3,r11
   415c0:	00c6303a 	nor	r3,zero,r3
   415c4:	30c6703a 	and	r3,r6,r3
   415c8:	1a86703a 	and	r3,r3,r10
   415cc:	183fe01e 	bne	r3,zero,41550 <memchr+0x4c>
   415d0:	10bfff04 	addi	r2,r2,-4
   415d4:	21000104 	addi	r4,r4,4
   415d8:	40bff636 	bltu	r8,r2,415b4 <memchr+0xb0>
   415dc:	003fdb06 	br	4154c <memchr+0x48>
   415e0:	3005883a 	mov	r2,r6
   415e4:	003fd706 	br	41544 <memchr+0x40>

000415e8 <memcpy>:
   415e8:	defffd04 	addi	sp,sp,-12
   415ec:	dfc00215 	stw	ra,8(sp)
   415f0:	dc400115 	stw	r17,4(sp)
   415f4:	dc000015 	stw	r16,0(sp)
   415f8:	00c003c4 	movi	r3,15
   415fc:	2005883a 	mov	r2,r4
   41600:	1980452e 	bgeu	r3,r6,41718 <memcpy+0x130>
   41604:	2906b03a 	or	r3,r5,r4
   41608:	18c000cc 	andi	r3,r3,3
   4160c:	1800441e 	bne	r3,zero,41720 <memcpy+0x138>
   41610:	347ffc04 	addi	r17,r6,-16
   41614:	8822d13a 	srli	r17,r17,4
   41618:	28c00104 	addi	r3,r5,4
   4161c:	23400104 	addi	r13,r4,4
   41620:	8820913a 	slli	r16,r17,4
   41624:	2b000204 	addi	r12,r5,8
   41628:	22c00204 	addi	r11,r4,8
   4162c:	84000504 	addi	r16,r16,20
   41630:	2a800304 	addi	r10,r5,12
   41634:	22400304 	addi	r9,r4,12
   41638:	2c21883a 	add	r16,r5,r16
   4163c:	2811883a 	mov	r8,r5
   41640:	200f883a 	mov	r7,r4
   41644:	41000017 	ldw	r4,0(r8)
   41648:	1fc00017 	ldw	ra,0(r3)
   4164c:	63c00017 	ldw	r15,0(r12)
   41650:	39000015 	stw	r4,0(r7)
   41654:	53800017 	ldw	r14,0(r10)
   41658:	6fc00015 	stw	ra,0(r13)
   4165c:	5bc00015 	stw	r15,0(r11)
   41660:	4b800015 	stw	r14,0(r9)
   41664:	18c00404 	addi	r3,r3,16
   41668:	39c00404 	addi	r7,r7,16
   4166c:	42000404 	addi	r8,r8,16
   41670:	6b400404 	addi	r13,r13,16
   41674:	63000404 	addi	r12,r12,16
   41678:	5ac00404 	addi	r11,r11,16
   4167c:	52800404 	addi	r10,r10,16
   41680:	4a400404 	addi	r9,r9,16
   41684:	1c3fef1e 	bne	r3,r16,41644 <memcpy+0x5c>
   41688:	89c00044 	addi	r7,r17,1
   4168c:	380e913a 	slli	r7,r7,4
   41690:	310003cc 	andi	r4,r6,15
   41694:	02c000c4 	movi	r11,3
   41698:	11c7883a 	add	r3,r2,r7
   4169c:	29cb883a 	add	r5,r5,r7
   416a0:	5900212e 	bgeu	r11,r4,41728 <memcpy+0x140>
   416a4:	1813883a 	mov	r9,r3
   416a8:	2811883a 	mov	r8,r5
   416ac:	200f883a 	mov	r7,r4
   416b0:	42800017 	ldw	r10,0(r8)
   416b4:	4a400104 	addi	r9,r9,4
   416b8:	39ffff04 	addi	r7,r7,-4
   416bc:	4abfff15 	stw	r10,-4(r9)
   416c0:	42000104 	addi	r8,r8,4
   416c4:	59fffa36 	bltu	r11,r7,416b0 <memcpy+0xc8>
   416c8:	213fff04 	addi	r4,r4,-4
   416cc:	2008d0ba 	srli	r4,r4,2
   416d0:	318000cc 	andi	r6,r6,3
   416d4:	21000044 	addi	r4,r4,1
   416d8:	2109883a 	add	r4,r4,r4
   416dc:	2109883a 	add	r4,r4,r4
   416e0:	1907883a 	add	r3,r3,r4
   416e4:	290b883a 	add	r5,r5,r4
   416e8:	30000626 	beq	r6,zero,41704 <memcpy+0x11c>
   416ec:	198d883a 	add	r6,r3,r6
   416f0:	29c00003 	ldbu	r7,0(r5)
   416f4:	18c00044 	addi	r3,r3,1
   416f8:	29400044 	addi	r5,r5,1
   416fc:	19ffffc5 	stb	r7,-1(r3)
   41700:	19bffb1e 	bne	r3,r6,416f0 <memcpy+0x108>
   41704:	dfc00217 	ldw	ra,8(sp)
   41708:	dc400117 	ldw	r17,4(sp)
   4170c:	dc000017 	ldw	r16,0(sp)
   41710:	dec00304 	addi	sp,sp,12
   41714:	f800283a 	ret
   41718:	2007883a 	mov	r3,r4
   4171c:	003ff206 	br	416e8 <memcpy+0x100>
   41720:	2007883a 	mov	r3,r4
   41724:	003ff106 	br	416ec <memcpy+0x104>
   41728:	200d883a 	mov	r6,r4
   4172c:	003fee06 	br	416e8 <memcpy+0x100>

00041730 <memmove>:
   41730:	2005883a 	mov	r2,r4
   41734:	29000b2e 	bgeu	r5,r4,41764 <memmove+0x34>
   41738:	298f883a 	add	r7,r5,r6
   4173c:	21c0092e 	bgeu	r4,r7,41764 <memmove+0x34>
   41740:	2187883a 	add	r3,r4,r6
   41744:	198bc83a 	sub	r5,r3,r6
   41748:	30004826 	beq	r6,zero,4186c <memmove+0x13c>
   4174c:	39ffffc4 	addi	r7,r7,-1
   41750:	39000003 	ldbu	r4,0(r7)
   41754:	18ffffc4 	addi	r3,r3,-1
   41758:	19000005 	stb	r4,0(r3)
   4175c:	28fffb1e 	bne	r5,r3,4174c <memmove+0x1c>
   41760:	f800283a 	ret
   41764:	00c003c4 	movi	r3,15
   41768:	1980412e 	bgeu	r3,r6,41870 <memmove+0x140>
   4176c:	2886b03a 	or	r3,r5,r2
   41770:	18c000cc 	andi	r3,r3,3
   41774:	1800401e 	bne	r3,zero,41878 <memmove+0x148>
   41778:	33fffc04 	addi	r15,r6,-16
   4177c:	781ed13a 	srli	r15,r15,4
   41780:	28c00104 	addi	r3,r5,4
   41784:	13400104 	addi	r13,r2,4
   41788:	781c913a 	slli	r14,r15,4
   4178c:	2b000204 	addi	r12,r5,8
   41790:	12c00204 	addi	r11,r2,8
   41794:	73800504 	addi	r14,r14,20
   41798:	2a800304 	addi	r10,r5,12
   4179c:	12400304 	addi	r9,r2,12
   417a0:	2b9d883a 	add	r14,r5,r14
   417a4:	2811883a 	mov	r8,r5
   417a8:	100f883a 	mov	r7,r2
   417ac:	41000017 	ldw	r4,0(r8)
   417b0:	39c00404 	addi	r7,r7,16
   417b4:	18c00404 	addi	r3,r3,16
   417b8:	393ffc15 	stw	r4,-16(r7)
   417bc:	193ffc17 	ldw	r4,-16(r3)
   417c0:	6b400404 	addi	r13,r13,16
   417c4:	5ac00404 	addi	r11,r11,16
   417c8:	693ffc15 	stw	r4,-16(r13)
   417cc:	61000017 	ldw	r4,0(r12)
   417d0:	4a400404 	addi	r9,r9,16
   417d4:	42000404 	addi	r8,r8,16
   417d8:	593ffc15 	stw	r4,-16(r11)
   417dc:	51000017 	ldw	r4,0(r10)
   417e0:	63000404 	addi	r12,r12,16
   417e4:	52800404 	addi	r10,r10,16
   417e8:	493ffc15 	stw	r4,-16(r9)
   417ec:	1bbfef1e 	bne	r3,r14,417ac <memmove+0x7c>
   417f0:	79000044 	addi	r4,r15,1
   417f4:	2008913a 	slli	r4,r4,4
   417f8:	328003cc 	andi	r10,r6,15
   417fc:	02c000c4 	movi	r11,3
   41800:	1107883a 	add	r3,r2,r4
   41804:	290b883a 	add	r5,r5,r4
   41808:	5a801e2e 	bgeu	r11,r10,41884 <memmove+0x154>
   4180c:	1813883a 	mov	r9,r3
   41810:	2811883a 	mov	r8,r5
   41814:	500f883a 	mov	r7,r10
   41818:	41000017 	ldw	r4,0(r8)
   4181c:	4a400104 	addi	r9,r9,4
   41820:	39ffff04 	addi	r7,r7,-4
   41824:	493fff15 	stw	r4,-4(r9)
   41828:	42000104 	addi	r8,r8,4
   4182c:	59fffa36 	bltu	r11,r7,41818 <memmove+0xe8>
   41830:	513fff04 	addi	r4,r10,-4
   41834:	2008d0ba 	srli	r4,r4,2
   41838:	318000cc 	andi	r6,r6,3
   4183c:	21000044 	addi	r4,r4,1
   41840:	2109883a 	add	r4,r4,r4
   41844:	2109883a 	add	r4,r4,r4
   41848:	1907883a 	add	r3,r3,r4
   4184c:	290b883a 	add	r5,r5,r4
   41850:	30000b26 	beq	r6,zero,41880 <memmove+0x150>
   41854:	198d883a 	add	r6,r3,r6
   41858:	29c00003 	ldbu	r7,0(r5)
   4185c:	18c00044 	addi	r3,r3,1
   41860:	29400044 	addi	r5,r5,1
   41864:	19ffffc5 	stb	r7,-1(r3)
   41868:	19bffb1e 	bne	r3,r6,41858 <memmove+0x128>
   4186c:	f800283a 	ret
   41870:	1007883a 	mov	r3,r2
   41874:	003ff606 	br	41850 <memmove+0x120>
   41878:	1007883a 	mov	r3,r2
   4187c:	003ff506 	br	41854 <memmove+0x124>
   41880:	f800283a 	ret
   41884:	500d883a 	mov	r6,r10
   41888:	003ff106 	br	41850 <memmove+0x120>

0004188c <memset>:
   4188c:	20c000cc 	andi	r3,r4,3
   41890:	2005883a 	mov	r2,r4
   41894:	18004426 	beq	r3,zero,419a8 <memset+0x11c>
   41898:	31ffffc4 	addi	r7,r6,-1
   4189c:	30004026 	beq	r6,zero,419a0 <memset+0x114>
   418a0:	2813883a 	mov	r9,r5
   418a4:	200d883a 	mov	r6,r4
   418a8:	2007883a 	mov	r3,r4
   418ac:	00000406 	br	418c0 <memset+0x34>
   418b0:	3a3fffc4 	addi	r8,r7,-1
   418b4:	31800044 	addi	r6,r6,1
   418b8:	38003926 	beq	r7,zero,419a0 <memset+0x114>
   418bc:	400f883a 	mov	r7,r8
   418c0:	18c00044 	addi	r3,r3,1
   418c4:	32400005 	stb	r9,0(r6)
   418c8:	1a0000cc 	andi	r8,r3,3
   418cc:	403ff81e 	bne	r8,zero,418b0 <memset+0x24>
   418d0:	010000c4 	movi	r4,3
   418d4:	21c02d2e 	bgeu	r4,r7,4198c <memset+0x100>
   418d8:	29003fcc 	andi	r4,r5,255
   418dc:	200c923a 	slli	r6,r4,8
   418e0:	3108b03a 	or	r4,r6,r4
   418e4:	200c943a 	slli	r6,r4,16
   418e8:	218cb03a 	or	r6,r4,r6
   418ec:	010003c4 	movi	r4,15
   418f0:	21c0182e 	bgeu	r4,r7,41954 <memset+0xc8>
   418f4:	3b3ffc04 	addi	r12,r7,-16
   418f8:	6018d13a 	srli	r12,r12,4
   418fc:	1a000104 	addi	r8,r3,4
   41900:	1ac00204 	addi	r11,r3,8
   41904:	6008913a 	slli	r4,r12,4
   41908:	1a800304 	addi	r10,r3,12
   4190c:	1813883a 	mov	r9,r3
   41910:	21000504 	addi	r4,r4,20
   41914:	1909883a 	add	r4,r3,r4
   41918:	49800015 	stw	r6,0(r9)
   4191c:	41800015 	stw	r6,0(r8)
   41920:	59800015 	stw	r6,0(r11)
   41924:	51800015 	stw	r6,0(r10)
   41928:	42000404 	addi	r8,r8,16
   4192c:	4a400404 	addi	r9,r9,16
   41930:	5ac00404 	addi	r11,r11,16
   41934:	52800404 	addi	r10,r10,16
   41938:	413ff71e 	bne	r8,r4,41918 <memset+0x8c>
   4193c:	63000044 	addi	r12,r12,1
   41940:	6018913a 	slli	r12,r12,4
   41944:	39c003cc 	andi	r7,r7,15
   41948:	010000c4 	movi	r4,3
   4194c:	1b07883a 	add	r3,r3,r12
   41950:	21c00e2e 	bgeu	r4,r7,4198c <memset+0x100>
   41954:	1813883a 	mov	r9,r3
   41958:	3811883a 	mov	r8,r7
   4195c:	010000c4 	movi	r4,3
   41960:	49800015 	stw	r6,0(r9)
   41964:	423fff04 	addi	r8,r8,-4
   41968:	4a400104 	addi	r9,r9,4
   4196c:	223ffc36 	bltu	r4,r8,41960 <memset+0xd4>
   41970:	393fff04 	addi	r4,r7,-4
   41974:	2008d0ba 	srli	r4,r4,2
   41978:	39c000cc 	andi	r7,r7,3
   4197c:	21000044 	addi	r4,r4,1
   41980:	2109883a 	add	r4,r4,r4
   41984:	2109883a 	add	r4,r4,r4
   41988:	1907883a 	add	r3,r3,r4
   4198c:	38000526 	beq	r7,zero,419a4 <memset+0x118>
   41990:	19cf883a 	add	r7,r3,r7
   41994:	19400005 	stb	r5,0(r3)
   41998:	18c00044 	addi	r3,r3,1
   4199c:	38fffd1e 	bne	r7,r3,41994 <memset+0x108>
   419a0:	f800283a 	ret
   419a4:	f800283a 	ret
   419a8:	2007883a 	mov	r3,r4
   419ac:	300f883a 	mov	r7,r6
   419b0:	003fc706 	br	418d0 <memset+0x44>

000419b4 <_realloc_r>:
   419b4:	defff604 	addi	sp,sp,-40
   419b8:	dc800215 	stw	r18,8(sp)
   419bc:	dfc00915 	stw	ra,36(sp)
   419c0:	df000815 	stw	fp,32(sp)
   419c4:	ddc00715 	stw	r23,28(sp)
   419c8:	dd800615 	stw	r22,24(sp)
   419cc:	dd400515 	stw	r21,20(sp)
   419d0:	dd000415 	stw	r20,16(sp)
   419d4:	dcc00315 	stw	r19,12(sp)
   419d8:	dc400115 	stw	r17,4(sp)
   419dc:	dc000015 	stw	r16,0(sp)
   419e0:	3025883a 	mov	r18,r6
   419e4:	2800b726 	beq	r5,zero,41cc4 <_realloc_r+0x310>
   419e8:	282b883a 	mov	r21,r5
   419ec:	2029883a 	mov	r20,r4
   419f0:	00434ec0 	call	434ec <__malloc_lock>
   419f4:	a8bfff17 	ldw	r2,-4(r21)
   419f8:	043fff04 	movi	r16,-4
   419fc:	90c002c4 	addi	r3,r18,11
   41a00:	01000584 	movi	r4,22
   41a04:	acfffe04 	addi	r19,r21,-8
   41a08:	1420703a 	and	r16,r2,r16
   41a0c:	20c0332e 	bgeu	r4,r3,41adc <_realloc_r+0x128>
   41a10:	047ffe04 	movi	r17,-8
   41a14:	1c62703a 	and	r17,r3,r17
   41a18:	8807883a 	mov	r3,r17
   41a1c:	88005816 	blt	r17,zero,41b80 <_realloc_r+0x1cc>
   41a20:	8c805736 	bltu	r17,r18,41b80 <_realloc_r+0x1cc>
   41a24:	80c0300e 	bge	r16,r3,41ae8 <_realloc_r+0x134>
   41a28:	070000b4 	movhi	fp,2
   41a2c:	e7011c04 	addi	fp,fp,1136
   41a30:	e1c00217 	ldw	r7,8(fp)
   41a34:	9c09883a 	add	r4,r19,r16
   41a38:	22000117 	ldw	r8,4(r4)
   41a3c:	21c06326 	beq	r4,r7,41bcc <_realloc_r+0x218>
   41a40:	017fff84 	movi	r5,-2
   41a44:	414a703a 	and	r5,r8,r5
   41a48:	214b883a 	add	r5,r4,r5
   41a4c:	29800117 	ldw	r6,4(r5)
   41a50:	3180004c 	andi	r6,r6,1
   41a54:	30003f26 	beq	r6,zero,41b54 <_realloc_r+0x1a0>
   41a58:	1080004c 	andi	r2,r2,1
   41a5c:	10008326 	beq	r2,zero,41c6c <_realloc_r+0x2b8>
   41a60:	900b883a 	mov	r5,r18
   41a64:	a009883a 	mov	r4,r20
   41a68:	0040cf80 	call	40cf8 <_malloc_r>
   41a6c:	1025883a 	mov	r18,r2
   41a70:	10011e26 	beq	r2,zero,41eec <_realloc_r+0x538>
   41a74:	a93fff17 	ldw	r4,-4(r21)
   41a78:	10fffe04 	addi	r3,r2,-8
   41a7c:	00bfff84 	movi	r2,-2
   41a80:	2084703a 	and	r2,r4,r2
   41a84:	9885883a 	add	r2,r19,r2
   41a88:	1880ee26 	beq	r3,r2,41e44 <_realloc_r+0x490>
   41a8c:	81bfff04 	addi	r6,r16,-4
   41a90:	00800904 	movi	r2,36
   41a94:	1180b836 	bltu	r2,r6,41d78 <_realloc_r+0x3c4>
   41a98:	00c004c4 	movi	r3,19
   41a9c:	19809636 	bltu	r3,r6,41cf8 <_realloc_r+0x344>
   41aa0:	9005883a 	mov	r2,r18
   41aa4:	a807883a 	mov	r3,r21
   41aa8:	19000017 	ldw	r4,0(r3)
   41aac:	11000015 	stw	r4,0(r2)
   41ab0:	19000117 	ldw	r4,4(r3)
   41ab4:	11000115 	stw	r4,4(r2)
   41ab8:	18c00217 	ldw	r3,8(r3)
   41abc:	10c00215 	stw	r3,8(r2)
   41ac0:	a80b883a 	mov	r5,r21
   41ac4:	a009883a 	mov	r4,r20
   41ac8:	00427800 	call	42780 <_free_r>
   41acc:	a009883a 	mov	r4,r20
   41ad0:	00435100 	call	43510 <__malloc_unlock>
   41ad4:	9005883a 	mov	r2,r18
   41ad8:	00001206 	br	41b24 <_realloc_r+0x170>
   41adc:	00c00404 	movi	r3,16
   41ae0:	1823883a 	mov	r17,r3
   41ae4:	003fce06 	br	41a20 <_realloc_r+0x6c>
   41ae8:	a825883a 	mov	r18,r21
   41aec:	8445c83a 	sub	r2,r16,r17
   41af0:	00c003c4 	movi	r3,15
   41af4:	18802636 	bltu	r3,r2,41b90 <_realloc_r+0x1dc>
   41af8:	99800117 	ldw	r6,4(r19)
   41afc:	9c07883a 	add	r3,r19,r16
   41b00:	3180004c 	andi	r6,r6,1
   41b04:	3420b03a 	or	r16,r6,r16
   41b08:	9c000115 	stw	r16,4(r19)
   41b0c:	18800117 	ldw	r2,4(r3)
   41b10:	10800054 	ori	r2,r2,1
   41b14:	18800115 	stw	r2,4(r3)
   41b18:	a009883a 	mov	r4,r20
   41b1c:	00435100 	call	43510 <__malloc_unlock>
   41b20:	9005883a 	mov	r2,r18
   41b24:	dfc00917 	ldw	ra,36(sp)
   41b28:	df000817 	ldw	fp,32(sp)
   41b2c:	ddc00717 	ldw	r23,28(sp)
   41b30:	dd800617 	ldw	r22,24(sp)
   41b34:	dd400517 	ldw	r21,20(sp)
   41b38:	dd000417 	ldw	r20,16(sp)
   41b3c:	dcc00317 	ldw	r19,12(sp)
   41b40:	dc800217 	ldw	r18,8(sp)
   41b44:	dc400117 	ldw	r17,4(sp)
   41b48:	dc000017 	ldw	r16,0(sp)
   41b4c:	dec00a04 	addi	sp,sp,40
   41b50:	f800283a 	ret
   41b54:	017fff04 	movi	r5,-4
   41b58:	414a703a 	and	r5,r8,r5
   41b5c:	814d883a 	add	r6,r16,r5
   41b60:	30c01f16 	blt	r6,r3,41be0 <_realloc_r+0x22c>
   41b64:	20800317 	ldw	r2,12(r4)
   41b68:	20c00217 	ldw	r3,8(r4)
   41b6c:	a825883a 	mov	r18,r21
   41b70:	3021883a 	mov	r16,r6
   41b74:	18800315 	stw	r2,12(r3)
   41b78:	10c00215 	stw	r3,8(r2)
   41b7c:	003fdb06 	br	41aec <_realloc_r+0x138>
   41b80:	00800304 	movi	r2,12
   41b84:	a0800015 	stw	r2,0(r20)
   41b88:	0005883a 	mov	r2,zero
   41b8c:	003fe506 	br	41b24 <_realloc_r+0x170>
   41b90:	98c00117 	ldw	r3,4(r19)
   41b94:	9c4b883a 	add	r5,r19,r17
   41b98:	11000054 	ori	r4,r2,1
   41b9c:	18c0004c 	andi	r3,r3,1
   41ba0:	1c62b03a 	or	r17,r3,r17
   41ba4:	9c400115 	stw	r17,4(r19)
   41ba8:	29000115 	stw	r4,4(r5)
   41bac:	2885883a 	add	r2,r5,r2
   41bb0:	10c00117 	ldw	r3,4(r2)
   41bb4:	29400204 	addi	r5,r5,8
   41bb8:	a009883a 	mov	r4,r20
   41bbc:	18c00054 	ori	r3,r3,1
   41bc0:	10c00115 	stw	r3,4(r2)
   41bc4:	00427800 	call	42780 <_free_r>
   41bc8:	003fd306 	br	41b18 <_realloc_r+0x164>
   41bcc:	017fff04 	movi	r5,-4
   41bd0:	414a703a 	and	r5,r8,r5
   41bd4:	89800404 	addi	r6,r17,16
   41bd8:	8151883a 	add	r8,r16,r5
   41bdc:	4180590e 	bge	r8,r6,41d44 <_realloc_r+0x390>
   41be0:	1080004c 	andi	r2,r2,1
   41be4:	103f9e1e 	bne	r2,zero,41a60 <_realloc_r+0xac>
   41be8:	adbffe17 	ldw	r22,-8(r21)
   41bec:	00bfff04 	movi	r2,-4
   41bf0:	9dadc83a 	sub	r22,r19,r22
   41bf4:	b1800117 	ldw	r6,4(r22)
   41bf8:	3084703a 	and	r2,r6,r2
   41bfc:	20002026 	beq	r4,zero,41c80 <_realloc_r+0x2cc>
   41c00:	80af883a 	add	r23,r16,r2
   41c04:	b96f883a 	add	r23,r23,r5
   41c08:	21c05f26 	beq	r4,r7,41d88 <_realloc_r+0x3d4>
   41c0c:	b8c01c16 	blt	r23,r3,41c80 <_realloc_r+0x2cc>
   41c10:	20800317 	ldw	r2,12(r4)
   41c14:	20c00217 	ldw	r3,8(r4)
   41c18:	81bfff04 	addi	r6,r16,-4
   41c1c:	01000904 	movi	r4,36
   41c20:	18800315 	stw	r2,12(r3)
   41c24:	10c00215 	stw	r3,8(r2)
   41c28:	b0c00217 	ldw	r3,8(r22)
   41c2c:	b0800317 	ldw	r2,12(r22)
   41c30:	b4800204 	addi	r18,r22,8
   41c34:	18800315 	stw	r2,12(r3)
   41c38:	10c00215 	stw	r3,8(r2)
   41c3c:	21801b36 	bltu	r4,r6,41cac <_realloc_r+0x2f8>
   41c40:	008004c4 	movi	r2,19
   41c44:	1180352e 	bgeu	r2,r6,41d1c <_realloc_r+0x368>
   41c48:	a8800017 	ldw	r2,0(r21)
   41c4c:	b0800215 	stw	r2,8(r22)
   41c50:	a8800117 	ldw	r2,4(r21)
   41c54:	b0800315 	stw	r2,12(r22)
   41c58:	008006c4 	movi	r2,27
   41c5c:	11807f36 	bltu	r2,r6,41e5c <_realloc_r+0x4a8>
   41c60:	b0800404 	addi	r2,r22,16
   41c64:	ad400204 	addi	r21,r21,8
   41c68:	00002d06 	br	41d20 <_realloc_r+0x36c>
   41c6c:	adbffe17 	ldw	r22,-8(r21)
   41c70:	00bfff04 	movi	r2,-4
   41c74:	9dadc83a 	sub	r22,r19,r22
   41c78:	b1000117 	ldw	r4,4(r22)
   41c7c:	2084703a 	and	r2,r4,r2
   41c80:	b03f7726 	beq	r22,zero,41a60 <_realloc_r+0xac>
   41c84:	80af883a 	add	r23,r16,r2
   41c88:	b8ff7516 	blt	r23,r3,41a60 <_realloc_r+0xac>
   41c8c:	b0800317 	ldw	r2,12(r22)
   41c90:	b0c00217 	ldw	r3,8(r22)
   41c94:	81bfff04 	addi	r6,r16,-4
   41c98:	01000904 	movi	r4,36
   41c9c:	18800315 	stw	r2,12(r3)
   41ca0:	10c00215 	stw	r3,8(r2)
   41ca4:	b4800204 	addi	r18,r22,8
   41ca8:	21bfe52e 	bgeu	r4,r6,41c40 <_realloc_r+0x28c>
   41cac:	a80b883a 	mov	r5,r21
   41cb0:	9009883a 	mov	r4,r18
   41cb4:	00417300 	call	41730 <memmove>
   41cb8:	b821883a 	mov	r16,r23
   41cbc:	b027883a 	mov	r19,r22
   41cc0:	003f8a06 	br	41aec <_realloc_r+0x138>
   41cc4:	300b883a 	mov	r5,r6
   41cc8:	dfc00917 	ldw	ra,36(sp)
   41ccc:	df000817 	ldw	fp,32(sp)
   41cd0:	ddc00717 	ldw	r23,28(sp)
   41cd4:	dd800617 	ldw	r22,24(sp)
   41cd8:	dd400517 	ldw	r21,20(sp)
   41cdc:	dd000417 	ldw	r20,16(sp)
   41ce0:	dcc00317 	ldw	r19,12(sp)
   41ce4:	dc800217 	ldw	r18,8(sp)
   41ce8:	dc400117 	ldw	r17,4(sp)
   41cec:	dc000017 	ldw	r16,0(sp)
   41cf0:	dec00a04 	addi	sp,sp,40
   41cf4:	0040cf81 	jmpi	40cf8 <_malloc_r>
   41cf8:	a8c00017 	ldw	r3,0(r21)
   41cfc:	90c00015 	stw	r3,0(r18)
   41d00:	a8c00117 	ldw	r3,4(r21)
   41d04:	90c00115 	stw	r3,4(r18)
   41d08:	00c006c4 	movi	r3,27
   41d0c:	19804536 	bltu	r3,r6,41e24 <_realloc_r+0x470>
   41d10:	90800204 	addi	r2,r18,8
   41d14:	a8c00204 	addi	r3,r21,8
   41d18:	003f6306 	br	41aa8 <_realloc_r+0xf4>
   41d1c:	9005883a 	mov	r2,r18
   41d20:	a8c00017 	ldw	r3,0(r21)
   41d24:	b821883a 	mov	r16,r23
   41d28:	b027883a 	mov	r19,r22
   41d2c:	10c00015 	stw	r3,0(r2)
   41d30:	a8c00117 	ldw	r3,4(r21)
   41d34:	10c00115 	stw	r3,4(r2)
   41d38:	a8c00217 	ldw	r3,8(r21)
   41d3c:	10c00215 	stw	r3,8(r2)
   41d40:	003f6a06 	br	41aec <_realloc_r+0x138>
   41d44:	9c67883a 	add	r19,r19,r17
   41d48:	4445c83a 	sub	r2,r8,r17
   41d4c:	e4c00215 	stw	r19,8(fp)
   41d50:	10800054 	ori	r2,r2,1
   41d54:	98800115 	stw	r2,4(r19)
   41d58:	a8bfff17 	ldw	r2,-4(r21)
   41d5c:	a009883a 	mov	r4,r20
   41d60:	1080004c 	andi	r2,r2,1
   41d64:	1462b03a 	or	r17,r2,r17
   41d68:	ac7fff15 	stw	r17,-4(r21)
   41d6c:	00435100 	call	43510 <__malloc_unlock>
   41d70:	a805883a 	mov	r2,r21
   41d74:	003f6b06 	br	41b24 <_realloc_r+0x170>
   41d78:	a80b883a 	mov	r5,r21
   41d7c:	9009883a 	mov	r4,r18
   41d80:	00417300 	call	41730 <memmove>
   41d84:	003f4e06 	br	41ac0 <_realloc_r+0x10c>
   41d88:	89000404 	addi	r4,r17,16
   41d8c:	b93fbc16 	blt	r23,r4,41c80 <_realloc_r+0x2cc>
   41d90:	b0800317 	ldw	r2,12(r22)
   41d94:	b0c00217 	ldw	r3,8(r22)
   41d98:	81bfff04 	addi	r6,r16,-4
   41d9c:	01000904 	movi	r4,36
   41da0:	18800315 	stw	r2,12(r3)
   41da4:	10c00215 	stw	r3,8(r2)
   41da8:	b4800204 	addi	r18,r22,8
   41dac:	21804336 	bltu	r4,r6,41ebc <_realloc_r+0x508>
   41db0:	008004c4 	movi	r2,19
   41db4:	11803f2e 	bgeu	r2,r6,41eb4 <_realloc_r+0x500>
   41db8:	a8800017 	ldw	r2,0(r21)
   41dbc:	b0800215 	stw	r2,8(r22)
   41dc0:	a8800117 	ldw	r2,4(r21)
   41dc4:	b0800315 	stw	r2,12(r22)
   41dc8:	008006c4 	movi	r2,27
   41dcc:	11803f36 	bltu	r2,r6,41ecc <_realloc_r+0x518>
   41dd0:	b0800404 	addi	r2,r22,16
   41dd4:	ad400204 	addi	r21,r21,8
   41dd8:	a8c00017 	ldw	r3,0(r21)
   41ddc:	10c00015 	stw	r3,0(r2)
   41de0:	a8c00117 	ldw	r3,4(r21)
   41de4:	10c00115 	stw	r3,4(r2)
   41de8:	a8c00217 	ldw	r3,8(r21)
   41dec:	10c00215 	stw	r3,8(r2)
   41df0:	b447883a 	add	r3,r22,r17
   41df4:	bc45c83a 	sub	r2,r23,r17
   41df8:	e0c00215 	stw	r3,8(fp)
   41dfc:	10800054 	ori	r2,r2,1
   41e00:	18800115 	stw	r2,4(r3)
   41e04:	b0800117 	ldw	r2,4(r22)
   41e08:	a009883a 	mov	r4,r20
   41e0c:	1080004c 	andi	r2,r2,1
   41e10:	1462b03a 	or	r17,r2,r17
   41e14:	b4400115 	stw	r17,4(r22)
   41e18:	00435100 	call	43510 <__malloc_unlock>
   41e1c:	9005883a 	mov	r2,r18
   41e20:	003f4006 	br	41b24 <_realloc_r+0x170>
   41e24:	a8c00217 	ldw	r3,8(r21)
   41e28:	90c00215 	stw	r3,8(r18)
   41e2c:	a8c00317 	ldw	r3,12(r21)
   41e30:	90c00315 	stw	r3,12(r18)
   41e34:	30801126 	beq	r6,r2,41e7c <_realloc_r+0x4c8>
   41e38:	90800404 	addi	r2,r18,16
   41e3c:	a8c00404 	addi	r3,r21,16
   41e40:	003f1906 	br	41aa8 <_realloc_r+0xf4>
   41e44:	90ffff17 	ldw	r3,-4(r18)
   41e48:	00bfff04 	movi	r2,-4
   41e4c:	a825883a 	mov	r18,r21
   41e50:	1884703a 	and	r2,r3,r2
   41e54:	80a1883a 	add	r16,r16,r2
   41e58:	003f2406 	br	41aec <_realloc_r+0x138>
   41e5c:	a8800217 	ldw	r2,8(r21)
   41e60:	b0800415 	stw	r2,16(r22)
   41e64:	a8800317 	ldw	r2,12(r21)
   41e68:	b0800515 	stw	r2,20(r22)
   41e6c:	31000a26 	beq	r6,r4,41e98 <_realloc_r+0x4e4>
   41e70:	b0800604 	addi	r2,r22,24
   41e74:	ad400404 	addi	r21,r21,16
   41e78:	003fa906 	br	41d20 <_realloc_r+0x36c>
   41e7c:	a9000417 	ldw	r4,16(r21)
   41e80:	90800604 	addi	r2,r18,24
   41e84:	a8c00604 	addi	r3,r21,24
   41e88:	91000415 	stw	r4,16(r18)
   41e8c:	a9000517 	ldw	r4,20(r21)
   41e90:	91000515 	stw	r4,20(r18)
   41e94:	003f0406 	br	41aa8 <_realloc_r+0xf4>
   41e98:	a8c00417 	ldw	r3,16(r21)
   41e9c:	ad400604 	addi	r21,r21,24
   41ea0:	b0800804 	addi	r2,r22,32
   41ea4:	b0c00615 	stw	r3,24(r22)
   41ea8:	a8ffff17 	ldw	r3,-4(r21)
   41eac:	b0c00715 	stw	r3,28(r22)
   41eb0:	003f9b06 	br	41d20 <_realloc_r+0x36c>
   41eb4:	9005883a 	mov	r2,r18
   41eb8:	003fc706 	br	41dd8 <_realloc_r+0x424>
   41ebc:	a80b883a 	mov	r5,r21
   41ec0:	9009883a 	mov	r4,r18
   41ec4:	00417300 	call	41730 <memmove>
   41ec8:	003fc906 	br	41df0 <_realloc_r+0x43c>
   41ecc:	a8800217 	ldw	r2,8(r21)
   41ed0:	b0800415 	stw	r2,16(r22)
   41ed4:	a8800317 	ldw	r2,12(r21)
   41ed8:	b0800515 	stw	r2,20(r22)
   41edc:	31000726 	beq	r6,r4,41efc <_realloc_r+0x548>
   41ee0:	b0800604 	addi	r2,r22,24
   41ee4:	ad400404 	addi	r21,r21,16
   41ee8:	003fbb06 	br	41dd8 <_realloc_r+0x424>
   41eec:	a009883a 	mov	r4,r20
   41ef0:	00435100 	call	43510 <__malloc_unlock>
   41ef4:	0005883a 	mov	r2,zero
   41ef8:	003f0a06 	br	41b24 <_realloc_r+0x170>
   41efc:	a8c00417 	ldw	r3,16(r21)
   41f00:	ad400604 	addi	r21,r21,24
   41f04:	b0800804 	addi	r2,r22,32
   41f08:	b0c00615 	stw	r3,24(r22)
   41f0c:	a8ffff17 	ldw	r3,-4(r21)
   41f10:	b0c00715 	stw	r3,28(r22)
   41f14:	003fb006 	br	41dd8 <_realloc_r+0x424>

00041f18 <_sbrk_r>:
   41f18:	defffd04 	addi	sp,sp,-12
   41f1c:	dc000015 	stw	r16,0(sp)
   41f20:	040000b4 	movhi	r16,2
   41f24:	dc400115 	stw	r17,4(sp)
   41f28:	8402a104 	addi	r16,r16,2692
   41f2c:	2023883a 	mov	r17,r4
   41f30:	2809883a 	mov	r4,r5
   41f34:	dfc00215 	stw	ra,8(sp)
   41f38:	80000015 	stw	zero,0(r16)
   41f3c:	00436d00 	call	436d0 <sbrk>
   41f40:	00ffffc4 	movi	r3,-1
   41f44:	10c00526 	beq	r2,r3,41f5c <_sbrk_r+0x44>
   41f48:	dfc00217 	ldw	ra,8(sp)
   41f4c:	dc400117 	ldw	r17,4(sp)
   41f50:	dc000017 	ldw	r16,0(sp)
   41f54:	dec00304 	addi	sp,sp,12
   41f58:	f800283a 	ret
   41f5c:	80c00017 	ldw	r3,0(r16)
   41f60:	183ff926 	beq	r3,zero,41f48 <_sbrk_r+0x30>
   41f64:	88c00015 	stw	r3,0(r17)
   41f68:	003ff706 	br	41f48 <_sbrk_r+0x30>

00041f6c <__sread>:
   41f6c:	defffe04 	addi	sp,sp,-8
   41f70:	dc000015 	stw	r16,0(sp)
   41f74:	2821883a 	mov	r16,r5
   41f78:	2940038f 	ldh	r5,14(r5)
   41f7c:	dfc00115 	stw	ra,4(sp)
   41f80:	0042cac0 	call	42cac <_read_r>
   41f84:	10000716 	blt	r2,zero,41fa4 <__sread+0x38>
   41f88:	80c01417 	ldw	r3,80(r16)
   41f8c:	1887883a 	add	r3,r3,r2
   41f90:	80c01415 	stw	r3,80(r16)
   41f94:	dfc00117 	ldw	ra,4(sp)
   41f98:	dc000017 	ldw	r16,0(sp)
   41f9c:	dec00204 	addi	sp,sp,8
   41fa0:	f800283a 	ret
   41fa4:	80c0030b 	ldhu	r3,12(r16)
   41fa8:	18fbffcc 	andi	r3,r3,61439
   41fac:	80c0030d 	sth	r3,12(r16)
   41fb0:	dfc00117 	ldw	ra,4(sp)
   41fb4:	dc000017 	ldw	r16,0(sp)
   41fb8:	dec00204 	addi	sp,sp,8
   41fbc:	f800283a 	ret

00041fc0 <__seofread>:
   41fc0:	0005883a 	mov	r2,zero
   41fc4:	f800283a 	ret

00041fc8 <__swrite>:
   41fc8:	2880030b 	ldhu	r2,12(r5)
   41fcc:	defffb04 	addi	sp,sp,-20
   41fd0:	dcc00315 	stw	r19,12(sp)
   41fd4:	dc800215 	stw	r18,8(sp)
   41fd8:	dc400115 	stw	r17,4(sp)
   41fdc:	dc000015 	stw	r16,0(sp)
   41fe0:	dfc00415 	stw	ra,16(sp)
   41fe4:	10c0400c 	andi	r3,r2,256
   41fe8:	2821883a 	mov	r16,r5
   41fec:	2023883a 	mov	r17,r4
   41ff0:	3025883a 	mov	r18,r6
   41ff4:	3827883a 	mov	r19,r7
   41ff8:	18000526 	beq	r3,zero,42010 <__swrite+0x48>
   41ffc:	2940038f 	ldh	r5,14(r5)
   42000:	01c00084 	movi	r7,2
   42004:	000d883a 	mov	r6,zero
   42008:	0042a900 	call	42a90 <_lseek_r>
   4200c:	8080030b 	ldhu	r2,12(r16)
   42010:	8140038f 	ldh	r5,14(r16)
   42014:	10bbffcc 	andi	r2,r2,61439
   42018:	980f883a 	mov	r7,r19
   4201c:	900d883a 	mov	r6,r18
   42020:	8809883a 	mov	r4,r17
   42024:	8080030d 	sth	r2,12(r16)
   42028:	dfc00417 	ldw	ra,16(sp)
   4202c:	dcc00317 	ldw	r19,12(sp)
   42030:	dc800217 	ldw	r18,8(sp)
   42034:	dc400117 	ldw	r17,4(sp)
   42038:	dc000017 	ldw	r16,0(sp)
   4203c:	dec00504 	addi	sp,sp,20
   42040:	00420a81 	jmpi	420a8 <_write_r>

00042044 <__sseek>:
   42044:	defffe04 	addi	sp,sp,-8
   42048:	dc000015 	stw	r16,0(sp)
   4204c:	2821883a 	mov	r16,r5
   42050:	2940038f 	ldh	r5,14(r5)
   42054:	dfc00115 	stw	ra,4(sp)
   42058:	0042a900 	call	42a90 <_lseek_r>
   4205c:	00ffffc4 	movi	r3,-1
   42060:	10c00826 	beq	r2,r3,42084 <__sseek+0x40>
   42064:	80c0030b 	ldhu	r3,12(r16)
   42068:	80801415 	stw	r2,80(r16)
   4206c:	18c40014 	ori	r3,r3,4096
   42070:	80c0030d 	sth	r3,12(r16)
   42074:	dfc00117 	ldw	ra,4(sp)
   42078:	dc000017 	ldw	r16,0(sp)
   4207c:	dec00204 	addi	sp,sp,8
   42080:	f800283a 	ret
   42084:	80c0030b 	ldhu	r3,12(r16)
   42088:	18fbffcc 	andi	r3,r3,61439
   4208c:	80c0030d 	sth	r3,12(r16)
   42090:	dfc00117 	ldw	ra,4(sp)
   42094:	dc000017 	ldw	r16,0(sp)
   42098:	dec00204 	addi	sp,sp,8
   4209c:	f800283a 	ret

000420a0 <__sclose>:
   420a0:	2940038f 	ldh	r5,14(r5)
   420a4:	004225c1 	jmpi	4225c <_close_r>

000420a8 <_write_r>:
   420a8:	defffd04 	addi	sp,sp,-12
   420ac:	2805883a 	mov	r2,r5
   420b0:	dc000015 	stw	r16,0(sp)
   420b4:	040000b4 	movhi	r16,2
   420b8:	dc400115 	stw	r17,4(sp)
   420bc:	300b883a 	mov	r5,r6
   420c0:	8402a104 	addi	r16,r16,2692
   420c4:	2023883a 	mov	r17,r4
   420c8:	380d883a 	mov	r6,r7
   420cc:	1009883a 	mov	r4,r2
   420d0:	dfc00215 	stw	ra,8(sp)
   420d4:	80000015 	stw	zero,0(r16)
   420d8:	00437ec0 	call	437ec <write>
   420dc:	00ffffc4 	movi	r3,-1
   420e0:	10c00526 	beq	r2,r3,420f8 <_write_r+0x50>
   420e4:	dfc00217 	ldw	ra,8(sp)
   420e8:	dc400117 	ldw	r17,4(sp)
   420ec:	dc000017 	ldw	r16,0(sp)
   420f0:	dec00304 	addi	sp,sp,12
   420f4:	f800283a 	ret
   420f8:	80c00017 	ldw	r3,0(r16)
   420fc:	183ff926 	beq	r3,zero,420e4 <_write_r+0x3c>
   42100:	88c00015 	stw	r3,0(r17)
   42104:	003ff706 	br	420e4 <_write_r+0x3c>

00042108 <__swsetup_r>:
   42108:	008000b4 	movhi	r2,2
   4210c:	defffd04 	addi	sp,sp,-12
   42110:	10829404 	addi	r2,r2,2640
   42114:	dc400115 	stw	r17,4(sp)
   42118:	2023883a 	mov	r17,r4
   4211c:	11000017 	ldw	r4,0(r2)
   42120:	dc000015 	stw	r16,0(sp)
   42124:	dfc00215 	stw	ra,8(sp)
   42128:	2821883a 	mov	r16,r5
   4212c:	20000226 	beq	r4,zero,42138 <__swsetup_r+0x30>
   42130:	20800e17 	ldw	r2,56(r4)
   42134:	10003126 	beq	r2,zero,421fc <__swsetup_r+0xf4>
   42138:	8080030b 	ldhu	r2,12(r16)
   4213c:	10c0020c 	andi	r3,r2,8
   42140:	1009883a 	mov	r4,r2
   42144:	18000f26 	beq	r3,zero,42184 <__swsetup_r+0x7c>
   42148:	80c00417 	ldw	r3,16(r16)
   4214c:	18001526 	beq	r3,zero,421a4 <__swsetup_r+0x9c>
   42150:	1100004c 	andi	r4,r2,1
   42154:	20001c1e 	bne	r4,zero,421c8 <__swsetup_r+0xc0>
   42158:	1080008c 	andi	r2,r2,2
   4215c:	1000291e 	bne	r2,zero,42204 <__swsetup_r+0xfc>
   42160:	80800517 	ldw	r2,20(r16)
   42164:	80800215 	stw	r2,8(r16)
   42168:	18001c26 	beq	r3,zero,421dc <__swsetup_r+0xd4>
   4216c:	0005883a 	mov	r2,zero
   42170:	dfc00217 	ldw	ra,8(sp)
   42174:	dc400117 	ldw	r17,4(sp)
   42178:	dc000017 	ldw	r16,0(sp)
   4217c:	dec00304 	addi	sp,sp,12
   42180:	f800283a 	ret
   42184:	2080040c 	andi	r2,r4,16
   42188:	10002e26 	beq	r2,zero,42244 <__swsetup_r+0x13c>
   4218c:	2080010c 	andi	r2,r4,4
   42190:	10001e1e 	bne	r2,zero,4220c <__swsetup_r+0x104>
   42194:	80c00417 	ldw	r3,16(r16)
   42198:	20800214 	ori	r2,r4,8
   4219c:	8080030d 	sth	r2,12(r16)
   421a0:	183feb1e 	bne	r3,zero,42150 <__swsetup_r+0x48>
   421a4:	1100a00c 	andi	r4,r2,640
   421a8:	01408004 	movi	r5,512
   421ac:	217fe826 	beq	r4,r5,42150 <__swsetup_r+0x48>
   421b0:	800b883a 	mov	r5,r16
   421b4:	8809883a 	mov	r4,r17
   421b8:	0042af00 	call	42af0 <__smakebuf_r>
   421bc:	8080030b 	ldhu	r2,12(r16)
   421c0:	80c00417 	ldw	r3,16(r16)
   421c4:	003fe206 	br	42150 <__swsetup_r+0x48>
   421c8:	80800517 	ldw	r2,20(r16)
   421cc:	80000215 	stw	zero,8(r16)
   421d0:	0085c83a 	sub	r2,zero,r2
   421d4:	80800615 	stw	r2,24(r16)
   421d8:	183fe41e 	bne	r3,zero,4216c <__swsetup_r+0x64>
   421dc:	80c0030b 	ldhu	r3,12(r16)
   421e0:	0005883a 	mov	r2,zero
   421e4:	1900200c 	andi	r4,r3,128
   421e8:	203fe126 	beq	r4,zero,42170 <__swsetup_r+0x68>
   421ec:	18c01014 	ori	r3,r3,64
   421f0:	80c0030d 	sth	r3,12(r16)
   421f4:	00bfffc4 	movi	r2,-1
   421f8:	003fdd06 	br	42170 <__swsetup_r+0x68>
   421fc:	00406640 	call	40664 <__sinit>
   42200:	003fcd06 	br	42138 <__swsetup_r+0x30>
   42204:	0005883a 	mov	r2,zero
   42208:	003fd606 	br	42164 <__swsetup_r+0x5c>
   4220c:	81400c17 	ldw	r5,48(r16)
   42210:	28000626 	beq	r5,zero,4222c <__swsetup_r+0x124>
   42214:	80801004 	addi	r2,r16,64
   42218:	28800326 	beq	r5,r2,42228 <__swsetup_r+0x120>
   4221c:	8809883a 	mov	r4,r17
   42220:	00427800 	call	42780 <_free_r>
   42224:	8100030b 	ldhu	r4,12(r16)
   42228:	80000c15 	stw	zero,48(r16)
   4222c:	80c00417 	ldw	r3,16(r16)
   42230:	00bff6c4 	movi	r2,-37
   42234:	1108703a 	and	r4,r2,r4
   42238:	80000115 	stw	zero,4(r16)
   4223c:	80c00015 	stw	r3,0(r16)
   42240:	003fd506 	br	42198 <__swsetup_r+0x90>
   42244:	00800244 	movi	r2,9
   42248:	88800015 	stw	r2,0(r17)
   4224c:	20801014 	ori	r2,r4,64
   42250:	8080030d 	sth	r2,12(r16)
   42254:	00bfffc4 	movi	r2,-1
   42258:	003fc506 	br	42170 <__swsetup_r+0x68>

0004225c <_close_r>:
   4225c:	defffd04 	addi	sp,sp,-12
   42260:	dc000015 	stw	r16,0(sp)
   42264:	040000b4 	movhi	r16,2
   42268:	dc400115 	stw	r17,4(sp)
   4226c:	8402a104 	addi	r16,r16,2692
   42270:	2023883a 	mov	r17,r4
   42274:	2809883a 	mov	r4,r5
   42278:	dfc00215 	stw	ra,8(sp)
   4227c:	80000015 	stw	zero,0(r16)
   42280:	0042fac0 	call	42fac <close>
   42284:	00ffffc4 	movi	r3,-1
   42288:	10c00526 	beq	r2,r3,422a0 <_close_r+0x44>
   4228c:	dfc00217 	ldw	ra,8(sp)
   42290:	dc400117 	ldw	r17,4(sp)
   42294:	dc000017 	ldw	r16,0(sp)
   42298:	dec00304 	addi	sp,sp,12
   4229c:	f800283a 	ret
   422a0:	80c00017 	ldw	r3,0(r16)
   422a4:	183ff926 	beq	r3,zero,4228c <_close_r+0x30>
   422a8:	88c00015 	stw	r3,0(r17)
   422ac:	003ff706 	br	4228c <_close_r+0x30>

000422b0 <_fclose_r>:
   422b0:	28003926 	beq	r5,zero,42398 <_fclose_r+0xe8>
   422b4:	defffc04 	addi	sp,sp,-16
   422b8:	dc400115 	stw	r17,4(sp)
   422bc:	dc000015 	stw	r16,0(sp)
   422c0:	dfc00315 	stw	ra,12(sp)
   422c4:	dc800215 	stw	r18,8(sp)
   422c8:	2023883a 	mov	r17,r4
   422cc:	2821883a 	mov	r16,r5
   422d0:	20000226 	beq	r4,zero,422dc <_fclose_r+0x2c>
   422d4:	20800e17 	ldw	r2,56(r4)
   422d8:	10002726 	beq	r2,zero,42378 <_fclose_r+0xc8>
   422dc:	8080030f 	ldh	r2,12(r16)
   422e0:	1000071e 	bne	r2,zero,42300 <_fclose_r+0x50>
   422e4:	0005883a 	mov	r2,zero
   422e8:	dfc00317 	ldw	ra,12(sp)
   422ec:	dc800217 	ldw	r18,8(sp)
   422f0:	dc400117 	ldw	r17,4(sp)
   422f4:	dc000017 	ldw	r16,0(sp)
   422f8:	dec00404 	addi	sp,sp,16
   422fc:	f800283a 	ret
   42300:	800b883a 	mov	r5,r16
   42304:	8809883a 	mov	r4,r17
   42308:	00423b40 	call	423b4 <__sflush_r>
   4230c:	1025883a 	mov	r18,r2
   42310:	80800b17 	ldw	r2,44(r16)
   42314:	10000426 	beq	r2,zero,42328 <_fclose_r+0x78>
   42318:	81400717 	ldw	r5,28(r16)
   4231c:	8809883a 	mov	r4,r17
   42320:	103ee83a 	callr	r2
   42324:	10001616 	blt	r2,zero,42380 <_fclose_r+0xd0>
   42328:	8080030b 	ldhu	r2,12(r16)
   4232c:	1080200c 	andi	r2,r2,128
   42330:	1000151e 	bne	r2,zero,42388 <_fclose_r+0xd8>
   42334:	81400c17 	ldw	r5,48(r16)
   42338:	28000526 	beq	r5,zero,42350 <_fclose_r+0xa0>
   4233c:	80801004 	addi	r2,r16,64
   42340:	28800226 	beq	r5,r2,4234c <_fclose_r+0x9c>
   42344:	8809883a 	mov	r4,r17
   42348:	00427800 	call	42780 <_free_r>
   4234c:	80000c15 	stw	zero,48(r16)
   42350:	81401117 	ldw	r5,68(r16)
   42354:	28000326 	beq	r5,zero,42364 <_fclose_r+0xb4>
   42358:	8809883a 	mov	r4,r17
   4235c:	00427800 	call	42780 <_free_r>
   42360:	80001115 	stw	zero,68(r16)
   42364:	00406740 	call	40674 <__sfp_lock_acquire>
   42368:	8000030d 	sth	zero,12(r16)
   4236c:	00406780 	call	40678 <__sfp_lock_release>
   42370:	9005883a 	mov	r2,r18
   42374:	003fdc06 	br	422e8 <_fclose_r+0x38>
   42378:	00406640 	call	40664 <__sinit>
   4237c:	003fd706 	br	422dc <_fclose_r+0x2c>
   42380:	04bfffc4 	movi	r18,-1
   42384:	003fe806 	br	42328 <_fclose_r+0x78>
   42388:	81400417 	ldw	r5,16(r16)
   4238c:	8809883a 	mov	r4,r17
   42390:	00427800 	call	42780 <_free_r>
   42394:	003fe706 	br	42334 <_fclose_r+0x84>
   42398:	0005883a 	mov	r2,zero
   4239c:	f800283a 	ret

000423a0 <fclose>:
   423a0:	008000b4 	movhi	r2,2
   423a4:	10829404 	addi	r2,r2,2640
   423a8:	200b883a 	mov	r5,r4
   423ac:	11000017 	ldw	r4,0(r2)
   423b0:	00422b01 	jmpi	422b0 <_fclose_r>

000423b4 <__sflush_r>:
   423b4:	2880030b 	ldhu	r2,12(r5)
   423b8:	defffb04 	addi	sp,sp,-20
   423bc:	dcc00315 	stw	r19,12(sp)
   423c0:	dc400115 	stw	r17,4(sp)
   423c4:	dfc00415 	stw	ra,16(sp)
   423c8:	dc800215 	stw	r18,8(sp)
   423cc:	dc000015 	stw	r16,0(sp)
   423d0:	10c0020c 	andi	r3,r2,8
   423d4:	2823883a 	mov	r17,r5
   423d8:	2027883a 	mov	r19,r4
   423dc:	1800311e 	bne	r3,zero,424a4 <__sflush_r+0xf0>
   423e0:	28c00117 	ldw	r3,4(r5)
   423e4:	10820014 	ori	r2,r2,2048
   423e8:	2880030d 	sth	r2,12(r5)
   423ec:	00c04b0e 	bge	zero,r3,4251c <__sflush_r+0x168>
   423f0:	8a000a17 	ldw	r8,40(r17)
   423f4:	40002326 	beq	r8,zero,42484 <__sflush_r+0xd0>
   423f8:	9c000017 	ldw	r16,0(r19)
   423fc:	10c4000c 	andi	r3,r2,4096
   42400:	98000015 	stw	zero,0(r19)
   42404:	18004826 	beq	r3,zero,42528 <__sflush_r+0x174>
   42408:	89801417 	ldw	r6,80(r17)
   4240c:	10c0010c 	andi	r3,r2,4
   42410:	18000626 	beq	r3,zero,4242c <__sflush_r+0x78>
   42414:	88c00117 	ldw	r3,4(r17)
   42418:	88800c17 	ldw	r2,48(r17)
   4241c:	30cdc83a 	sub	r6,r6,r3
   42420:	10000226 	beq	r2,zero,4242c <__sflush_r+0x78>
   42424:	88800f17 	ldw	r2,60(r17)
   42428:	308dc83a 	sub	r6,r6,r2
   4242c:	89400717 	ldw	r5,28(r17)
   42430:	000f883a 	mov	r7,zero
   42434:	9809883a 	mov	r4,r19
   42438:	403ee83a 	callr	r8
   4243c:	00ffffc4 	movi	r3,-1
   42440:	10c04426 	beq	r2,r3,42554 <__sflush_r+0x1a0>
   42444:	88c0030b 	ldhu	r3,12(r17)
   42448:	89000417 	ldw	r4,16(r17)
   4244c:	88000115 	stw	zero,4(r17)
   42450:	197dffcc 	andi	r5,r3,63487
   42454:	8940030d 	sth	r5,12(r17)
   42458:	89000015 	stw	r4,0(r17)
   4245c:	18c4000c 	andi	r3,r3,4096
   42460:	18002c1e 	bne	r3,zero,42514 <__sflush_r+0x160>
   42464:	89400c17 	ldw	r5,48(r17)
   42468:	9c000015 	stw	r16,0(r19)
   4246c:	28000526 	beq	r5,zero,42484 <__sflush_r+0xd0>
   42470:	88801004 	addi	r2,r17,64
   42474:	28800226 	beq	r5,r2,42480 <__sflush_r+0xcc>
   42478:	9809883a 	mov	r4,r19
   4247c:	00427800 	call	42780 <_free_r>
   42480:	88000c15 	stw	zero,48(r17)
   42484:	0005883a 	mov	r2,zero
   42488:	dfc00417 	ldw	ra,16(sp)
   4248c:	dcc00317 	ldw	r19,12(sp)
   42490:	dc800217 	ldw	r18,8(sp)
   42494:	dc400117 	ldw	r17,4(sp)
   42498:	dc000017 	ldw	r16,0(sp)
   4249c:	dec00504 	addi	sp,sp,20
   424a0:	f800283a 	ret
   424a4:	2c800417 	ldw	r18,16(r5)
   424a8:	903ff626 	beq	r18,zero,42484 <__sflush_r+0xd0>
   424ac:	2c000017 	ldw	r16,0(r5)
   424b0:	108000cc 	andi	r2,r2,3
   424b4:	2c800015 	stw	r18,0(r5)
   424b8:	84a1c83a 	sub	r16,r16,r18
   424bc:	1000131e 	bne	r2,zero,4250c <__sflush_r+0x158>
   424c0:	28800517 	ldw	r2,20(r5)
   424c4:	88800215 	stw	r2,8(r17)
   424c8:	04000316 	blt	zero,r16,424d8 <__sflush_r+0x124>
   424cc:	003fed06 	br	42484 <__sflush_r+0xd0>
   424d0:	90a5883a 	add	r18,r18,r2
   424d4:	043feb0e 	bge	zero,r16,42484 <__sflush_r+0xd0>
   424d8:	88800917 	ldw	r2,36(r17)
   424dc:	89400717 	ldw	r5,28(r17)
   424e0:	800f883a 	mov	r7,r16
   424e4:	900d883a 	mov	r6,r18
   424e8:	9809883a 	mov	r4,r19
   424ec:	103ee83a 	callr	r2
   424f0:	80a1c83a 	sub	r16,r16,r2
   424f4:	00bff616 	blt	zero,r2,424d0 <__sflush_r+0x11c>
   424f8:	88c0030b 	ldhu	r3,12(r17)
   424fc:	00bfffc4 	movi	r2,-1
   42500:	18c01014 	ori	r3,r3,64
   42504:	88c0030d 	sth	r3,12(r17)
   42508:	003fdf06 	br	42488 <__sflush_r+0xd4>
   4250c:	0005883a 	mov	r2,zero
   42510:	003fec06 	br	424c4 <__sflush_r+0x110>
   42514:	88801415 	stw	r2,80(r17)
   42518:	003fd206 	br	42464 <__sflush_r+0xb0>
   4251c:	28c00f17 	ldw	r3,60(r5)
   42520:	00ffb316 	blt	zero,r3,423f0 <__sflush_r+0x3c>
   42524:	003fd706 	br	42484 <__sflush_r+0xd0>
   42528:	89400717 	ldw	r5,28(r17)
   4252c:	000d883a 	mov	r6,zero
   42530:	01c00044 	movi	r7,1
   42534:	9809883a 	mov	r4,r19
   42538:	403ee83a 	callr	r8
   4253c:	100d883a 	mov	r6,r2
   42540:	00bfffc4 	movi	r2,-1
   42544:	30801426 	beq	r6,r2,42598 <__sflush_r+0x1e4>
   42548:	8880030b 	ldhu	r2,12(r17)
   4254c:	8a000a17 	ldw	r8,40(r17)
   42550:	003fae06 	br	4240c <__sflush_r+0x58>
   42554:	98c00017 	ldw	r3,0(r19)
   42558:	183fba26 	beq	r3,zero,42444 <__sflush_r+0x90>
   4255c:	01000744 	movi	r4,29
   42560:	19000626 	beq	r3,r4,4257c <__sflush_r+0x1c8>
   42564:	01000584 	movi	r4,22
   42568:	19000426 	beq	r3,r4,4257c <__sflush_r+0x1c8>
   4256c:	88c0030b 	ldhu	r3,12(r17)
   42570:	18c01014 	ori	r3,r3,64
   42574:	88c0030d 	sth	r3,12(r17)
   42578:	003fc306 	br	42488 <__sflush_r+0xd4>
   4257c:	8880030b 	ldhu	r2,12(r17)
   42580:	88c00417 	ldw	r3,16(r17)
   42584:	88000115 	stw	zero,4(r17)
   42588:	10bdffcc 	andi	r2,r2,63487
   4258c:	8880030d 	sth	r2,12(r17)
   42590:	88c00015 	stw	r3,0(r17)
   42594:	003fb306 	br	42464 <__sflush_r+0xb0>
   42598:	98800017 	ldw	r2,0(r19)
   4259c:	103fea26 	beq	r2,zero,42548 <__sflush_r+0x194>
   425a0:	00c00744 	movi	r3,29
   425a4:	10c00226 	beq	r2,r3,425b0 <__sflush_r+0x1fc>
   425a8:	00c00584 	movi	r3,22
   425ac:	10c0031e 	bne	r2,r3,425bc <__sflush_r+0x208>
   425b0:	9c000015 	stw	r16,0(r19)
   425b4:	0005883a 	mov	r2,zero
   425b8:	003fb306 	br	42488 <__sflush_r+0xd4>
   425bc:	88c0030b 	ldhu	r3,12(r17)
   425c0:	3005883a 	mov	r2,r6
   425c4:	18c01014 	ori	r3,r3,64
   425c8:	88c0030d 	sth	r3,12(r17)
   425cc:	003fae06 	br	42488 <__sflush_r+0xd4>

000425d0 <_fflush_r>:
   425d0:	defffd04 	addi	sp,sp,-12
   425d4:	dc000115 	stw	r16,4(sp)
   425d8:	dfc00215 	stw	ra,8(sp)
   425dc:	2021883a 	mov	r16,r4
   425e0:	20000226 	beq	r4,zero,425ec <_fflush_r+0x1c>
   425e4:	20800e17 	ldw	r2,56(r4)
   425e8:	10000c26 	beq	r2,zero,4261c <_fflush_r+0x4c>
   425ec:	2880030f 	ldh	r2,12(r5)
   425f0:	1000051e 	bne	r2,zero,42608 <_fflush_r+0x38>
   425f4:	0005883a 	mov	r2,zero
   425f8:	dfc00217 	ldw	ra,8(sp)
   425fc:	dc000117 	ldw	r16,4(sp)
   42600:	dec00304 	addi	sp,sp,12
   42604:	f800283a 	ret
   42608:	8009883a 	mov	r4,r16
   4260c:	dfc00217 	ldw	ra,8(sp)
   42610:	dc000117 	ldw	r16,4(sp)
   42614:	dec00304 	addi	sp,sp,12
   42618:	00423b41 	jmpi	423b4 <__sflush_r>
   4261c:	d9400015 	stw	r5,0(sp)
   42620:	00406640 	call	40664 <__sinit>
   42624:	d9400017 	ldw	r5,0(sp)
   42628:	003ff006 	br	425ec <_fflush_r+0x1c>

0004262c <fflush>:
   4262c:	20000526 	beq	r4,zero,42644 <fflush+0x18>
   42630:	008000b4 	movhi	r2,2
   42634:	10829404 	addi	r2,r2,2640
   42638:	200b883a 	mov	r5,r4
   4263c:	11000017 	ldw	r4,0(r2)
   42640:	00425d01 	jmpi	425d0 <_fflush_r>
   42644:	008000b4 	movhi	r2,2
   42648:	10829304 	addi	r2,r2,2636
   4264c:	11000017 	ldw	r4,0(r2)
   42650:	01400134 	movhi	r5,4
   42654:	29497404 	addi	r5,r5,9680
   42658:	0040c341 	jmpi	40c34 <_fwalk_reent>

0004265c <_malloc_trim_r>:
   4265c:	defffb04 	addi	sp,sp,-20
   42660:	dcc00315 	stw	r19,12(sp)
   42664:	04c000b4 	movhi	r19,2
   42668:	dc800215 	stw	r18,8(sp)
   4266c:	dc400115 	stw	r17,4(sp)
   42670:	dc000015 	stw	r16,0(sp)
   42674:	dfc00415 	stw	ra,16(sp)
   42678:	2821883a 	mov	r16,r5
   4267c:	9cc11c04 	addi	r19,r19,1136
   42680:	2025883a 	mov	r18,r4
   42684:	00434ec0 	call	434ec <__malloc_lock>
   42688:	98800217 	ldw	r2,8(r19)
   4268c:	14400117 	ldw	r17,4(r2)
   42690:	00bfff04 	movi	r2,-4
   42694:	88a2703a 	and	r17,r17,r2
   42698:	8c21c83a 	sub	r16,r17,r16
   4269c:	8403fbc4 	addi	r16,r16,4079
   426a0:	8020d33a 	srli	r16,r16,12
   426a4:	0083ffc4 	movi	r2,4095
   426a8:	843fffc4 	addi	r16,r16,-1
   426ac:	8020933a 	slli	r16,r16,12
   426b0:	1400060e 	bge	r2,r16,426cc <_malloc_trim_r+0x70>
   426b4:	000b883a 	mov	r5,zero
   426b8:	9009883a 	mov	r4,r18
   426bc:	0041f180 	call	41f18 <_sbrk_r>
   426c0:	98c00217 	ldw	r3,8(r19)
   426c4:	1c47883a 	add	r3,r3,r17
   426c8:	10c00a26 	beq	r2,r3,426f4 <_malloc_trim_r+0x98>
   426cc:	9009883a 	mov	r4,r18
   426d0:	00435100 	call	43510 <__malloc_unlock>
   426d4:	0005883a 	mov	r2,zero
   426d8:	dfc00417 	ldw	ra,16(sp)
   426dc:	dcc00317 	ldw	r19,12(sp)
   426e0:	dc800217 	ldw	r18,8(sp)
   426e4:	dc400117 	ldw	r17,4(sp)
   426e8:	dc000017 	ldw	r16,0(sp)
   426ec:	dec00504 	addi	sp,sp,20
   426f0:	f800283a 	ret
   426f4:	040bc83a 	sub	r5,zero,r16
   426f8:	9009883a 	mov	r4,r18
   426fc:	0041f180 	call	41f18 <_sbrk_r>
   42700:	00ffffc4 	movi	r3,-1
   42704:	10c00d26 	beq	r2,r3,4273c <_malloc_trim_r+0xe0>
   42708:	00c000b4 	movhi	r3,2
   4270c:	18c2a504 	addi	r3,r3,2708
   42710:	18800017 	ldw	r2,0(r3)
   42714:	99000217 	ldw	r4,8(r19)
   42718:	8c23c83a 	sub	r17,r17,r16
   4271c:	8c400054 	ori	r17,r17,1
   42720:	1421c83a 	sub	r16,r2,r16
   42724:	24400115 	stw	r17,4(r4)
   42728:	9009883a 	mov	r4,r18
   4272c:	1c000015 	stw	r16,0(r3)
   42730:	00435100 	call	43510 <__malloc_unlock>
   42734:	00800044 	movi	r2,1
   42738:	003fe706 	br	426d8 <_malloc_trim_r+0x7c>
   4273c:	000b883a 	mov	r5,zero
   42740:	9009883a 	mov	r4,r18
   42744:	0041f180 	call	41f18 <_sbrk_r>
   42748:	99000217 	ldw	r4,8(r19)
   4274c:	014003c4 	movi	r5,15
   42750:	1107c83a 	sub	r3,r2,r4
   42754:	28ffdd0e 	bge	r5,r3,426cc <_malloc_trim_r+0x70>
   42758:	014000b4 	movhi	r5,2
   4275c:	29429504 	addi	r5,r5,2644
   42760:	29400017 	ldw	r5,0(r5)
   42764:	18c00054 	ori	r3,r3,1
   42768:	20c00115 	stw	r3,4(r4)
   4276c:	00c000b4 	movhi	r3,2
   42770:	1145c83a 	sub	r2,r2,r5
   42774:	18c2a504 	addi	r3,r3,2708
   42778:	18800015 	stw	r2,0(r3)
   4277c:	003fd306 	br	426cc <_malloc_trim_r+0x70>

00042780 <_free_r>:
   42780:	28004126 	beq	r5,zero,42888 <_free_r+0x108>
   42784:	defffd04 	addi	sp,sp,-12
   42788:	dc400115 	stw	r17,4(sp)
   4278c:	dc000015 	stw	r16,0(sp)
   42790:	2023883a 	mov	r17,r4
   42794:	2821883a 	mov	r16,r5
   42798:	dfc00215 	stw	ra,8(sp)
   4279c:	00434ec0 	call	434ec <__malloc_lock>
   427a0:	81ffff17 	ldw	r7,-4(r16)
   427a4:	00bfff84 	movi	r2,-2
   427a8:	010000b4 	movhi	r4,2
   427ac:	81bffe04 	addi	r6,r16,-8
   427b0:	3884703a 	and	r2,r7,r2
   427b4:	21011c04 	addi	r4,r4,1136
   427b8:	308b883a 	add	r5,r6,r2
   427bc:	2a400117 	ldw	r9,4(r5)
   427c0:	22000217 	ldw	r8,8(r4)
   427c4:	00ffff04 	movi	r3,-4
   427c8:	48c6703a 	and	r3,r9,r3
   427cc:	2a005726 	beq	r5,r8,4292c <_free_r+0x1ac>
   427d0:	28c00115 	stw	r3,4(r5)
   427d4:	39c0004c 	andi	r7,r7,1
   427d8:	3800091e 	bne	r7,zero,42800 <_free_r+0x80>
   427dc:	823ffe17 	ldw	r8,-8(r16)
   427e0:	22400204 	addi	r9,r4,8
   427e4:	320dc83a 	sub	r6,r6,r8
   427e8:	31c00217 	ldw	r7,8(r6)
   427ec:	1205883a 	add	r2,r2,r8
   427f0:	3a406526 	beq	r7,r9,42988 <_free_r+0x208>
   427f4:	32000317 	ldw	r8,12(r6)
   427f8:	3a000315 	stw	r8,12(r7)
   427fc:	41c00215 	stw	r7,8(r8)
   42800:	28cf883a 	add	r7,r5,r3
   42804:	39c00117 	ldw	r7,4(r7)
   42808:	39c0004c 	andi	r7,r7,1
   4280c:	38003a26 	beq	r7,zero,428f8 <_free_r+0x178>
   42810:	10c00054 	ori	r3,r2,1
   42814:	30c00115 	stw	r3,4(r6)
   42818:	3087883a 	add	r3,r6,r2
   4281c:	18800015 	stw	r2,0(r3)
   42820:	00c07fc4 	movi	r3,511
   42824:	18801936 	bltu	r3,r2,4288c <_free_r+0x10c>
   42828:	1004d0fa 	srli	r2,r2,3
   4282c:	01c00044 	movi	r7,1
   42830:	21400117 	ldw	r5,4(r4)
   42834:	10c00044 	addi	r3,r2,1
   42838:	18c7883a 	add	r3,r3,r3
   4283c:	1005d0ba 	srai	r2,r2,2
   42840:	18c7883a 	add	r3,r3,r3
   42844:	18c7883a 	add	r3,r3,r3
   42848:	1907883a 	add	r3,r3,r4
   4284c:	3884983a 	sll	r2,r7,r2
   42850:	19c00017 	ldw	r7,0(r3)
   42854:	1a3ffe04 	addi	r8,r3,-8
   42858:	1144b03a 	or	r2,r2,r5
   4285c:	32000315 	stw	r8,12(r6)
   42860:	31c00215 	stw	r7,8(r6)
   42864:	20800115 	stw	r2,4(r4)
   42868:	19800015 	stw	r6,0(r3)
   4286c:	39800315 	stw	r6,12(r7)
   42870:	8809883a 	mov	r4,r17
   42874:	dfc00217 	ldw	ra,8(sp)
   42878:	dc400117 	ldw	r17,4(sp)
   4287c:	dc000017 	ldw	r16,0(sp)
   42880:	dec00304 	addi	sp,sp,12
   42884:	00435101 	jmpi	43510 <__malloc_unlock>
   42888:	f800283a 	ret
   4288c:	100ad27a 	srli	r5,r2,9
   42890:	00c00104 	movi	r3,4
   42894:	19404a36 	bltu	r3,r5,429c0 <_free_r+0x240>
   42898:	100ad1ba 	srli	r5,r2,6
   4289c:	28c00e44 	addi	r3,r5,57
   428a0:	18c7883a 	add	r3,r3,r3
   428a4:	29400e04 	addi	r5,r5,56
   428a8:	18c7883a 	add	r3,r3,r3
   428ac:	18c7883a 	add	r3,r3,r3
   428b0:	1909883a 	add	r4,r3,r4
   428b4:	20c00017 	ldw	r3,0(r4)
   428b8:	01c000b4 	movhi	r7,2
   428bc:	213ffe04 	addi	r4,r4,-8
   428c0:	39c11c04 	addi	r7,r7,1136
   428c4:	20c04426 	beq	r4,r3,429d8 <_free_r+0x258>
   428c8:	01ffff04 	movi	r7,-4
   428cc:	19400117 	ldw	r5,4(r3)
   428d0:	29ca703a 	and	r5,r5,r7
   428d4:	1140022e 	bgeu	r2,r5,428e0 <_free_r+0x160>
   428d8:	18c00217 	ldw	r3,8(r3)
   428dc:	20fffb1e 	bne	r4,r3,428cc <_free_r+0x14c>
   428e0:	19000317 	ldw	r4,12(r3)
   428e4:	31000315 	stw	r4,12(r6)
   428e8:	30c00215 	stw	r3,8(r6)
   428ec:	21800215 	stw	r6,8(r4)
   428f0:	19800315 	stw	r6,12(r3)
   428f4:	003fde06 	br	42870 <_free_r+0xf0>
   428f8:	29c00217 	ldw	r7,8(r5)
   428fc:	10c5883a 	add	r2,r2,r3
   42900:	00c000b4 	movhi	r3,2
   42904:	18c11e04 	addi	r3,r3,1144
   42908:	38c03b26 	beq	r7,r3,429f8 <_free_r+0x278>
   4290c:	2a000317 	ldw	r8,12(r5)
   42910:	11400054 	ori	r5,r2,1
   42914:	3087883a 	add	r3,r6,r2
   42918:	3a000315 	stw	r8,12(r7)
   4291c:	41c00215 	stw	r7,8(r8)
   42920:	31400115 	stw	r5,4(r6)
   42924:	18800015 	stw	r2,0(r3)
   42928:	003fbd06 	br	42820 <_free_r+0xa0>
   4292c:	39c0004c 	andi	r7,r7,1
   42930:	10c5883a 	add	r2,r2,r3
   42934:	3800071e 	bne	r7,zero,42954 <_free_r+0x1d4>
   42938:	81fffe17 	ldw	r7,-8(r16)
   4293c:	31cdc83a 	sub	r6,r6,r7
   42940:	30c00317 	ldw	r3,12(r6)
   42944:	31400217 	ldw	r5,8(r6)
   42948:	11c5883a 	add	r2,r2,r7
   4294c:	28c00315 	stw	r3,12(r5)
   42950:	19400215 	stw	r5,8(r3)
   42954:	10c00054 	ori	r3,r2,1
   42958:	30c00115 	stw	r3,4(r6)
   4295c:	00c000b4 	movhi	r3,2
   42960:	18c29604 	addi	r3,r3,2648
   42964:	18c00017 	ldw	r3,0(r3)
   42968:	21800215 	stw	r6,8(r4)
   4296c:	10ffc036 	bltu	r2,r3,42870 <_free_r+0xf0>
   42970:	008000b4 	movhi	r2,2
   42974:	1082a004 	addi	r2,r2,2688
   42978:	11400017 	ldw	r5,0(r2)
   4297c:	8809883a 	mov	r4,r17
   42980:	004265c0 	call	4265c <_malloc_trim_r>
   42984:	003fba06 	br	42870 <_free_r+0xf0>
   42988:	28c9883a 	add	r4,r5,r3
   4298c:	21000117 	ldw	r4,4(r4)
   42990:	2100004c 	andi	r4,r4,1
   42994:	2000391e 	bne	r4,zero,42a7c <_free_r+0x2fc>
   42998:	29c00217 	ldw	r7,8(r5)
   4299c:	29000317 	ldw	r4,12(r5)
   429a0:	1885883a 	add	r2,r3,r2
   429a4:	10c00054 	ori	r3,r2,1
   429a8:	39000315 	stw	r4,12(r7)
   429ac:	21c00215 	stw	r7,8(r4)
   429b0:	30c00115 	stw	r3,4(r6)
   429b4:	308d883a 	add	r6,r6,r2
   429b8:	30800015 	stw	r2,0(r6)
   429bc:	003fac06 	br	42870 <_free_r+0xf0>
   429c0:	00c00504 	movi	r3,20
   429c4:	19401536 	bltu	r3,r5,42a1c <_free_r+0x29c>
   429c8:	28c01704 	addi	r3,r5,92
   429cc:	18c7883a 	add	r3,r3,r3
   429d0:	294016c4 	addi	r5,r5,91
   429d4:	003fb406 	br	428a8 <_free_r+0x128>
   429d8:	280bd0ba 	srai	r5,r5,2
   429dc:	00c00044 	movi	r3,1
   429e0:	38800117 	ldw	r2,4(r7)
   429e4:	194a983a 	sll	r5,r3,r5
   429e8:	2007883a 	mov	r3,r4
   429ec:	2884b03a 	or	r2,r5,r2
   429f0:	38800115 	stw	r2,4(r7)
   429f4:	003fbb06 	br	428e4 <_free_r+0x164>
   429f8:	21800515 	stw	r6,20(r4)
   429fc:	21800415 	stw	r6,16(r4)
   42a00:	10c00054 	ori	r3,r2,1
   42a04:	31c00315 	stw	r7,12(r6)
   42a08:	31c00215 	stw	r7,8(r6)
   42a0c:	30c00115 	stw	r3,4(r6)
   42a10:	308d883a 	add	r6,r6,r2
   42a14:	30800015 	stw	r2,0(r6)
   42a18:	003f9506 	br	42870 <_free_r+0xf0>
   42a1c:	00c01504 	movi	r3,84
   42a20:	19400536 	bltu	r3,r5,42a38 <_free_r+0x2b8>
   42a24:	100ad33a 	srli	r5,r2,12
   42a28:	28c01bc4 	addi	r3,r5,111
   42a2c:	18c7883a 	add	r3,r3,r3
   42a30:	29401b84 	addi	r5,r5,110
   42a34:	003f9c06 	br	428a8 <_free_r+0x128>
   42a38:	00c05504 	movi	r3,340
   42a3c:	19400536 	bltu	r3,r5,42a54 <_free_r+0x2d4>
   42a40:	100ad3fa 	srli	r5,r2,15
   42a44:	28c01e04 	addi	r3,r5,120
   42a48:	18c7883a 	add	r3,r3,r3
   42a4c:	29401dc4 	addi	r5,r5,119
   42a50:	003f9506 	br	428a8 <_free_r+0x128>
   42a54:	00c15504 	movi	r3,1364
   42a58:	19400536 	bltu	r3,r5,42a70 <_free_r+0x2f0>
   42a5c:	100ad4ba 	srli	r5,r2,18
   42a60:	28c01f44 	addi	r3,r5,125
   42a64:	18c7883a 	add	r3,r3,r3
   42a68:	29401f04 	addi	r5,r5,124
   42a6c:	003f8e06 	br	428a8 <_free_r+0x128>
   42a70:	00c03f84 	movi	r3,254
   42a74:	01401f84 	movi	r5,126
   42a78:	003f8b06 	br	428a8 <_free_r+0x128>
   42a7c:	10c00054 	ori	r3,r2,1
   42a80:	30c00115 	stw	r3,4(r6)
   42a84:	308d883a 	add	r6,r6,r2
   42a88:	30800015 	stw	r2,0(r6)
   42a8c:	003f7806 	br	42870 <_free_r+0xf0>

00042a90 <_lseek_r>:
   42a90:	defffd04 	addi	sp,sp,-12
   42a94:	2805883a 	mov	r2,r5
   42a98:	dc000015 	stw	r16,0(sp)
   42a9c:	040000b4 	movhi	r16,2
   42aa0:	dc400115 	stw	r17,4(sp)
   42aa4:	300b883a 	mov	r5,r6
   42aa8:	8402a104 	addi	r16,r16,2692
   42aac:	2023883a 	mov	r17,r4
   42ab0:	380d883a 	mov	r6,r7
   42ab4:	1009883a 	mov	r4,r2
   42ab8:	dfc00215 	stw	ra,8(sp)
   42abc:	80000015 	stw	zero,0(r16)
   42ac0:	004339c0 	call	4339c <lseek>
   42ac4:	00ffffc4 	movi	r3,-1
   42ac8:	10c00526 	beq	r2,r3,42ae0 <_lseek_r+0x50>
   42acc:	dfc00217 	ldw	ra,8(sp)
   42ad0:	dc400117 	ldw	r17,4(sp)
   42ad4:	dc000017 	ldw	r16,0(sp)
   42ad8:	dec00304 	addi	sp,sp,12
   42adc:	f800283a 	ret
   42ae0:	80c00017 	ldw	r3,0(r16)
   42ae4:	183ff926 	beq	r3,zero,42acc <_lseek_r+0x3c>
   42ae8:	88c00015 	stw	r3,0(r17)
   42aec:	003ff706 	br	42acc <_lseek_r+0x3c>

00042af0 <__smakebuf_r>:
   42af0:	2880030b 	ldhu	r2,12(r5)
   42af4:	10c0008c 	andi	r3,r2,2
   42af8:	1800411e 	bne	r3,zero,42c00 <__smakebuf_r+0x110>
   42afc:	deffec04 	addi	sp,sp,-80
   42b00:	dc000f15 	stw	r16,60(sp)
   42b04:	2821883a 	mov	r16,r5
   42b08:	2940038f 	ldh	r5,14(r5)
   42b0c:	dc401015 	stw	r17,64(sp)
   42b10:	dfc01315 	stw	ra,76(sp)
   42b14:	dcc01215 	stw	r19,72(sp)
   42b18:	dc801115 	stw	r18,68(sp)
   42b1c:	2023883a 	mov	r17,r4
   42b20:	28001c16 	blt	r5,zero,42b94 <__smakebuf_r+0xa4>
   42b24:	d80d883a 	mov	r6,sp
   42b28:	0042d0c0 	call	42d0c <_fstat_r>
   42b2c:	10001816 	blt	r2,zero,42b90 <__smakebuf_r+0xa0>
   42b30:	d8800117 	ldw	r2,4(sp)
   42b34:	00e00014 	movui	r3,32768
   42b38:	10bc000c 	andi	r2,r2,61440
   42b3c:	14c80020 	cmpeqi	r19,r2,8192
   42b40:	10c03726 	beq	r2,r3,42c20 <__smakebuf_r+0x130>
   42b44:	80c0030b 	ldhu	r3,12(r16)
   42b48:	18c20014 	ori	r3,r3,2048
   42b4c:	80c0030d 	sth	r3,12(r16)
   42b50:	00c80004 	movi	r3,8192
   42b54:	10c0521e 	bne	r2,r3,42ca0 <__smakebuf_r+0x1b0>
   42b58:	8140038f 	ldh	r5,14(r16)
   42b5c:	8809883a 	mov	r4,r17
   42b60:	0042d680 	call	42d68 <_isatty_r>
   42b64:	10004c26 	beq	r2,zero,42c98 <__smakebuf_r+0x1a8>
   42b68:	8080030b 	ldhu	r2,12(r16)
   42b6c:	80c010c4 	addi	r3,r16,67
   42b70:	80c00015 	stw	r3,0(r16)
   42b74:	10800054 	ori	r2,r2,1
   42b78:	8080030d 	sth	r2,12(r16)
   42b7c:	00800044 	movi	r2,1
   42b80:	80c00415 	stw	r3,16(r16)
   42b84:	80800515 	stw	r2,20(r16)
   42b88:	04810004 	movi	r18,1024
   42b8c:	00000706 	br	42bac <__smakebuf_r+0xbc>
   42b90:	8080030b 	ldhu	r2,12(r16)
   42b94:	10c0200c 	andi	r3,r2,128
   42b98:	18001f1e 	bne	r3,zero,42c18 <__smakebuf_r+0x128>
   42b9c:	04810004 	movi	r18,1024
   42ba0:	10820014 	ori	r2,r2,2048
   42ba4:	8080030d 	sth	r2,12(r16)
   42ba8:	0027883a 	mov	r19,zero
   42bac:	900b883a 	mov	r5,r18
   42bb0:	8809883a 	mov	r4,r17
   42bb4:	0040cf80 	call	40cf8 <_malloc_r>
   42bb8:	10002c26 	beq	r2,zero,42c6c <__smakebuf_r+0x17c>
   42bbc:	80c0030b 	ldhu	r3,12(r16)
   42bc0:	01000134 	movhi	r4,4
   42bc4:	2100c704 	addi	r4,r4,796
   42bc8:	89000f15 	stw	r4,60(r17)
   42bcc:	18c02014 	ori	r3,r3,128
   42bd0:	80c0030d 	sth	r3,12(r16)
   42bd4:	80800015 	stw	r2,0(r16)
   42bd8:	80800415 	stw	r2,16(r16)
   42bdc:	84800515 	stw	r18,20(r16)
   42be0:	98001a1e 	bne	r19,zero,42c4c <__smakebuf_r+0x15c>
   42be4:	dfc01317 	ldw	ra,76(sp)
   42be8:	dcc01217 	ldw	r19,72(sp)
   42bec:	dc801117 	ldw	r18,68(sp)
   42bf0:	dc401017 	ldw	r17,64(sp)
   42bf4:	dc000f17 	ldw	r16,60(sp)
   42bf8:	dec01404 	addi	sp,sp,80
   42bfc:	f800283a 	ret
   42c00:	288010c4 	addi	r2,r5,67
   42c04:	28800015 	stw	r2,0(r5)
   42c08:	28800415 	stw	r2,16(r5)
   42c0c:	00800044 	movi	r2,1
   42c10:	28800515 	stw	r2,20(r5)
   42c14:	f800283a 	ret
   42c18:	04801004 	movi	r18,64
   42c1c:	003fe006 	br	42ba0 <__smakebuf_r+0xb0>
   42c20:	81000a17 	ldw	r4,40(r16)
   42c24:	00c00134 	movhi	r3,4
   42c28:	18c81104 	addi	r3,r3,8260
   42c2c:	20ffc51e 	bne	r4,r3,42b44 <__smakebuf_r+0x54>
   42c30:	8080030b 	ldhu	r2,12(r16)
   42c34:	04810004 	movi	r18,1024
   42c38:	84801315 	stw	r18,76(r16)
   42c3c:	1484b03a 	or	r2,r2,r18
   42c40:	8080030d 	sth	r2,12(r16)
   42c44:	0027883a 	mov	r19,zero
   42c48:	003fd806 	br	42bac <__smakebuf_r+0xbc>
   42c4c:	8140038f 	ldh	r5,14(r16)
   42c50:	8809883a 	mov	r4,r17
   42c54:	0042d680 	call	42d68 <_isatty_r>
   42c58:	103fe226 	beq	r2,zero,42be4 <__smakebuf_r+0xf4>
   42c5c:	8080030b 	ldhu	r2,12(r16)
   42c60:	10800054 	ori	r2,r2,1
   42c64:	8080030d 	sth	r2,12(r16)
   42c68:	003fde06 	br	42be4 <__smakebuf_r+0xf4>
   42c6c:	8080030b 	ldhu	r2,12(r16)
   42c70:	10c0800c 	andi	r3,r2,512
   42c74:	183fdb1e 	bne	r3,zero,42be4 <__smakebuf_r+0xf4>
   42c78:	10800094 	ori	r2,r2,2
   42c7c:	80c010c4 	addi	r3,r16,67
   42c80:	8080030d 	sth	r2,12(r16)
   42c84:	00800044 	movi	r2,1
   42c88:	80c00015 	stw	r3,0(r16)
   42c8c:	80c00415 	stw	r3,16(r16)
   42c90:	80800515 	stw	r2,20(r16)
   42c94:	003fd306 	br	42be4 <__smakebuf_r+0xf4>
   42c98:	04810004 	movi	r18,1024
   42c9c:	003fc306 	br	42bac <__smakebuf_r+0xbc>
   42ca0:	0027883a 	mov	r19,zero
   42ca4:	04810004 	movi	r18,1024
   42ca8:	003fc006 	br	42bac <__smakebuf_r+0xbc>

00042cac <_read_r>:
   42cac:	defffd04 	addi	sp,sp,-12
   42cb0:	2805883a 	mov	r2,r5
   42cb4:	dc000015 	stw	r16,0(sp)
   42cb8:	040000b4 	movhi	r16,2
   42cbc:	dc400115 	stw	r17,4(sp)
   42cc0:	300b883a 	mov	r5,r6
   42cc4:	8402a104 	addi	r16,r16,2692
   42cc8:	2023883a 	mov	r17,r4
   42ccc:	380d883a 	mov	r6,r7
   42cd0:	1009883a 	mov	r4,r2
   42cd4:	dfc00215 	stw	ra,8(sp)
   42cd8:	80000015 	stw	zero,0(r16)
   42cdc:	00435700 	call	43570 <read>
   42ce0:	00ffffc4 	movi	r3,-1
   42ce4:	10c00526 	beq	r2,r3,42cfc <_read_r+0x50>
   42ce8:	dfc00217 	ldw	ra,8(sp)
   42cec:	dc400117 	ldw	r17,4(sp)
   42cf0:	dc000017 	ldw	r16,0(sp)
   42cf4:	dec00304 	addi	sp,sp,12
   42cf8:	f800283a 	ret
   42cfc:	80c00017 	ldw	r3,0(r16)
   42d00:	183ff926 	beq	r3,zero,42ce8 <_read_r+0x3c>
   42d04:	88c00015 	stw	r3,0(r17)
   42d08:	003ff706 	br	42ce8 <_read_r+0x3c>

00042d0c <_fstat_r>:
   42d0c:	defffd04 	addi	sp,sp,-12
   42d10:	2805883a 	mov	r2,r5
   42d14:	dc000015 	stw	r16,0(sp)
   42d18:	040000b4 	movhi	r16,2
   42d1c:	dc400115 	stw	r17,4(sp)
   42d20:	8402a104 	addi	r16,r16,2692
   42d24:	2023883a 	mov	r17,r4
   42d28:	300b883a 	mov	r5,r6
   42d2c:	1009883a 	mov	r4,r2
   42d30:	dfc00215 	stw	ra,8(sp)
   42d34:	80000015 	stw	zero,0(r16)
   42d38:	00430e40 	call	430e4 <fstat>
   42d3c:	00ffffc4 	movi	r3,-1
   42d40:	10c00526 	beq	r2,r3,42d58 <_fstat_r+0x4c>
   42d44:	dfc00217 	ldw	ra,8(sp)
   42d48:	dc400117 	ldw	r17,4(sp)
   42d4c:	dc000017 	ldw	r16,0(sp)
   42d50:	dec00304 	addi	sp,sp,12
   42d54:	f800283a 	ret
   42d58:	80c00017 	ldw	r3,0(r16)
   42d5c:	183ff926 	beq	r3,zero,42d44 <_fstat_r+0x38>
   42d60:	88c00015 	stw	r3,0(r17)
   42d64:	003ff706 	br	42d44 <_fstat_r+0x38>

00042d68 <_isatty_r>:
   42d68:	defffd04 	addi	sp,sp,-12
   42d6c:	dc000015 	stw	r16,0(sp)
   42d70:	040000b4 	movhi	r16,2
   42d74:	dc400115 	stw	r17,4(sp)
   42d78:	8402a104 	addi	r16,r16,2692
   42d7c:	2023883a 	mov	r17,r4
   42d80:	2809883a 	mov	r4,r5
   42d84:	dfc00215 	stw	ra,8(sp)
   42d88:	80000015 	stw	zero,0(r16)
   42d8c:	00431d00 	call	431d0 <isatty>
   42d90:	00ffffc4 	movi	r3,-1
   42d94:	10c00526 	beq	r2,r3,42dac <_isatty_r+0x44>
   42d98:	dfc00217 	ldw	ra,8(sp)
   42d9c:	dc400117 	ldw	r17,4(sp)
   42da0:	dc000017 	ldw	r16,0(sp)
   42da4:	dec00304 	addi	sp,sp,12
   42da8:	f800283a 	ret
   42dac:	80c00017 	ldw	r3,0(r16)
   42db0:	183ff926 	beq	r3,zero,42d98 <_isatty_r+0x30>
   42db4:	88c00015 	stw	r3,0(r17)
   42db8:	003ff706 	br	42d98 <_isatty_r+0x30>

00042dbc <__divsi3>:
   42dbc:	20001b16 	blt	r4,zero,42e2c <__divsi3+0x70>
   42dc0:	000f883a 	mov	r7,zero
   42dc4:	28001616 	blt	r5,zero,42e20 <__divsi3+0x64>
   42dc8:	200d883a 	mov	r6,r4
   42dcc:	29001a2e 	bgeu	r5,r4,42e38 <__divsi3+0x7c>
   42dd0:	00800804 	movi	r2,32
   42dd4:	00c00044 	movi	r3,1
   42dd8:	00000106 	br	42de0 <__divsi3+0x24>
   42ddc:	10000d26 	beq	r2,zero,42e14 <__divsi3+0x58>
   42de0:	294b883a 	add	r5,r5,r5
   42de4:	10bfffc4 	addi	r2,r2,-1
   42de8:	18c7883a 	add	r3,r3,r3
   42dec:	293ffb36 	bltu	r5,r4,42ddc <__divsi3+0x20>
   42df0:	0005883a 	mov	r2,zero
   42df4:	18000726 	beq	r3,zero,42e14 <__divsi3+0x58>
   42df8:	0005883a 	mov	r2,zero
   42dfc:	31400236 	bltu	r6,r5,42e08 <__divsi3+0x4c>
   42e00:	314dc83a 	sub	r6,r6,r5
   42e04:	10c4b03a 	or	r2,r2,r3
   42e08:	1806d07a 	srli	r3,r3,1
   42e0c:	280ad07a 	srli	r5,r5,1
   42e10:	183ffa1e 	bne	r3,zero,42dfc <__divsi3+0x40>
   42e14:	38000126 	beq	r7,zero,42e1c <__divsi3+0x60>
   42e18:	0085c83a 	sub	r2,zero,r2
   42e1c:	f800283a 	ret
   42e20:	014bc83a 	sub	r5,zero,r5
   42e24:	39c0005c 	xori	r7,r7,1
   42e28:	003fe706 	br	42dc8 <__divsi3+0xc>
   42e2c:	0109c83a 	sub	r4,zero,r4
   42e30:	01c00044 	movi	r7,1
   42e34:	003fe306 	br	42dc4 <__divsi3+0x8>
   42e38:	00c00044 	movi	r3,1
   42e3c:	003fee06 	br	42df8 <__divsi3+0x3c>

00042e40 <__modsi3>:
   42e40:	20001716 	blt	r4,zero,42ea0 <__modsi3+0x60>
   42e44:	000f883a 	mov	r7,zero
   42e48:	2005883a 	mov	r2,r4
   42e4c:	28001216 	blt	r5,zero,42e98 <__modsi3+0x58>
   42e50:	2900162e 	bgeu	r5,r4,42eac <__modsi3+0x6c>
   42e54:	01800804 	movi	r6,32
   42e58:	00c00044 	movi	r3,1
   42e5c:	00000106 	br	42e64 <__modsi3+0x24>
   42e60:	30000a26 	beq	r6,zero,42e8c <__modsi3+0x4c>
   42e64:	294b883a 	add	r5,r5,r5
   42e68:	31bfffc4 	addi	r6,r6,-1
   42e6c:	18c7883a 	add	r3,r3,r3
   42e70:	293ffb36 	bltu	r5,r4,42e60 <__modsi3+0x20>
   42e74:	18000526 	beq	r3,zero,42e8c <__modsi3+0x4c>
   42e78:	1806d07a 	srli	r3,r3,1
   42e7c:	11400136 	bltu	r2,r5,42e84 <__modsi3+0x44>
   42e80:	1145c83a 	sub	r2,r2,r5
   42e84:	280ad07a 	srli	r5,r5,1
   42e88:	183ffb1e 	bne	r3,zero,42e78 <__modsi3+0x38>
   42e8c:	38000126 	beq	r7,zero,42e94 <__modsi3+0x54>
   42e90:	0085c83a 	sub	r2,zero,r2
   42e94:	f800283a 	ret
   42e98:	014bc83a 	sub	r5,zero,r5
   42e9c:	003fec06 	br	42e50 <__modsi3+0x10>
   42ea0:	0109c83a 	sub	r4,zero,r4
   42ea4:	01c00044 	movi	r7,1
   42ea8:	003fe706 	br	42e48 <__modsi3+0x8>
   42eac:	00c00044 	movi	r3,1
   42eb0:	003ff106 	br	42e78 <__modsi3+0x38>

00042eb4 <__udivsi3>:
   42eb4:	200d883a 	mov	r6,r4
   42eb8:	2900152e 	bgeu	r5,r4,42f10 <__udivsi3+0x5c>
   42ebc:	28001416 	blt	r5,zero,42f10 <__udivsi3+0x5c>
   42ec0:	00800804 	movi	r2,32
   42ec4:	00c00044 	movi	r3,1
   42ec8:	00000206 	br	42ed4 <__udivsi3+0x20>
   42ecc:	10000e26 	beq	r2,zero,42f08 <__udivsi3+0x54>
   42ed0:	28000516 	blt	r5,zero,42ee8 <__udivsi3+0x34>
   42ed4:	294b883a 	add	r5,r5,r5
   42ed8:	10bfffc4 	addi	r2,r2,-1
   42edc:	18c7883a 	add	r3,r3,r3
   42ee0:	293ffa36 	bltu	r5,r4,42ecc <__udivsi3+0x18>
   42ee4:	18000826 	beq	r3,zero,42f08 <__udivsi3+0x54>
   42ee8:	0005883a 	mov	r2,zero
   42eec:	31400236 	bltu	r6,r5,42ef8 <__udivsi3+0x44>
   42ef0:	314dc83a 	sub	r6,r6,r5
   42ef4:	10c4b03a 	or	r2,r2,r3
   42ef8:	1806d07a 	srli	r3,r3,1
   42efc:	280ad07a 	srli	r5,r5,1
   42f00:	183ffa1e 	bne	r3,zero,42eec <__udivsi3+0x38>
   42f04:	f800283a 	ret
   42f08:	0005883a 	mov	r2,zero
   42f0c:	f800283a 	ret
   42f10:	00c00044 	movi	r3,1
   42f14:	003ff406 	br	42ee8 <__udivsi3+0x34>

00042f18 <__umodsi3>:
   42f18:	2005883a 	mov	r2,r4
   42f1c:	2900122e 	bgeu	r5,r4,42f68 <__umodsi3+0x50>
   42f20:	28001116 	blt	r5,zero,42f68 <__umodsi3+0x50>
   42f24:	01800804 	movi	r6,32
   42f28:	00c00044 	movi	r3,1
   42f2c:	00000206 	br	42f38 <__umodsi3+0x20>
   42f30:	30000c26 	beq	r6,zero,42f64 <__umodsi3+0x4c>
   42f34:	28000516 	blt	r5,zero,42f4c <__umodsi3+0x34>
   42f38:	294b883a 	add	r5,r5,r5
   42f3c:	31bfffc4 	addi	r6,r6,-1
   42f40:	18c7883a 	add	r3,r3,r3
   42f44:	293ffa36 	bltu	r5,r4,42f30 <__umodsi3+0x18>
   42f48:	18000626 	beq	r3,zero,42f64 <__umodsi3+0x4c>
   42f4c:	1806d07a 	srli	r3,r3,1
   42f50:	11400136 	bltu	r2,r5,42f58 <__umodsi3+0x40>
   42f54:	1145c83a 	sub	r2,r2,r5
   42f58:	280ad07a 	srli	r5,r5,1
   42f5c:	183ffb1e 	bne	r3,zero,42f4c <__umodsi3+0x34>
   42f60:	f800283a 	ret
   42f64:	f800283a 	ret
   42f68:	00c00044 	movi	r3,1
   42f6c:	003ff706 	br	42f4c <__umodsi3+0x34>

00042f70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   42f70:	defffe04 	addi	sp,sp,-8
   42f74:	dfc00115 	stw	ra,4(sp)
   42f78:	df000015 	stw	fp,0(sp)
   42f7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   42f80:	d0a00917 	ldw	r2,-32732(gp)
   42f84:	10000326 	beq	r2,zero,42f94 <alt_get_errno+0x24>
   42f88:	d0a00917 	ldw	r2,-32732(gp)
   42f8c:	103ee83a 	callr	r2
   42f90:	00000106 	br	42f98 <alt_get_errno+0x28>
   42f94:	d0a00e04 	addi	r2,gp,-32712
}
   42f98:	e037883a 	mov	sp,fp
   42f9c:	dfc00117 	ldw	ra,4(sp)
   42fa0:	df000017 	ldw	fp,0(sp)
   42fa4:	dec00204 	addi	sp,sp,8
   42fa8:	f800283a 	ret

00042fac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   42fac:	defffb04 	addi	sp,sp,-20
   42fb0:	dfc00415 	stw	ra,16(sp)
   42fb4:	df000315 	stw	fp,12(sp)
   42fb8:	df000304 	addi	fp,sp,12
   42fbc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   42fc0:	e0bfff17 	ldw	r2,-4(fp)
   42fc4:	10000616 	blt	r2,zero,42fe0 <close+0x34>
   42fc8:	e0bfff17 	ldw	r2,-4(fp)
   42fcc:	10c00324 	muli	r3,r2,12
   42fd0:	008000b4 	movhi	r2,2
   42fd4:	10822804 	addi	r2,r2,2208
   42fd8:	1885883a 	add	r2,r3,r2
   42fdc:	00000106 	br	42fe4 <close+0x38>
   42fe0:	0005883a 	mov	r2,zero
   42fe4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   42fe8:	e0bffd17 	ldw	r2,-12(fp)
   42fec:	10001926 	beq	r2,zero,43054 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   42ff0:	e0bffd17 	ldw	r2,-12(fp)
   42ff4:	10800017 	ldw	r2,0(r2)
   42ff8:	10800417 	ldw	r2,16(r2)
   42ffc:	10000626 	beq	r2,zero,43018 <close+0x6c>
   43000:	e0bffd17 	ldw	r2,-12(fp)
   43004:	10800017 	ldw	r2,0(r2)
   43008:	10800417 	ldw	r2,16(r2)
   4300c:	e13ffd17 	ldw	r4,-12(fp)
   43010:	103ee83a 	callr	r2
   43014:	00000106 	br	4301c <close+0x70>
   43018:	0005883a 	mov	r2,zero
   4301c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   43020:	e13fff17 	ldw	r4,-4(fp)
   43024:	004366c0 	call	4366c <alt_release_fd>
    if (rval < 0)
   43028:	e0bffe17 	ldw	r2,-8(fp)
   4302c:	1000070e 	bge	r2,zero,4304c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   43030:	0042f700 	call	42f70 <alt_get_errno>
   43034:	1007883a 	mov	r3,r2
   43038:	e0bffe17 	ldw	r2,-8(fp)
   4303c:	0085c83a 	sub	r2,zero,r2
   43040:	18800015 	stw	r2,0(r3)
      return -1;
   43044:	00bfffc4 	movi	r2,-1
   43048:	00000706 	br	43068 <close+0xbc>
    }
    return 0;
   4304c:	0005883a 	mov	r2,zero
   43050:	00000506 	br	43068 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   43054:	0042f700 	call	42f70 <alt_get_errno>
   43058:	1007883a 	mov	r3,r2
   4305c:	00801444 	movi	r2,81
   43060:	18800015 	stw	r2,0(r3)
    return -1;
   43064:	00bfffc4 	movi	r2,-1
  }
}
   43068:	e037883a 	mov	sp,fp
   4306c:	dfc00117 	ldw	ra,4(sp)
   43070:	df000017 	ldw	fp,0(sp)
   43074:	dec00204 	addi	sp,sp,8
   43078:	f800283a 	ret

0004307c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4307c:	defffc04 	addi	sp,sp,-16
   43080:	df000315 	stw	fp,12(sp)
   43084:	df000304 	addi	fp,sp,12
   43088:	e13ffd15 	stw	r4,-12(fp)
   4308c:	e17ffe15 	stw	r5,-8(fp)
   43090:	e1bfff15 	stw	r6,-4(fp)
  return len;
   43094:	e0bfff17 	ldw	r2,-4(fp)
}
   43098:	e037883a 	mov	sp,fp
   4309c:	df000017 	ldw	fp,0(sp)
   430a0:	dec00104 	addi	sp,sp,4
   430a4:	f800283a 	ret

000430a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   430a8:	defffe04 	addi	sp,sp,-8
   430ac:	dfc00115 	stw	ra,4(sp)
   430b0:	df000015 	stw	fp,0(sp)
   430b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   430b8:	d0a00917 	ldw	r2,-32732(gp)
   430bc:	10000326 	beq	r2,zero,430cc <alt_get_errno+0x24>
   430c0:	d0a00917 	ldw	r2,-32732(gp)
   430c4:	103ee83a 	callr	r2
   430c8:	00000106 	br	430d0 <alt_get_errno+0x28>
   430cc:	d0a00e04 	addi	r2,gp,-32712
}
   430d0:	e037883a 	mov	sp,fp
   430d4:	dfc00117 	ldw	ra,4(sp)
   430d8:	df000017 	ldw	fp,0(sp)
   430dc:	dec00204 	addi	sp,sp,8
   430e0:	f800283a 	ret

000430e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   430e4:	defffb04 	addi	sp,sp,-20
   430e8:	dfc00415 	stw	ra,16(sp)
   430ec:	df000315 	stw	fp,12(sp)
   430f0:	df000304 	addi	fp,sp,12
   430f4:	e13ffe15 	stw	r4,-8(fp)
   430f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   430fc:	e0bffe17 	ldw	r2,-8(fp)
   43100:	10000616 	blt	r2,zero,4311c <fstat+0x38>
   43104:	e0bffe17 	ldw	r2,-8(fp)
   43108:	10c00324 	muli	r3,r2,12
   4310c:	008000b4 	movhi	r2,2
   43110:	10822804 	addi	r2,r2,2208
   43114:	1885883a 	add	r2,r3,r2
   43118:	00000106 	br	43120 <fstat+0x3c>
   4311c:	0005883a 	mov	r2,zero
   43120:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   43124:	e0bffd17 	ldw	r2,-12(fp)
   43128:	10001026 	beq	r2,zero,4316c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4312c:	e0bffd17 	ldw	r2,-12(fp)
   43130:	10800017 	ldw	r2,0(r2)
   43134:	10800817 	ldw	r2,32(r2)
   43138:	10000726 	beq	r2,zero,43158 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4313c:	e0bffd17 	ldw	r2,-12(fp)
   43140:	10800017 	ldw	r2,0(r2)
   43144:	10800817 	ldw	r2,32(r2)
   43148:	e17fff17 	ldw	r5,-4(fp)
   4314c:	e13ffd17 	ldw	r4,-12(fp)
   43150:	103ee83a 	callr	r2
   43154:	00000a06 	br	43180 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   43158:	e0bfff17 	ldw	r2,-4(fp)
   4315c:	00c80004 	movi	r3,8192
   43160:	10c00115 	stw	r3,4(r2)
      return 0;
   43164:	0005883a 	mov	r2,zero
   43168:	00000506 	br	43180 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4316c:	00430a80 	call	430a8 <alt_get_errno>
   43170:	1007883a 	mov	r3,r2
   43174:	00801444 	movi	r2,81
   43178:	18800015 	stw	r2,0(r3)
    return -1;
   4317c:	00bfffc4 	movi	r2,-1
  }
}
   43180:	e037883a 	mov	sp,fp
   43184:	dfc00117 	ldw	ra,4(sp)
   43188:	df000017 	ldw	fp,0(sp)
   4318c:	dec00204 	addi	sp,sp,8
   43190:	f800283a 	ret

00043194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43194:	defffe04 	addi	sp,sp,-8
   43198:	dfc00115 	stw	ra,4(sp)
   4319c:	df000015 	stw	fp,0(sp)
   431a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   431a4:	d0a00917 	ldw	r2,-32732(gp)
   431a8:	10000326 	beq	r2,zero,431b8 <alt_get_errno+0x24>
   431ac:	d0a00917 	ldw	r2,-32732(gp)
   431b0:	103ee83a 	callr	r2
   431b4:	00000106 	br	431bc <alt_get_errno+0x28>
   431b8:	d0a00e04 	addi	r2,gp,-32712
}
   431bc:	e037883a 	mov	sp,fp
   431c0:	dfc00117 	ldw	ra,4(sp)
   431c4:	df000017 	ldw	fp,0(sp)
   431c8:	dec00204 	addi	sp,sp,8
   431cc:	f800283a 	ret

000431d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   431d0:	deffed04 	addi	sp,sp,-76
   431d4:	dfc01215 	stw	ra,72(sp)
   431d8:	df001115 	stw	fp,68(sp)
   431dc:	df001104 	addi	fp,sp,68
   431e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   431e4:	e0bfff17 	ldw	r2,-4(fp)
   431e8:	10000616 	blt	r2,zero,43204 <isatty+0x34>
   431ec:	e0bfff17 	ldw	r2,-4(fp)
   431f0:	10c00324 	muli	r3,r2,12
   431f4:	008000b4 	movhi	r2,2
   431f8:	10822804 	addi	r2,r2,2208
   431fc:	1885883a 	add	r2,r3,r2
   43200:	00000106 	br	43208 <isatty+0x38>
   43204:	0005883a 	mov	r2,zero
   43208:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4320c:	e0bfef17 	ldw	r2,-68(fp)
   43210:	10000e26 	beq	r2,zero,4324c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   43214:	e0bfef17 	ldw	r2,-68(fp)
   43218:	10800017 	ldw	r2,0(r2)
   4321c:	10800817 	ldw	r2,32(r2)
   43220:	1000021e 	bne	r2,zero,4322c <isatty+0x5c>
    {
      return 1;
   43224:	00800044 	movi	r2,1
   43228:	00000d06 	br	43260 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4322c:	e0bff004 	addi	r2,fp,-64
   43230:	100b883a 	mov	r5,r2
   43234:	e13fff17 	ldw	r4,-4(fp)
   43238:	00430e40 	call	430e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4323c:	e0bff117 	ldw	r2,-60(fp)
   43240:	10880020 	cmpeqi	r2,r2,8192
   43244:	10803fcc 	andi	r2,r2,255
   43248:	00000506 	br	43260 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4324c:	00431940 	call	43194 <alt_get_errno>
   43250:	1007883a 	mov	r3,r2
   43254:	00801444 	movi	r2,81
   43258:	18800015 	stw	r2,0(r3)
    return 0;
   4325c:	0005883a 	mov	r2,zero
  }
}
   43260:	e037883a 	mov	sp,fp
   43264:	dfc00117 	ldw	ra,4(sp)
   43268:	df000017 	ldw	fp,0(sp)
   4326c:	dec00204 	addi	sp,sp,8
   43270:	f800283a 	ret

00043274 <alt_load_section>:
   43274:	defffc04 	addi	sp,sp,-16
   43278:	df000315 	stw	fp,12(sp)
   4327c:	df000304 	addi	fp,sp,12
   43280:	e13ffd15 	stw	r4,-12(fp)
   43284:	e17ffe15 	stw	r5,-8(fp)
   43288:	e1bfff15 	stw	r6,-4(fp)
   4328c:	e0fffe17 	ldw	r3,-8(fp)
   43290:	e0bffd17 	ldw	r2,-12(fp)
   43294:	18800c26 	beq	r3,r2,432c8 <alt_load_section+0x54>
   43298:	00000806 	br	432bc <alt_load_section+0x48>
   4329c:	e0bffe17 	ldw	r2,-8(fp)
   432a0:	10c00104 	addi	r3,r2,4
   432a4:	e0fffe15 	stw	r3,-8(fp)
   432a8:	e0fffd17 	ldw	r3,-12(fp)
   432ac:	19000104 	addi	r4,r3,4
   432b0:	e13ffd15 	stw	r4,-12(fp)
   432b4:	18c00017 	ldw	r3,0(r3)
   432b8:	10c00015 	stw	r3,0(r2)
   432bc:	e0fffe17 	ldw	r3,-8(fp)
   432c0:	e0bfff17 	ldw	r2,-4(fp)
   432c4:	18bff51e 	bne	r3,r2,4329c <alt_load_section+0x28>
   432c8:	0001883a 	nop
   432cc:	e037883a 	mov	sp,fp
   432d0:	df000017 	ldw	fp,0(sp)
   432d4:	dec00104 	addi	sp,sp,4
   432d8:	f800283a 	ret

000432dc <alt_load>:
   432dc:	defffe04 	addi	sp,sp,-8
   432e0:	dfc00115 	stw	ra,4(sp)
   432e4:	df000015 	stw	fp,0(sp)
   432e8:	d839883a 	mov	fp,sp
   432ec:	018000b4 	movhi	r6,2
   432f0:	31829e04 	addi	r6,r6,2680
   432f4:	014000b4 	movhi	r5,2
   432f8:	29401304 	addi	r5,r5,76
   432fc:	01000134 	movhi	r4,4
   43300:	21125404 	addi	r4,r4,18768
   43304:	00432740 	call	43274 <alt_load_section>
   43308:	01800134 	movhi	r6,4
   4330c:	31800804 	addi	r6,r6,32
   43310:	01400134 	movhi	r5,4
   43314:	29400804 	addi	r5,r5,32
   43318:	01000134 	movhi	r4,4
   4331c:	21000804 	addi	r4,r4,32
   43320:	00432740 	call	43274 <alt_load_section>
   43324:	018000b4 	movhi	r6,2
   43328:	31801304 	addi	r6,r6,76
   4332c:	014000b4 	movhi	r5,2
   43330:	29400004 	addi	r5,r5,0
   43334:	010000b4 	movhi	r4,2
   43338:	21000004 	addi	r4,r4,0
   4333c:	00432740 	call	43274 <alt_load_section>
   43340:	0043d1c0 	call	43d1c <alt_dcache_flush_all>
   43344:	0043f040 	call	43f04 <alt_icache_flush_all>
   43348:	0001883a 	nop
   4334c:	e037883a 	mov	sp,fp
   43350:	dfc00117 	ldw	ra,4(sp)
   43354:	df000017 	ldw	fp,0(sp)
   43358:	dec00204 	addi	sp,sp,8
   4335c:	f800283a 	ret

00043360 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43360:	defffe04 	addi	sp,sp,-8
   43364:	dfc00115 	stw	ra,4(sp)
   43368:	df000015 	stw	fp,0(sp)
   4336c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43370:	d0a00917 	ldw	r2,-32732(gp)
   43374:	10000326 	beq	r2,zero,43384 <alt_get_errno+0x24>
   43378:	d0a00917 	ldw	r2,-32732(gp)
   4337c:	103ee83a 	callr	r2
   43380:	00000106 	br	43388 <alt_get_errno+0x28>
   43384:	d0a00e04 	addi	r2,gp,-32712
}
   43388:	e037883a 	mov	sp,fp
   4338c:	dfc00117 	ldw	ra,4(sp)
   43390:	df000017 	ldw	fp,0(sp)
   43394:	dec00204 	addi	sp,sp,8
   43398:	f800283a 	ret

0004339c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4339c:	defff904 	addi	sp,sp,-28
   433a0:	dfc00615 	stw	ra,24(sp)
   433a4:	df000515 	stw	fp,20(sp)
   433a8:	df000504 	addi	fp,sp,20
   433ac:	e13ffd15 	stw	r4,-12(fp)
   433b0:	e17ffe15 	stw	r5,-8(fp)
   433b4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   433b8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   433bc:	e0bffd17 	ldw	r2,-12(fp)
   433c0:	10000616 	blt	r2,zero,433dc <lseek+0x40>
   433c4:	e0bffd17 	ldw	r2,-12(fp)
   433c8:	10c00324 	muli	r3,r2,12
   433cc:	008000b4 	movhi	r2,2
   433d0:	10822804 	addi	r2,r2,2208
   433d4:	1885883a 	add	r2,r3,r2
   433d8:	00000106 	br	433e0 <lseek+0x44>
   433dc:	0005883a 	mov	r2,zero
   433e0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   433e4:	e0bffc17 	ldw	r2,-16(fp)
   433e8:	10001026 	beq	r2,zero,4342c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   433ec:	e0bffc17 	ldw	r2,-16(fp)
   433f0:	10800017 	ldw	r2,0(r2)
   433f4:	10800717 	ldw	r2,28(r2)
   433f8:	10000926 	beq	r2,zero,43420 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   433fc:	e0bffc17 	ldw	r2,-16(fp)
   43400:	10800017 	ldw	r2,0(r2)
   43404:	10800717 	ldw	r2,28(r2)
   43408:	e1bfff17 	ldw	r6,-4(fp)
   4340c:	e17ffe17 	ldw	r5,-8(fp)
   43410:	e13ffc17 	ldw	r4,-16(fp)
   43414:	103ee83a 	callr	r2
   43418:	e0bffb15 	stw	r2,-20(fp)
   4341c:	00000506 	br	43434 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   43420:	00bfde84 	movi	r2,-134
   43424:	e0bffb15 	stw	r2,-20(fp)
   43428:	00000206 	br	43434 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4342c:	00bfebc4 	movi	r2,-81
   43430:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   43434:	e0bffb17 	ldw	r2,-20(fp)
   43438:	1000070e 	bge	r2,zero,43458 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4343c:	00433600 	call	43360 <alt_get_errno>
   43440:	1007883a 	mov	r3,r2
   43444:	e0bffb17 	ldw	r2,-20(fp)
   43448:	0085c83a 	sub	r2,zero,r2
   4344c:	18800015 	stw	r2,0(r3)
    rc = -1;
   43450:	00bfffc4 	movi	r2,-1
   43454:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   43458:	e0bffb17 	ldw	r2,-20(fp)
}
   4345c:	e037883a 	mov	sp,fp
   43460:	dfc00117 	ldw	ra,4(sp)
   43464:	df000017 	ldw	fp,0(sp)
   43468:	dec00204 	addi	sp,sp,8
   4346c:	f800283a 	ret

00043470 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   43470:	defffd04 	addi	sp,sp,-12
   43474:	dfc00215 	stw	ra,8(sp)
   43478:	df000115 	stw	fp,4(sp)
   4347c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   43480:	0009883a 	mov	r4,zero
   43484:	00439180 	call	43918 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   43488:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4348c:	00439500 	call	43950 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   43490:	018000b4 	movhi	r6,2
   43494:	31800904 	addi	r6,r6,36
   43498:	014000b4 	movhi	r5,2
   4349c:	29400904 	addi	r5,r5,36
   434a0:	010000b4 	movhi	r4,2
   434a4:	21000904 	addi	r4,r4,36
   434a8:	0043ffc0 	call	43ffc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   434ac:	0043e440 	call	43e44 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   434b0:	01000134 	movhi	r4,4
   434b4:	210fa904 	addi	r4,r4,16036
   434b8:	00445bc0 	call	445bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   434bc:	d0a00f17 	ldw	r2,-32708(gp)
   434c0:	d0e01017 	ldw	r3,-32704(gp)
   434c4:	d1201117 	ldw	r4,-32700(gp)
   434c8:	200d883a 	mov	r6,r4
   434cc:	180b883a 	mov	r5,r3
   434d0:	1009883a 	mov	r4,r2
   434d4:	00400b00 	call	400b0 <main>
   434d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   434dc:	01000044 	movi	r4,1
   434e0:	0042fac0 	call	42fac <close>
  exit (result);
   434e4:	e13fff17 	ldw	r4,-4(fp)
   434e8:	00445d00 	call	445d0 <exit>

000434ec <__malloc_lock>:
   434ec:	defffe04 	addi	sp,sp,-8
   434f0:	df000115 	stw	fp,4(sp)
   434f4:	df000104 	addi	fp,sp,4
   434f8:	e13fff15 	stw	r4,-4(fp)
   434fc:	0001883a 	nop
   43500:	e037883a 	mov	sp,fp
   43504:	df000017 	ldw	fp,0(sp)
   43508:	dec00104 	addi	sp,sp,4
   4350c:	f800283a 	ret

00043510 <__malloc_unlock>:
   43510:	defffe04 	addi	sp,sp,-8
   43514:	df000115 	stw	fp,4(sp)
   43518:	df000104 	addi	fp,sp,4
   4351c:	e13fff15 	stw	r4,-4(fp)
   43520:	0001883a 	nop
   43524:	e037883a 	mov	sp,fp
   43528:	df000017 	ldw	fp,0(sp)
   4352c:	dec00104 	addi	sp,sp,4
   43530:	f800283a 	ret

00043534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   43534:	defffe04 	addi	sp,sp,-8
   43538:	dfc00115 	stw	ra,4(sp)
   4353c:	df000015 	stw	fp,0(sp)
   43540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   43544:	d0a00917 	ldw	r2,-32732(gp)
   43548:	10000326 	beq	r2,zero,43558 <alt_get_errno+0x24>
   4354c:	d0a00917 	ldw	r2,-32732(gp)
   43550:	103ee83a 	callr	r2
   43554:	00000106 	br	4355c <alt_get_errno+0x28>
   43558:	d0a00e04 	addi	r2,gp,-32712
}
   4355c:	e037883a 	mov	sp,fp
   43560:	dfc00117 	ldw	ra,4(sp)
   43564:	df000017 	ldw	fp,0(sp)
   43568:	dec00204 	addi	sp,sp,8
   4356c:	f800283a 	ret

00043570 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   43570:	defff904 	addi	sp,sp,-28
   43574:	dfc00615 	stw	ra,24(sp)
   43578:	df000515 	stw	fp,20(sp)
   4357c:	df000504 	addi	fp,sp,20
   43580:	e13ffd15 	stw	r4,-12(fp)
   43584:	e17ffe15 	stw	r5,-8(fp)
   43588:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4358c:	e0bffd17 	ldw	r2,-12(fp)
   43590:	10000616 	blt	r2,zero,435ac <read+0x3c>
   43594:	e0bffd17 	ldw	r2,-12(fp)
   43598:	10c00324 	muli	r3,r2,12
   4359c:	008000b4 	movhi	r2,2
   435a0:	10822804 	addi	r2,r2,2208
   435a4:	1885883a 	add	r2,r3,r2
   435a8:	00000106 	br	435b0 <read+0x40>
   435ac:	0005883a 	mov	r2,zero
   435b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   435b4:	e0bffb17 	ldw	r2,-20(fp)
   435b8:	10002226 	beq	r2,zero,43644 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   435bc:	e0bffb17 	ldw	r2,-20(fp)
   435c0:	10800217 	ldw	r2,8(r2)
   435c4:	108000cc 	andi	r2,r2,3
   435c8:	10800060 	cmpeqi	r2,r2,1
   435cc:	1000181e 	bne	r2,zero,43630 <read+0xc0>
        (fd->dev->read))
   435d0:	e0bffb17 	ldw	r2,-20(fp)
   435d4:	10800017 	ldw	r2,0(r2)
   435d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   435dc:	10001426 	beq	r2,zero,43630 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   435e0:	e0bffb17 	ldw	r2,-20(fp)
   435e4:	10800017 	ldw	r2,0(r2)
   435e8:	10800517 	ldw	r2,20(r2)
   435ec:	e0ffff17 	ldw	r3,-4(fp)
   435f0:	180d883a 	mov	r6,r3
   435f4:	e17ffe17 	ldw	r5,-8(fp)
   435f8:	e13ffb17 	ldw	r4,-20(fp)
   435fc:	103ee83a 	callr	r2
   43600:	e0bffc15 	stw	r2,-16(fp)
   43604:	e0bffc17 	ldw	r2,-16(fp)
   43608:	1000070e 	bge	r2,zero,43628 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4360c:	00435340 	call	43534 <alt_get_errno>
   43610:	1007883a 	mov	r3,r2
   43614:	e0bffc17 	ldw	r2,-16(fp)
   43618:	0085c83a 	sub	r2,zero,r2
   4361c:	18800015 	stw	r2,0(r3)
          return -1;
   43620:	00bfffc4 	movi	r2,-1
   43624:	00000c06 	br	43658 <read+0xe8>
        }
        return rval;
   43628:	e0bffc17 	ldw	r2,-16(fp)
   4362c:	00000a06 	br	43658 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   43630:	00435340 	call	43534 <alt_get_errno>
   43634:	1007883a 	mov	r3,r2
   43638:	00800344 	movi	r2,13
   4363c:	18800015 	stw	r2,0(r3)
   43640:	00000406 	br	43654 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   43644:	00435340 	call	43534 <alt_get_errno>
   43648:	1007883a 	mov	r3,r2
   4364c:	00801444 	movi	r2,81
   43650:	18800015 	stw	r2,0(r3)
  }
  return -1;
   43654:	00bfffc4 	movi	r2,-1
}
   43658:	e037883a 	mov	sp,fp
   4365c:	dfc00117 	ldw	ra,4(sp)
   43660:	df000017 	ldw	fp,0(sp)
   43664:	dec00204 	addi	sp,sp,8
   43668:	f800283a 	ret

0004366c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4366c:	defffe04 	addi	sp,sp,-8
   43670:	df000115 	stw	fp,4(sp)
   43674:	df000104 	addi	fp,sp,4
   43678:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4367c:	e0bfff17 	ldw	r2,-4(fp)
   43680:	108000d0 	cmplti	r2,r2,3
   43684:	10000d1e 	bne	r2,zero,436bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   43688:	008000b4 	movhi	r2,2
   4368c:	10822804 	addi	r2,r2,2208
   43690:	e0ffff17 	ldw	r3,-4(fp)
   43694:	18c00324 	muli	r3,r3,12
   43698:	10c5883a 	add	r2,r2,r3
   4369c:	10800204 	addi	r2,r2,8
   436a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   436a4:	008000b4 	movhi	r2,2
   436a8:	10822804 	addi	r2,r2,2208
   436ac:	e0ffff17 	ldw	r3,-4(fp)
   436b0:	18c00324 	muli	r3,r3,12
   436b4:	10c5883a 	add	r2,r2,r3
   436b8:	10000015 	stw	zero,0(r2)
  }
}
   436bc:	0001883a 	nop
   436c0:	e037883a 	mov	sp,fp
   436c4:	df000017 	ldw	fp,0(sp)
   436c8:	dec00104 	addi	sp,sp,4
   436cc:	f800283a 	ret

000436d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   436d0:	defff904 	addi	sp,sp,-28
   436d4:	df000615 	stw	fp,24(sp)
   436d8:	df000604 	addi	fp,sp,24
   436dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   436e0:	0005303a 	rdctl	r2,status
   436e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   436e8:	e0fffe17 	ldw	r3,-8(fp)
   436ec:	00bfff84 	movi	r2,-2
   436f0:	1884703a 	and	r2,r3,r2
   436f4:	1001703a 	wrctl	status,r2
  
  return context;
   436f8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   436fc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   43700:	d0a00a17 	ldw	r2,-32728(gp)
   43704:	10c000c4 	addi	r3,r2,3
   43708:	00bfff04 	movi	r2,-4
   4370c:	1884703a 	and	r2,r3,r2
   43710:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   43714:	d0e00a17 	ldw	r3,-32728(gp)
   43718:	e0bfff17 	ldw	r2,-4(fp)
   4371c:	1887883a 	add	r3,r3,r2
   43720:	00800134 	movhi	r2,4
   43724:	10bd0004 	addi	r2,r2,-3072
   43728:	10c0062e 	bgeu	r2,r3,43744 <sbrk+0x74>
   4372c:	e0bffb17 	ldw	r2,-20(fp)
   43730:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   43734:	e0bffa17 	ldw	r2,-24(fp)
   43738:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4373c:	00bfffc4 	movi	r2,-1
   43740:	00000b06 	br	43770 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   43744:	d0a00a17 	ldw	r2,-32728(gp)
   43748:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4374c:	d0e00a17 	ldw	r3,-32728(gp)
   43750:	e0bfff17 	ldw	r2,-4(fp)
   43754:	1885883a 	add	r2,r3,r2
   43758:	d0a00a15 	stw	r2,-32728(gp)
   4375c:	e0bffb17 	ldw	r2,-20(fp)
   43760:	e0bffc15 	stw	r2,-16(fp)
   43764:	e0bffc17 	ldw	r2,-16(fp)
   43768:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4376c:	e0bffd17 	ldw	r2,-12(fp)
} 
   43770:	e037883a 	mov	sp,fp
   43774:	df000017 	ldw	fp,0(sp)
   43778:	dec00104 	addi	sp,sp,4
   4377c:	f800283a 	ret

00043780 <usleep>:
   43780:	defffd04 	addi	sp,sp,-12
   43784:	dfc00215 	stw	ra,8(sp)
   43788:	df000115 	stw	fp,4(sp)
   4378c:	df000104 	addi	fp,sp,4
   43790:	e13fff15 	stw	r4,-4(fp)
   43794:	e13fff17 	ldw	r4,-4(fp)
   43798:	0043bc40 	call	43bc4 <alt_busy_sleep>
   4379c:	e037883a 	mov	sp,fp
   437a0:	dfc00117 	ldw	ra,4(sp)
   437a4:	df000017 	ldw	fp,0(sp)
   437a8:	dec00204 	addi	sp,sp,8
   437ac:	f800283a 	ret

000437b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   437b0:	defffe04 	addi	sp,sp,-8
   437b4:	dfc00115 	stw	ra,4(sp)
   437b8:	df000015 	stw	fp,0(sp)
   437bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   437c0:	d0a00917 	ldw	r2,-32732(gp)
   437c4:	10000326 	beq	r2,zero,437d4 <alt_get_errno+0x24>
   437c8:	d0a00917 	ldw	r2,-32732(gp)
   437cc:	103ee83a 	callr	r2
   437d0:	00000106 	br	437d8 <alt_get_errno+0x28>
   437d4:	d0a00e04 	addi	r2,gp,-32712
}
   437d8:	e037883a 	mov	sp,fp
   437dc:	dfc00117 	ldw	ra,4(sp)
   437e0:	df000017 	ldw	fp,0(sp)
   437e4:	dec00204 	addi	sp,sp,8
   437e8:	f800283a 	ret

000437ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   437ec:	defff904 	addi	sp,sp,-28
   437f0:	dfc00615 	stw	ra,24(sp)
   437f4:	df000515 	stw	fp,20(sp)
   437f8:	df000504 	addi	fp,sp,20
   437fc:	e13ffd15 	stw	r4,-12(fp)
   43800:	e17ffe15 	stw	r5,-8(fp)
   43804:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   43808:	e0bffd17 	ldw	r2,-12(fp)
   4380c:	10000616 	blt	r2,zero,43828 <write+0x3c>
   43810:	e0bffd17 	ldw	r2,-12(fp)
   43814:	10c00324 	muli	r3,r2,12
   43818:	008000b4 	movhi	r2,2
   4381c:	10822804 	addi	r2,r2,2208
   43820:	1885883a 	add	r2,r3,r2
   43824:	00000106 	br	4382c <write+0x40>
   43828:	0005883a 	mov	r2,zero
   4382c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   43830:	e0bffb17 	ldw	r2,-20(fp)
   43834:	10002126 	beq	r2,zero,438bc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   43838:	e0bffb17 	ldw	r2,-20(fp)
   4383c:	10800217 	ldw	r2,8(r2)
   43840:	108000cc 	andi	r2,r2,3
   43844:	10001826 	beq	r2,zero,438a8 <write+0xbc>
   43848:	e0bffb17 	ldw	r2,-20(fp)
   4384c:	10800017 	ldw	r2,0(r2)
   43850:	10800617 	ldw	r2,24(r2)
   43854:	10001426 	beq	r2,zero,438a8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   43858:	e0bffb17 	ldw	r2,-20(fp)
   4385c:	10800017 	ldw	r2,0(r2)
   43860:	10800617 	ldw	r2,24(r2)
   43864:	e0ffff17 	ldw	r3,-4(fp)
   43868:	180d883a 	mov	r6,r3
   4386c:	e17ffe17 	ldw	r5,-8(fp)
   43870:	e13ffb17 	ldw	r4,-20(fp)
   43874:	103ee83a 	callr	r2
   43878:	e0bffc15 	stw	r2,-16(fp)
   4387c:	e0bffc17 	ldw	r2,-16(fp)
   43880:	1000070e 	bge	r2,zero,438a0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   43884:	00437b00 	call	437b0 <alt_get_errno>
   43888:	1007883a 	mov	r3,r2
   4388c:	e0bffc17 	ldw	r2,-16(fp)
   43890:	0085c83a 	sub	r2,zero,r2
   43894:	18800015 	stw	r2,0(r3)
        return -1;
   43898:	00bfffc4 	movi	r2,-1
   4389c:	00000c06 	br	438d0 <write+0xe4>
      }
      return rval;
   438a0:	e0bffc17 	ldw	r2,-16(fp)
   438a4:	00000a06 	br	438d0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   438a8:	00437b00 	call	437b0 <alt_get_errno>
   438ac:	1007883a 	mov	r3,r2
   438b0:	00800344 	movi	r2,13
   438b4:	18800015 	stw	r2,0(r3)
   438b8:	00000406 	br	438cc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   438bc:	00437b00 	call	437b0 <alt_get_errno>
   438c0:	1007883a 	mov	r3,r2
   438c4:	00801444 	movi	r2,81
   438c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   438cc:	00bfffc4 	movi	r2,-1
}
   438d0:	e037883a 	mov	sp,fp
   438d4:	dfc00117 	ldw	ra,4(sp)
   438d8:	df000017 	ldw	fp,0(sp)
   438dc:	dec00204 	addi	sp,sp,8
   438e0:	f800283a 	ret

000438e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   438e4:	defffd04 	addi	sp,sp,-12
   438e8:	dfc00215 	stw	ra,8(sp)
   438ec:	df000115 	stw	fp,4(sp)
   438f0:	df000104 	addi	fp,sp,4
   438f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   438f8:	d1600604 	addi	r5,gp,-32744
   438fc:	e13fff17 	ldw	r4,-4(fp)
   43900:	0043da00 	call	43da0 <alt_dev_llist_insert>
}
   43904:	e037883a 	mov	sp,fp
   43908:	dfc00117 	ldw	ra,4(sp)
   4390c:	df000017 	ldw	fp,0(sp)
   43910:	dec00204 	addi	sp,sp,8
   43914:	f800283a 	ret

00043918 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   43918:	defffd04 	addi	sp,sp,-12
   4391c:	dfc00215 	stw	ra,8(sp)
   43920:	df000115 	stw	fp,4(sp)
   43924:	df000104 	addi	fp,sp,4
   43928:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   4392c:	00442cc0 	call	442cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   43930:	00800044 	movi	r2,1
   43934:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   43938:	0001883a 	nop
   4393c:	e037883a 	mov	sp,fp
   43940:	dfc00117 	ldw	ra,4(sp)
   43944:	df000017 	ldw	fp,0(sp)
   43948:	dec00204 	addi	sp,sp,8
   4394c:	f800283a 	ret

00043950 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   43950:	defffe04 	addi	sp,sp,-8
   43954:	dfc00115 	stw	ra,4(sp)
   43958:	df000015 	stw	fp,0(sp)
   4395c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   43960:	010000b4 	movhi	r4,2
   43964:	21028804 	addi	r4,r4,2592
   43968:	00438e40 	call	438e4 <alt_dev_reg>
}
   4396c:	0001883a 	nop
   43970:	e037883a 	mov	sp,fp
   43974:	dfc00117 	ldw	ra,4(sp)
   43978:	df000017 	ldw	fp,0(sp)
   4397c:	dec00204 	addi	sp,sp,8
   43980:	f800283a 	ret

00043984 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   43984:	defffa04 	addi	sp,sp,-24
   43988:	dfc00515 	stw	ra,20(sp)
   4398c:	df000415 	stw	fp,16(sp)
   43990:	df000404 	addi	fp,sp,16
   43994:	e13ffd15 	stw	r4,-12(fp)
   43998:	e17ffe15 	stw	r5,-8(fp)
   4399c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   439a0:	e0bffd17 	ldw	r2,-12(fp)
   439a4:	10800017 	ldw	r2,0(r2)
   439a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   439ac:	e0bffc17 	ldw	r2,-16(fp)
   439b0:	10c00a04 	addi	r3,r2,40
   439b4:	e0bffd17 	ldw	r2,-12(fp)
   439b8:	10800217 	ldw	r2,8(r2)
   439bc:	100f883a 	mov	r7,r2
   439c0:	e1bfff17 	ldw	r6,-4(fp)
   439c4:	e17ffe17 	ldw	r5,-8(fp)
   439c8:	1809883a 	mov	r4,r3
   439cc:	0043a440 	call	43a44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   439d0:	e037883a 	mov	sp,fp
   439d4:	dfc00117 	ldw	ra,4(sp)
   439d8:	df000017 	ldw	fp,0(sp)
   439dc:	dec00204 	addi	sp,sp,8
   439e0:	f800283a 	ret

000439e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   439e4:	defffa04 	addi	sp,sp,-24
   439e8:	dfc00515 	stw	ra,20(sp)
   439ec:	df000415 	stw	fp,16(sp)
   439f0:	df000404 	addi	fp,sp,16
   439f4:	e13ffd15 	stw	r4,-12(fp)
   439f8:	e17ffe15 	stw	r5,-8(fp)
   439fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   43a00:	e0bffd17 	ldw	r2,-12(fp)
   43a04:	10800017 	ldw	r2,0(r2)
   43a08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   43a0c:	e0bffc17 	ldw	r2,-16(fp)
   43a10:	10c00a04 	addi	r3,r2,40
   43a14:	e0bffd17 	ldw	r2,-12(fp)
   43a18:	10800217 	ldw	r2,8(r2)
   43a1c:	100f883a 	mov	r7,r2
   43a20:	e1bfff17 	ldw	r6,-4(fp)
   43a24:	e17ffe17 	ldw	r5,-8(fp)
   43a28:	1809883a 	mov	r4,r3
   43a2c:	0043b300 	call	43b30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   43a30:	e037883a 	mov	sp,fp
   43a34:	dfc00117 	ldw	ra,4(sp)
   43a38:	df000017 	ldw	fp,0(sp)
   43a3c:	dec00204 	addi	sp,sp,8
   43a40:	f800283a 	ret

00043a44 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   43a44:	defff704 	addi	sp,sp,-36
   43a48:	df000815 	stw	fp,32(sp)
   43a4c:	df000804 	addi	fp,sp,32
   43a50:	e13ffc15 	stw	r4,-16(fp)
   43a54:	e17ffd15 	stw	r5,-12(fp)
   43a58:	e1bffe15 	stw	r6,-8(fp)
   43a5c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   43a60:	e0bffc17 	ldw	r2,-16(fp)
   43a64:	10800017 	ldw	r2,0(r2)
   43a68:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   43a6c:	e0bffd17 	ldw	r2,-12(fp)
   43a70:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   43a74:	e0bffe17 	ldw	r2,-8(fp)
   43a78:	e0fffd17 	ldw	r3,-12(fp)
   43a7c:	1885883a 	add	r2,r3,r2
   43a80:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   43a84:	00001206 	br	43ad0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   43a88:	e0bff917 	ldw	r2,-28(fp)
   43a8c:	10800037 	ldwio	r2,0(r2)
   43a90:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   43a94:	e0bffb17 	ldw	r2,-20(fp)
   43a98:	10a0000c 	andi	r2,r2,32768
   43a9c:	10000626 	beq	r2,zero,43ab8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   43aa0:	e0bff817 	ldw	r2,-32(fp)
   43aa4:	10c00044 	addi	r3,r2,1
   43aa8:	e0fff815 	stw	r3,-32(fp)
   43aac:	e0fffb17 	ldw	r3,-20(fp)
   43ab0:	10c00005 	stb	r3,0(r2)
   43ab4:	00000606 	br	43ad0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   43ab8:	e0fff817 	ldw	r3,-32(fp)
   43abc:	e0bffd17 	ldw	r2,-12(fp)
   43ac0:	1880071e 	bne	r3,r2,43ae0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   43ac4:	e0bfff17 	ldw	r2,-4(fp)
   43ac8:	1090000c 	andi	r2,r2,16384
   43acc:	1000061e 	bne	r2,zero,43ae8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   43ad0:	e0fff817 	ldw	r3,-32(fp)
   43ad4:	e0bffa17 	ldw	r2,-24(fp)
   43ad8:	18bfeb36 	bltu	r3,r2,43a88 <altera_avalon_jtag_uart_read+0x44>
   43adc:	00000306 	br	43aec <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   43ae0:	0001883a 	nop
   43ae4:	00000106 	br	43aec <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   43ae8:	0001883a 	nop
    
  }

  if (ptr != buffer)
   43aec:	e0fff817 	ldw	r3,-32(fp)
   43af0:	e0bffd17 	ldw	r2,-12(fp)
   43af4:	18800426 	beq	r3,r2,43b08 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   43af8:	e0fff817 	ldw	r3,-32(fp)
   43afc:	e0bffd17 	ldw	r2,-12(fp)
   43b00:	1885c83a 	sub	r2,r3,r2
   43b04:	00000606 	br	43b20 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   43b08:	e0bfff17 	ldw	r2,-4(fp)
   43b0c:	1090000c 	andi	r2,r2,16384
   43b10:	10000226 	beq	r2,zero,43b1c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   43b14:	00bffd44 	movi	r2,-11
   43b18:	00000106 	br	43b20 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   43b1c:	00bffec4 	movi	r2,-5
}
   43b20:	e037883a 	mov	sp,fp
   43b24:	df000017 	ldw	fp,0(sp)
   43b28:	dec00104 	addi	sp,sp,4
   43b2c:	f800283a 	ret

00043b30 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   43b30:	defff904 	addi	sp,sp,-28
   43b34:	df000615 	stw	fp,24(sp)
   43b38:	df000604 	addi	fp,sp,24
   43b3c:	e13ffc15 	stw	r4,-16(fp)
   43b40:	e17ffd15 	stw	r5,-12(fp)
   43b44:	e1bffe15 	stw	r6,-8(fp)
   43b48:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   43b4c:	e0bffc17 	ldw	r2,-16(fp)
   43b50:	10800017 	ldw	r2,0(r2)
   43b54:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   43b58:	e0bffe17 	ldw	r2,-8(fp)
   43b5c:	e0fffd17 	ldw	r3,-12(fp)
   43b60:	1885883a 	add	r2,r3,r2
   43b64:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   43b68:	00000e06 	br	43ba4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   43b6c:	e0bffa17 	ldw	r2,-24(fp)
   43b70:	10800104 	addi	r2,r2,4
   43b74:	10800037 	ldwio	r2,0(r2)
   43b78:	10bfffec 	andhi	r2,r2,65535
   43b7c:	10000926 	beq	r2,zero,43ba4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   43b80:	e0fffa17 	ldw	r3,-24(fp)
   43b84:	e0bffd17 	ldw	r2,-12(fp)
   43b88:	11000044 	addi	r4,r2,1
   43b8c:	e13ffd15 	stw	r4,-12(fp)
   43b90:	10800003 	ldbu	r2,0(r2)
   43b94:	10803fcc 	andi	r2,r2,255
   43b98:	1080201c 	xori	r2,r2,128
   43b9c:	10bfe004 	addi	r2,r2,-128
   43ba0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   43ba4:	e0fffd17 	ldw	r3,-12(fp)
   43ba8:	e0bffb17 	ldw	r2,-20(fp)
   43bac:	18bfef36 	bltu	r3,r2,43b6c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   43bb0:	e0bffe17 	ldw	r2,-8(fp)
}
   43bb4:	e037883a 	mov	sp,fp
   43bb8:	df000017 	ldw	fp,0(sp)
   43bbc:	dec00104 	addi	sp,sp,4
   43bc0:	f800283a 	ret

00043bc4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   43bc4:	defffa04 	addi	sp,sp,-24
   43bc8:	dfc00515 	stw	ra,20(sp)
   43bcc:	df000415 	stw	fp,16(sp)
   43bd0:	df000404 	addi	fp,sp,16
   43bd4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   43bd8:	008000c4 	movi	r2,3
   43bdc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   43be0:	e0fffd17 	ldw	r3,-12(fp)
   43be4:	008003f4 	movhi	r2,15
   43be8:	10909004 	addi	r2,r2,16960
   43bec:	1885383a 	mul	r2,r3,r2
   43bf0:	100b883a 	mov	r5,r2
   43bf4:	0100bef4 	movhi	r4,763
   43bf8:	213c2004 	addi	r4,r4,-3968
   43bfc:	0042eb40 	call	42eb4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   43c00:	100b883a 	mov	r5,r2
   43c04:	01200034 	movhi	r4,32768
   43c08:	213fffc4 	addi	r4,r4,-1
   43c0c:	0042eb40 	call	42eb4 <__udivsi3>
   43c10:	100b883a 	mov	r5,r2
   43c14:	e13fff17 	ldw	r4,-4(fp)
   43c18:	0042eb40 	call	42eb4 <__udivsi3>
   43c1c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   43c20:	e0bffe17 	ldw	r2,-8(fp)
   43c24:	10002a26 	beq	r2,zero,43cd0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   43c28:	e03ffc15 	stw	zero,-16(fp)
   43c2c:	00001706 	br	43c8c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   43c30:	00a00034 	movhi	r2,32768
   43c34:	10bfffc4 	addi	r2,r2,-1
   43c38:	10bfffc4 	addi	r2,r2,-1
   43c3c:	103ffe1e 	bne	r2,zero,43c38 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   43c40:	e0fffd17 	ldw	r3,-12(fp)
   43c44:	008003f4 	movhi	r2,15
   43c48:	10909004 	addi	r2,r2,16960
   43c4c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   43c50:	100b883a 	mov	r5,r2
   43c54:	0100bef4 	movhi	r4,763
   43c58:	213c2004 	addi	r4,r4,-3968
   43c5c:	0042eb40 	call	42eb4 <__udivsi3>
   43c60:	100b883a 	mov	r5,r2
   43c64:	01200034 	movhi	r4,32768
   43c68:	213fffc4 	addi	r4,r4,-1
   43c6c:	0042eb40 	call	42eb4 <__udivsi3>
   43c70:	1007883a 	mov	r3,r2
   43c74:	e0bfff17 	ldw	r2,-4(fp)
   43c78:	10c5c83a 	sub	r2,r2,r3
   43c7c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   43c80:	e0bffc17 	ldw	r2,-16(fp)
   43c84:	10800044 	addi	r2,r2,1
   43c88:	e0bffc15 	stw	r2,-16(fp)
   43c8c:	e0fffc17 	ldw	r3,-16(fp)
   43c90:	e0bffe17 	ldw	r2,-8(fp)
   43c94:	18bfe616 	blt	r3,r2,43c30 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   43c98:	e0fffd17 	ldw	r3,-12(fp)
   43c9c:	008003f4 	movhi	r2,15
   43ca0:	10909004 	addi	r2,r2,16960
   43ca4:	1885383a 	mul	r2,r3,r2
   43ca8:	100b883a 	mov	r5,r2
   43cac:	0100bef4 	movhi	r4,763
   43cb0:	213c2004 	addi	r4,r4,-3968
   43cb4:	0042eb40 	call	42eb4 <__udivsi3>
   43cb8:	1007883a 	mov	r3,r2
   43cbc:	e0bfff17 	ldw	r2,-4(fp)
   43cc0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   43cc4:	10bfffc4 	addi	r2,r2,-1
   43cc8:	103ffe1e 	bne	r2,zero,43cc4 <alt_busy_sleep+0x100>
   43ccc:	00000d06 	br	43d04 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   43cd0:	e0fffd17 	ldw	r3,-12(fp)
   43cd4:	008003f4 	movhi	r2,15
   43cd8:	10909004 	addi	r2,r2,16960
   43cdc:	1885383a 	mul	r2,r3,r2
   43ce0:	100b883a 	mov	r5,r2
   43ce4:	0100bef4 	movhi	r4,763
   43ce8:	213c2004 	addi	r4,r4,-3968
   43cec:	0042eb40 	call	42eb4 <__udivsi3>
   43cf0:	1007883a 	mov	r3,r2
   43cf4:	e0bfff17 	ldw	r2,-4(fp)
   43cf8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   43cfc:	10bfffc4 	addi	r2,r2,-1
   43d00:	00bffe16 	blt	zero,r2,43cfc <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   43d04:	0005883a 	mov	r2,zero
}
   43d08:	e037883a 	mov	sp,fp
   43d0c:	dfc00117 	ldw	ra,4(sp)
   43d10:	df000017 	ldw	fp,0(sp)
   43d14:	dec00204 	addi	sp,sp,8
   43d18:	f800283a 	ret

00043d1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   43d1c:	defffe04 	addi	sp,sp,-8
   43d20:	df000115 	stw	fp,4(sp)
   43d24:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   43d28:	e03fff15 	stw	zero,-4(fp)
   43d2c:	00000506 	br	43d44 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   43d30:	e0bfff17 	ldw	r2,-4(fp)
   43d34:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   43d38:	e0bfff17 	ldw	r2,-4(fp)
   43d3c:	10800804 	addi	r2,r2,32
   43d40:	e0bfff15 	stw	r2,-4(fp)
   43d44:	e0bfff17 	ldw	r2,-4(fp)
   43d48:	10820030 	cmpltui	r2,r2,2048
   43d4c:	103ff81e 	bne	r2,zero,43d30 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   43d50:	0001883a 	nop
   43d54:	e037883a 	mov	sp,fp
   43d58:	df000017 	ldw	fp,0(sp)
   43d5c:	dec00104 	addi	sp,sp,4
   43d60:	f800283a 	ret

00043d64 <alt_get_errno>:
   43d64:	defffe04 	addi	sp,sp,-8
   43d68:	dfc00115 	stw	ra,4(sp)
   43d6c:	df000015 	stw	fp,0(sp)
   43d70:	d839883a 	mov	fp,sp
   43d74:	d0a00917 	ldw	r2,-32732(gp)
   43d78:	10000326 	beq	r2,zero,43d88 <alt_get_errno+0x24>
   43d7c:	d0a00917 	ldw	r2,-32732(gp)
   43d80:	103ee83a 	callr	r2
   43d84:	00000106 	br	43d8c <alt_get_errno+0x28>
   43d88:	d0a00e04 	addi	r2,gp,-32712
   43d8c:	e037883a 	mov	sp,fp
   43d90:	dfc00117 	ldw	ra,4(sp)
   43d94:	df000017 	ldw	fp,0(sp)
   43d98:	dec00204 	addi	sp,sp,8
   43d9c:	f800283a 	ret

00043da0 <alt_dev_llist_insert>:
   43da0:	defffa04 	addi	sp,sp,-24
   43da4:	dfc00515 	stw	ra,20(sp)
   43da8:	df000415 	stw	fp,16(sp)
   43dac:	df000404 	addi	fp,sp,16
   43db0:	e13ffe15 	stw	r4,-8(fp)
   43db4:	e17fff15 	stw	r5,-4(fp)
   43db8:	e0bffe17 	ldw	r2,-8(fp)
   43dbc:	10000326 	beq	r2,zero,43dcc <alt_dev_llist_insert+0x2c>
   43dc0:	e0bffe17 	ldw	r2,-8(fp)
   43dc4:	10800217 	ldw	r2,8(r2)
   43dc8:	1000061e 	bne	r2,zero,43de4 <alt_dev_llist_insert+0x44>
   43dcc:	0043d640 	call	43d64 <alt_get_errno>
   43dd0:	1007883a 	mov	r3,r2
   43dd4:	00800584 	movi	r2,22
   43dd8:	18800015 	stw	r2,0(r3)
   43ddc:	00bffa84 	movi	r2,-22
   43de0:	00001306 	br	43e30 <alt_dev_llist_insert+0x90>
   43de4:	e0bffe17 	ldw	r2,-8(fp)
   43de8:	e0ffff17 	ldw	r3,-4(fp)
   43dec:	e0fffc15 	stw	r3,-16(fp)
   43df0:	e0bffd15 	stw	r2,-12(fp)
   43df4:	e0bffd17 	ldw	r2,-12(fp)
   43df8:	e0fffc17 	ldw	r3,-16(fp)
   43dfc:	10c00115 	stw	r3,4(r2)
   43e00:	e0bffc17 	ldw	r2,-16(fp)
   43e04:	10c00017 	ldw	r3,0(r2)
   43e08:	e0bffd17 	ldw	r2,-12(fp)
   43e0c:	10c00015 	stw	r3,0(r2)
   43e10:	e0bffc17 	ldw	r2,-16(fp)
   43e14:	10800017 	ldw	r2,0(r2)
   43e18:	e0fffd17 	ldw	r3,-12(fp)
   43e1c:	10c00115 	stw	r3,4(r2)
   43e20:	e0bffc17 	ldw	r2,-16(fp)
   43e24:	e0fffd17 	ldw	r3,-12(fp)
   43e28:	10c00015 	stw	r3,0(r2)
   43e2c:	0005883a 	mov	r2,zero
   43e30:	e037883a 	mov	sp,fp
   43e34:	dfc00117 	ldw	ra,4(sp)
   43e38:	df000017 	ldw	fp,0(sp)
   43e3c:	dec00204 	addi	sp,sp,8
   43e40:	f800283a 	ret

00043e44 <_do_ctors>:
   43e44:	defffd04 	addi	sp,sp,-12
   43e48:	dfc00215 	stw	ra,8(sp)
   43e4c:	df000115 	stw	fp,4(sp)
   43e50:	df000104 	addi	fp,sp,4
   43e54:	00800134 	movhi	r2,4
   43e58:	10925304 	addi	r2,r2,18764
   43e5c:	e0bfff15 	stw	r2,-4(fp)
   43e60:	00000606 	br	43e7c <_do_ctors+0x38>
   43e64:	e0bfff17 	ldw	r2,-4(fp)
   43e68:	10800017 	ldw	r2,0(r2)
   43e6c:	103ee83a 	callr	r2
   43e70:	e0bfff17 	ldw	r2,-4(fp)
   43e74:	10bfff04 	addi	r2,r2,-4
   43e78:	e0bfff15 	stw	r2,-4(fp)
   43e7c:	e0ffff17 	ldw	r3,-4(fp)
   43e80:	00800134 	movhi	r2,4
   43e84:	10925404 	addi	r2,r2,18768
   43e88:	18bff62e 	bgeu	r3,r2,43e64 <_do_ctors+0x20>
   43e8c:	0001883a 	nop
   43e90:	e037883a 	mov	sp,fp
   43e94:	dfc00117 	ldw	ra,4(sp)
   43e98:	df000017 	ldw	fp,0(sp)
   43e9c:	dec00204 	addi	sp,sp,8
   43ea0:	f800283a 	ret

00043ea4 <_do_dtors>:
   43ea4:	defffd04 	addi	sp,sp,-12
   43ea8:	dfc00215 	stw	ra,8(sp)
   43eac:	df000115 	stw	fp,4(sp)
   43eb0:	df000104 	addi	fp,sp,4
   43eb4:	00800134 	movhi	r2,4
   43eb8:	10925304 	addi	r2,r2,18764
   43ebc:	e0bfff15 	stw	r2,-4(fp)
   43ec0:	00000606 	br	43edc <_do_dtors+0x38>
   43ec4:	e0bfff17 	ldw	r2,-4(fp)
   43ec8:	10800017 	ldw	r2,0(r2)
   43ecc:	103ee83a 	callr	r2
   43ed0:	e0bfff17 	ldw	r2,-4(fp)
   43ed4:	10bfff04 	addi	r2,r2,-4
   43ed8:	e0bfff15 	stw	r2,-4(fp)
   43edc:	e0ffff17 	ldw	r3,-4(fp)
   43ee0:	00800134 	movhi	r2,4
   43ee4:	10925404 	addi	r2,r2,18768
   43ee8:	18bff62e 	bgeu	r3,r2,43ec4 <_do_dtors+0x20>
   43eec:	0001883a 	nop
   43ef0:	e037883a 	mov	sp,fp
   43ef4:	dfc00117 	ldw	ra,4(sp)
   43ef8:	df000017 	ldw	fp,0(sp)
   43efc:	dec00204 	addi	sp,sp,8
   43f00:	f800283a 	ret

00043f04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   43f04:	defffe04 	addi	sp,sp,-8
   43f08:	dfc00115 	stw	ra,4(sp)
   43f0c:	df000015 	stw	fp,0(sp)
   43f10:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   43f14:	01440004 	movi	r5,4096
   43f18:	0009883a 	mov	r4,zero
   43f1c:	004452c0 	call	4452c <alt_icache_flush>
#endif
}
   43f20:	0001883a 	nop
   43f24:	e037883a 	mov	sp,fp
   43f28:	dfc00117 	ldw	ra,4(sp)
   43f2c:	df000017 	ldw	fp,0(sp)
   43f30:	dec00204 	addi	sp,sp,8
   43f34:	f800283a 	ret

00043f38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   43f38:	defff904 	addi	sp,sp,-28
   43f3c:	dfc00615 	stw	ra,24(sp)
   43f40:	df000515 	stw	fp,20(sp)
   43f44:	df000504 	addi	fp,sp,20
   43f48:	e13ffc15 	stw	r4,-16(fp)
   43f4c:	e17ffd15 	stw	r5,-12(fp)
   43f50:	e1bffe15 	stw	r6,-8(fp)
   43f54:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   43f58:	e1bfff17 	ldw	r6,-4(fp)
   43f5c:	e17ffe17 	ldw	r5,-8(fp)
   43f60:	e13ffd17 	ldw	r4,-12(fp)
   43f64:	00441780 	call	44178 <open>
   43f68:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   43f6c:	e0bffb17 	ldw	r2,-20(fp)
   43f70:	10001c16 	blt	r2,zero,43fe4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   43f74:	008000b4 	movhi	r2,2
   43f78:	10822804 	addi	r2,r2,2208
   43f7c:	e0fffb17 	ldw	r3,-20(fp)
   43f80:	18c00324 	muli	r3,r3,12
   43f84:	10c5883a 	add	r2,r2,r3
   43f88:	10c00017 	ldw	r3,0(r2)
   43f8c:	e0bffc17 	ldw	r2,-16(fp)
   43f90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   43f94:	008000b4 	movhi	r2,2
   43f98:	10822804 	addi	r2,r2,2208
   43f9c:	e0fffb17 	ldw	r3,-20(fp)
   43fa0:	18c00324 	muli	r3,r3,12
   43fa4:	10c5883a 	add	r2,r2,r3
   43fa8:	10800104 	addi	r2,r2,4
   43fac:	10c00017 	ldw	r3,0(r2)
   43fb0:	e0bffc17 	ldw	r2,-16(fp)
   43fb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   43fb8:	008000b4 	movhi	r2,2
   43fbc:	10822804 	addi	r2,r2,2208
   43fc0:	e0fffb17 	ldw	r3,-20(fp)
   43fc4:	18c00324 	muli	r3,r3,12
   43fc8:	10c5883a 	add	r2,r2,r3
   43fcc:	10800204 	addi	r2,r2,8
   43fd0:	10c00017 	ldw	r3,0(r2)
   43fd4:	e0bffc17 	ldw	r2,-16(fp)
   43fd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   43fdc:	e13ffb17 	ldw	r4,-20(fp)
   43fe0:	004366c0 	call	4366c <alt_release_fd>
  }
} 
   43fe4:	0001883a 	nop
   43fe8:	e037883a 	mov	sp,fp
   43fec:	dfc00117 	ldw	ra,4(sp)
   43ff0:	df000017 	ldw	fp,0(sp)
   43ff4:	dec00204 	addi	sp,sp,8
   43ff8:	f800283a 	ret

00043ffc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   43ffc:	defffb04 	addi	sp,sp,-20
   44000:	dfc00415 	stw	ra,16(sp)
   44004:	df000315 	stw	fp,12(sp)
   44008:	df000304 	addi	fp,sp,12
   4400c:	e13ffd15 	stw	r4,-12(fp)
   44010:	e17ffe15 	stw	r5,-8(fp)
   44014:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   44018:	01c07fc4 	movi	r7,511
   4401c:	01800044 	movi	r6,1
   44020:	e17ffd17 	ldw	r5,-12(fp)
   44024:	010000b4 	movhi	r4,2
   44028:	21022b04 	addi	r4,r4,2220
   4402c:	0043f380 	call	43f38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   44030:	01c07fc4 	movi	r7,511
   44034:	000d883a 	mov	r6,zero
   44038:	e17ffe17 	ldw	r5,-8(fp)
   4403c:	010000b4 	movhi	r4,2
   44040:	21022804 	addi	r4,r4,2208
   44044:	0043f380 	call	43f38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   44048:	01c07fc4 	movi	r7,511
   4404c:	01800044 	movi	r6,1
   44050:	e17fff17 	ldw	r5,-4(fp)
   44054:	010000b4 	movhi	r4,2
   44058:	21022e04 	addi	r4,r4,2232
   4405c:	0043f380 	call	43f38 <alt_open_fd>
}  
   44060:	0001883a 	nop
   44064:	e037883a 	mov	sp,fp
   44068:	dfc00117 	ldw	ra,4(sp)
   4406c:	df000017 	ldw	fp,0(sp)
   44070:	dec00204 	addi	sp,sp,8
   44074:	f800283a 	ret

00044078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   44078:	defffe04 	addi	sp,sp,-8
   4407c:	dfc00115 	stw	ra,4(sp)
   44080:	df000015 	stw	fp,0(sp)
   44084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   44088:	d0a00917 	ldw	r2,-32732(gp)
   4408c:	10000326 	beq	r2,zero,4409c <alt_get_errno+0x24>
   44090:	d0a00917 	ldw	r2,-32732(gp)
   44094:	103ee83a 	callr	r2
   44098:	00000106 	br	440a0 <alt_get_errno+0x28>
   4409c:	d0a00e04 	addi	r2,gp,-32712
}
   440a0:	e037883a 	mov	sp,fp
   440a4:	dfc00117 	ldw	ra,4(sp)
   440a8:	df000017 	ldw	fp,0(sp)
   440ac:	dec00204 	addi	sp,sp,8
   440b0:	f800283a 	ret

000440b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   440b4:	defffd04 	addi	sp,sp,-12
   440b8:	df000215 	stw	fp,8(sp)
   440bc:	df000204 	addi	fp,sp,8
   440c0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   440c4:	e0bfff17 	ldw	r2,-4(fp)
   440c8:	10800217 	ldw	r2,8(r2)
   440cc:	10d00034 	orhi	r3,r2,16384
   440d0:	e0bfff17 	ldw	r2,-4(fp)
   440d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   440d8:	e03ffe15 	stw	zero,-8(fp)
   440dc:	00001d06 	br	44154 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   440e0:	008000b4 	movhi	r2,2
   440e4:	10822804 	addi	r2,r2,2208
   440e8:	e0fffe17 	ldw	r3,-8(fp)
   440ec:	18c00324 	muli	r3,r3,12
   440f0:	10c5883a 	add	r2,r2,r3
   440f4:	10c00017 	ldw	r3,0(r2)
   440f8:	e0bfff17 	ldw	r2,-4(fp)
   440fc:	10800017 	ldw	r2,0(r2)
   44100:	1880111e 	bne	r3,r2,44148 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44104:	008000b4 	movhi	r2,2
   44108:	10822804 	addi	r2,r2,2208
   4410c:	e0fffe17 	ldw	r3,-8(fp)
   44110:	18c00324 	muli	r3,r3,12
   44114:	10c5883a 	add	r2,r2,r3
   44118:	10800204 	addi	r2,r2,8
   4411c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   44120:	1000090e 	bge	r2,zero,44148 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   44124:	e0bffe17 	ldw	r2,-8(fp)
   44128:	10c00324 	muli	r3,r2,12
   4412c:	008000b4 	movhi	r2,2
   44130:	10822804 	addi	r2,r2,2208
   44134:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   44138:	e0bfff17 	ldw	r2,-4(fp)
   4413c:	18800226 	beq	r3,r2,44148 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   44140:	00bffcc4 	movi	r2,-13
   44144:	00000806 	br	44168 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   44148:	e0bffe17 	ldw	r2,-8(fp)
   4414c:	10800044 	addi	r2,r2,1
   44150:	e0bffe15 	stw	r2,-8(fp)
   44154:	d0a00817 	ldw	r2,-32736(gp)
   44158:	1007883a 	mov	r3,r2
   4415c:	e0bffe17 	ldw	r2,-8(fp)
   44160:	18bfdf2e 	bgeu	r3,r2,440e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   44164:	0005883a 	mov	r2,zero
}
   44168:	e037883a 	mov	sp,fp
   4416c:	df000017 	ldw	fp,0(sp)
   44170:	dec00104 	addi	sp,sp,4
   44174:	f800283a 	ret

00044178 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   44178:	defff604 	addi	sp,sp,-40
   4417c:	dfc00915 	stw	ra,36(sp)
   44180:	df000815 	stw	fp,32(sp)
   44184:	df000804 	addi	fp,sp,32
   44188:	e13ffd15 	stw	r4,-12(fp)
   4418c:	e17ffe15 	stw	r5,-8(fp)
   44190:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   44194:	00bfffc4 	movi	r2,-1
   44198:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4419c:	00bffb44 	movi	r2,-19
   441a0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   441a4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   441a8:	d1600604 	addi	r5,gp,-32744
   441ac:	e13ffd17 	ldw	r4,-12(fp)
   441b0:	00442f00 	call	442f0 <alt_find_dev>
   441b4:	e0bff815 	stw	r2,-32(fp)
   441b8:	e0bff817 	ldw	r2,-32(fp)
   441bc:	1000051e 	bne	r2,zero,441d4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   441c0:	e13ffd17 	ldw	r4,-12(fp)
   441c4:	00443800 	call	44380 <alt_find_file>
   441c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   441cc:	00800044 	movi	r2,1
   441d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   441d4:	e0bff817 	ldw	r2,-32(fp)
   441d8:	10002926 	beq	r2,zero,44280 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   441dc:	e13ff817 	ldw	r4,-32(fp)
   441e0:	00444880 	call	44488 <alt_get_fd>
   441e4:	e0bff915 	stw	r2,-28(fp)
   441e8:	e0bff917 	ldw	r2,-28(fp)
   441ec:	1000030e 	bge	r2,zero,441fc <open+0x84>
    {
      status = index;
   441f0:	e0bff917 	ldw	r2,-28(fp)
   441f4:	e0bffa15 	stw	r2,-24(fp)
   441f8:	00002306 	br	44288 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   441fc:	e0bff917 	ldw	r2,-28(fp)
   44200:	10c00324 	muli	r3,r2,12
   44204:	008000b4 	movhi	r2,2
   44208:	10822804 	addi	r2,r2,2208
   4420c:	1885883a 	add	r2,r3,r2
   44210:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   44214:	e0fffe17 	ldw	r3,-8(fp)
   44218:	00900034 	movhi	r2,16384
   4421c:	10bfffc4 	addi	r2,r2,-1
   44220:	1886703a 	and	r3,r3,r2
   44224:	e0bffc17 	ldw	r2,-16(fp)
   44228:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4422c:	e0bffb17 	ldw	r2,-20(fp)
   44230:	1000051e 	bne	r2,zero,44248 <open+0xd0>
   44234:	e13ffc17 	ldw	r4,-16(fp)
   44238:	00440b40 	call	440b4 <alt_file_locked>
   4423c:	e0bffa15 	stw	r2,-24(fp)
   44240:	e0bffa17 	ldw	r2,-24(fp)
   44244:	10001016 	blt	r2,zero,44288 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   44248:	e0bff817 	ldw	r2,-32(fp)
   4424c:	10800317 	ldw	r2,12(r2)
   44250:	10000826 	beq	r2,zero,44274 <open+0xfc>
   44254:	e0bff817 	ldw	r2,-32(fp)
   44258:	10800317 	ldw	r2,12(r2)
   4425c:	e1ffff17 	ldw	r7,-4(fp)
   44260:	e1bffe17 	ldw	r6,-8(fp)
   44264:	e17ffd17 	ldw	r5,-12(fp)
   44268:	e13ffc17 	ldw	r4,-16(fp)
   4426c:	103ee83a 	callr	r2
   44270:	00000106 	br	44278 <open+0x100>
   44274:	0005883a 	mov	r2,zero
   44278:	e0bffa15 	stw	r2,-24(fp)
   4427c:	00000206 	br	44288 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   44280:	00bffb44 	movi	r2,-19
   44284:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   44288:	e0bffa17 	ldw	r2,-24(fp)
   4428c:	1000090e 	bge	r2,zero,442b4 <open+0x13c>
  {
    alt_release_fd (index);  
   44290:	e13ff917 	ldw	r4,-28(fp)
   44294:	004366c0 	call	4366c <alt_release_fd>
    ALT_ERRNO = -status;
   44298:	00440780 	call	44078 <alt_get_errno>
   4429c:	1007883a 	mov	r3,r2
   442a0:	e0bffa17 	ldw	r2,-24(fp)
   442a4:	0085c83a 	sub	r2,zero,r2
   442a8:	18800015 	stw	r2,0(r3)
    return -1;
   442ac:	00bfffc4 	movi	r2,-1
   442b0:	00000106 	br	442b8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   442b4:	e0bff917 	ldw	r2,-28(fp)
}
   442b8:	e037883a 	mov	sp,fp
   442bc:	dfc00117 	ldw	ra,4(sp)
   442c0:	df000017 	ldw	fp,0(sp)
   442c4:	dec00204 	addi	sp,sp,8
   442c8:	f800283a 	ret

000442cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   442cc:	deffff04 	addi	sp,sp,-4
   442d0:	df000015 	stw	fp,0(sp)
   442d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   442d8:	000170fa 	wrctl	ienable,zero
}
   442dc:	0001883a 	nop
   442e0:	e037883a 	mov	sp,fp
   442e4:	df000017 	ldw	fp,0(sp)
   442e8:	dec00104 	addi	sp,sp,4
   442ec:	f800283a 	ret

000442f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   442f0:	defffa04 	addi	sp,sp,-24
   442f4:	dfc00515 	stw	ra,20(sp)
   442f8:	df000415 	stw	fp,16(sp)
   442fc:	df000404 	addi	fp,sp,16
   44300:	e13ffe15 	stw	r4,-8(fp)
   44304:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   44308:	e0bfff17 	ldw	r2,-4(fp)
   4430c:	10800017 	ldw	r2,0(r2)
   44310:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   44314:	e13ffe17 	ldw	r4,-8(fp)
   44318:	004027c0 	call	4027c <strlen>
   4431c:	10800044 	addi	r2,r2,1
   44320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   44324:	00000d06 	br	4435c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   44328:	e0bffc17 	ldw	r2,-16(fp)
   4432c:	10800217 	ldw	r2,8(r2)
   44330:	e0fffd17 	ldw	r3,-12(fp)
   44334:	180d883a 	mov	r6,r3
   44338:	e17ffe17 	ldw	r5,-8(fp)
   4433c:	1009883a 	mov	r4,r2
   44340:	00446080 	call	44608 <memcmp>
   44344:	1000021e 	bne	r2,zero,44350 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   44348:	e0bffc17 	ldw	r2,-16(fp)
   4434c:	00000706 	br	4436c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   44350:	e0bffc17 	ldw	r2,-16(fp)
   44354:	10800017 	ldw	r2,0(r2)
   44358:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4435c:	e0fffc17 	ldw	r3,-16(fp)
   44360:	e0bfff17 	ldw	r2,-4(fp)
   44364:	18bff01e 	bne	r3,r2,44328 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   44368:	0005883a 	mov	r2,zero
}
   4436c:	e037883a 	mov	sp,fp
   44370:	dfc00117 	ldw	ra,4(sp)
   44374:	df000017 	ldw	fp,0(sp)
   44378:	dec00204 	addi	sp,sp,8
   4437c:	f800283a 	ret

00044380 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   44380:	defffb04 	addi	sp,sp,-20
   44384:	dfc00415 	stw	ra,16(sp)
   44388:	df000315 	stw	fp,12(sp)
   4438c:	df000304 	addi	fp,sp,12
   44390:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   44394:	d0a00417 	ldw	r2,-32752(gp)
   44398:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4439c:	00003106 	br	44464 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   443a0:	e0bffd17 	ldw	r2,-12(fp)
   443a4:	10800217 	ldw	r2,8(r2)
   443a8:	1009883a 	mov	r4,r2
   443ac:	004027c0 	call	4027c <strlen>
   443b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   443b4:	e0bffd17 	ldw	r2,-12(fp)
   443b8:	10c00217 	ldw	r3,8(r2)
   443bc:	e0bffe17 	ldw	r2,-8(fp)
   443c0:	10bfffc4 	addi	r2,r2,-1
   443c4:	1885883a 	add	r2,r3,r2
   443c8:	10800003 	ldbu	r2,0(r2)
   443cc:	10803fcc 	andi	r2,r2,255
   443d0:	1080201c 	xori	r2,r2,128
   443d4:	10bfe004 	addi	r2,r2,-128
   443d8:	10800bd8 	cmpnei	r2,r2,47
   443dc:	1000031e 	bne	r2,zero,443ec <alt_find_file+0x6c>
    {
      len -= 1;
   443e0:	e0bffe17 	ldw	r2,-8(fp)
   443e4:	10bfffc4 	addi	r2,r2,-1
   443e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   443ec:	e0bffe17 	ldw	r2,-8(fp)
   443f0:	e0ffff17 	ldw	r3,-4(fp)
   443f4:	1885883a 	add	r2,r3,r2
   443f8:	10800003 	ldbu	r2,0(r2)
   443fc:	10803fcc 	andi	r2,r2,255
   44400:	1080201c 	xori	r2,r2,128
   44404:	10bfe004 	addi	r2,r2,-128
   44408:	10800be0 	cmpeqi	r2,r2,47
   4440c:	1000081e 	bne	r2,zero,44430 <alt_find_file+0xb0>
   44410:	e0bffe17 	ldw	r2,-8(fp)
   44414:	e0ffff17 	ldw	r3,-4(fp)
   44418:	1885883a 	add	r2,r3,r2
   4441c:	10800003 	ldbu	r2,0(r2)
   44420:	10803fcc 	andi	r2,r2,255
   44424:	1080201c 	xori	r2,r2,128
   44428:	10bfe004 	addi	r2,r2,-128
   4442c:	10000a1e 	bne	r2,zero,44458 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   44430:	e0bffd17 	ldw	r2,-12(fp)
   44434:	10800217 	ldw	r2,8(r2)
   44438:	e0fffe17 	ldw	r3,-8(fp)
   4443c:	180d883a 	mov	r6,r3
   44440:	e17fff17 	ldw	r5,-4(fp)
   44444:	1009883a 	mov	r4,r2
   44448:	00446080 	call	44608 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4444c:	1000021e 	bne	r2,zero,44458 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   44450:	e0bffd17 	ldw	r2,-12(fp)
   44454:	00000706 	br	44474 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   44458:	e0bffd17 	ldw	r2,-12(fp)
   4445c:	10800017 	ldw	r2,0(r2)
   44460:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   44464:	e0fffd17 	ldw	r3,-12(fp)
   44468:	d0a00404 	addi	r2,gp,-32752
   4446c:	18bfcc1e 	bne	r3,r2,443a0 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   44470:	0005883a 	mov	r2,zero
}
   44474:	e037883a 	mov	sp,fp
   44478:	dfc00117 	ldw	ra,4(sp)
   4447c:	df000017 	ldw	fp,0(sp)
   44480:	dec00204 	addi	sp,sp,8
   44484:	f800283a 	ret

00044488 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   44488:	defffc04 	addi	sp,sp,-16
   4448c:	df000315 	stw	fp,12(sp)
   44490:	df000304 	addi	fp,sp,12
   44494:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   44498:	00bffa04 	movi	r2,-24
   4449c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   444a0:	e03ffd15 	stw	zero,-12(fp)
   444a4:	00001906 	br	4450c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   444a8:	008000b4 	movhi	r2,2
   444ac:	10822804 	addi	r2,r2,2208
   444b0:	e0fffd17 	ldw	r3,-12(fp)
   444b4:	18c00324 	muli	r3,r3,12
   444b8:	10c5883a 	add	r2,r2,r3
   444bc:	10800017 	ldw	r2,0(r2)
   444c0:	10000f1e 	bne	r2,zero,44500 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   444c4:	008000b4 	movhi	r2,2
   444c8:	10822804 	addi	r2,r2,2208
   444cc:	e0fffd17 	ldw	r3,-12(fp)
   444d0:	18c00324 	muli	r3,r3,12
   444d4:	10c5883a 	add	r2,r2,r3
   444d8:	e0ffff17 	ldw	r3,-4(fp)
   444dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   444e0:	d0e00817 	ldw	r3,-32736(gp)
   444e4:	e0bffd17 	ldw	r2,-12(fp)
   444e8:	1880020e 	bge	r3,r2,444f4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   444ec:	e0bffd17 	ldw	r2,-12(fp)
   444f0:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   444f4:	e0bffd17 	ldw	r2,-12(fp)
   444f8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   444fc:	00000606 	br	44518 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   44500:	e0bffd17 	ldw	r2,-12(fp)
   44504:	10800044 	addi	r2,r2,1
   44508:	e0bffd15 	stw	r2,-12(fp)
   4450c:	e0bffd17 	ldw	r2,-12(fp)
   44510:	10800810 	cmplti	r2,r2,32
   44514:	103fe41e 	bne	r2,zero,444a8 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   44518:	e0bffe17 	ldw	r2,-8(fp)
}
   4451c:	e037883a 	mov	sp,fp
   44520:	df000017 	ldw	fp,0(sp)
   44524:	dec00104 	addi	sp,sp,4
   44528:	f800283a 	ret

0004452c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4452c:	defffb04 	addi	sp,sp,-20
   44530:	df000415 	stw	fp,16(sp)
   44534:	df000404 	addi	fp,sp,16
   44538:	e13ffe15 	stw	r4,-8(fp)
   4453c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   44540:	e0bfff17 	ldw	r2,-4(fp)
   44544:	10840070 	cmpltui	r2,r2,4097
   44548:	1000021e 	bne	r2,zero,44554 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   4454c:	00840004 	movi	r2,4096
   44550:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   44554:	e0fffe17 	ldw	r3,-8(fp)
   44558:	e0bfff17 	ldw	r2,-4(fp)
   4455c:	1885883a 	add	r2,r3,r2
   44560:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44564:	e0bffe17 	ldw	r2,-8(fp)
   44568:	e0bffc15 	stw	r2,-16(fp)
   4456c:	00000506 	br	44584 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   44570:	e0bffc17 	ldw	r2,-16(fp)
   44574:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   44578:	e0bffc17 	ldw	r2,-16(fp)
   4457c:	10800804 	addi	r2,r2,32
   44580:	e0bffc15 	stw	r2,-16(fp)
   44584:	e0fffc17 	ldw	r3,-16(fp)
   44588:	e0bffd17 	ldw	r2,-12(fp)
   4458c:	18bff836 	bltu	r3,r2,44570 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   44590:	e0bffe17 	ldw	r2,-8(fp)
   44594:	108007cc 	andi	r2,r2,31
   44598:	10000226 	beq	r2,zero,445a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4459c:	e0bffc17 	ldw	r2,-16(fp)
   445a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   445a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   445a8:	0001883a 	nop
   445ac:	e037883a 	mov	sp,fp
   445b0:	df000017 	ldw	fp,0(sp)
   445b4:	dec00104 	addi	sp,sp,4
   445b8:	f800283a 	ret

000445bc <atexit>:
   445bc:	200b883a 	mov	r5,r4
   445c0:	000f883a 	mov	r7,zero
   445c4:	000d883a 	mov	r6,zero
   445c8:	0009883a 	mov	r4,zero
   445cc:	00446841 	jmpi	44684 <__register_exitproc>

000445d0 <exit>:
   445d0:	defffe04 	addi	sp,sp,-8
   445d4:	000b883a 	mov	r5,zero
   445d8:	dc000015 	stw	r16,0(sp)
   445dc:	dfc00115 	stw	ra,4(sp)
   445e0:	2021883a 	mov	r16,r4
   445e4:	004479c0 	call	4479c <__call_exitprocs>
   445e8:	008000b4 	movhi	r2,2
   445ec:	10829304 	addi	r2,r2,2636
   445f0:	11000017 	ldw	r4,0(r2)
   445f4:	20800f17 	ldw	r2,60(r4)
   445f8:	10000126 	beq	r2,zero,44600 <exit+0x30>
   445fc:	103ee83a 	callr	r2
   44600:	8009883a 	mov	r4,r16
   44604:	004491c0 	call	4491c <_exit>

00044608 <memcmp>:
   44608:	01c000c4 	movi	r7,3
   4460c:	3980192e 	bgeu	r7,r6,44674 <memcmp+0x6c>
   44610:	2144b03a 	or	r2,r4,r5
   44614:	11c4703a 	and	r2,r2,r7
   44618:	10000f26 	beq	r2,zero,44658 <memcmp+0x50>
   4461c:	20800003 	ldbu	r2,0(r4)
   44620:	28c00003 	ldbu	r3,0(r5)
   44624:	10c0151e 	bne	r2,r3,4467c <memcmp+0x74>
   44628:	31bfff84 	addi	r6,r6,-2
   4462c:	01ffffc4 	movi	r7,-1
   44630:	00000406 	br	44644 <memcmp+0x3c>
   44634:	20800003 	ldbu	r2,0(r4)
   44638:	28c00003 	ldbu	r3,0(r5)
   4463c:	31bfffc4 	addi	r6,r6,-1
   44640:	10c00e1e 	bne	r2,r3,4467c <memcmp+0x74>
   44644:	21000044 	addi	r4,r4,1
   44648:	29400044 	addi	r5,r5,1
   4464c:	31fff91e 	bne	r6,r7,44634 <memcmp+0x2c>
   44650:	0005883a 	mov	r2,zero
   44654:	f800283a 	ret
   44658:	20c00017 	ldw	r3,0(r4)
   4465c:	28800017 	ldw	r2,0(r5)
   44660:	18bfee1e 	bne	r3,r2,4461c <memcmp+0x14>
   44664:	31bfff04 	addi	r6,r6,-4
   44668:	21000104 	addi	r4,r4,4
   4466c:	29400104 	addi	r5,r5,4
   44670:	39bff936 	bltu	r7,r6,44658 <memcmp+0x50>
   44674:	303fe91e 	bne	r6,zero,4461c <memcmp+0x14>
   44678:	003ff506 	br	44650 <memcmp+0x48>
   4467c:	10c5c83a 	sub	r2,r2,r3
   44680:	f800283a 	ret

00044684 <__register_exitproc>:
   44684:	defffa04 	addi	sp,sp,-24
   44688:	dc000315 	stw	r16,12(sp)
   4468c:	040000b4 	movhi	r16,2
   44690:	84029304 	addi	r16,r16,2636
   44694:	80c00017 	ldw	r3,0(r16)
   44698:	dc400415 	stw	r17,16(sp)
   4469c:	dfc00515 	stw	ra,20(sp)
   446a0:	18805217 	ldw	r2,328(r3)
   446a4:	2023883a 	mov	r17,r4
   446a8:	10003726 	beq	r2,zero,44788 <__register_exitproc+0x104>
   446ac:	10c00117 	ldw	r3,4(r2)
   446b0:	010007c4 	movi	r4,31
   446b4:	20c00e16 	blt	r4,r3,446f0 <__register_exitproc+0x6c>
   446b8:	1a000044 	addi	r8,r3,1
   446bc:	8800221e 	bne	r17,zero,44748 <__register_exitproc+0xc4>
   446c0:	18c00084 	addi	r3,r3,2
   446c4:	18c7883a 	add	r3,r3,r3
   446c8:	18c7883a 	add	r3,r3,r3
   446cc:	12000115 	stw	r8,4(r2)
   446d0:	10c7883a 	add	r3,r2,r3
   446d4:	19400015 	stw	r5,0(r3)
   446d8:	0005883a 	mov	r2,zero
   446dc:	dfc00517 	ldw	ra,20(sp)
   446e0:	dc400417 	ldw	r17,16(sp)
   446e4:	dc000317 	ldw	r16,12(sp)
   446e8:	dec00604 	addi	sp,sp,24
   446ec:	f800283a 	ret
   446f0:	00800034 	movhi	r2,0
   446f4:	10800004 	addi	r2,r2,0
   446f8:	10002626 	beq	r2,zero,44794 <__register_exitproc+0x110>
   446fc:	01006404 	movi	r4,400
   44700:	d9400015 	stw	r5,0(sp)
   44704:	d9800115 	stw	r6,4(sp)
   44708:	d9c00215 	stw	r7,8(sp)
   4470c:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   44710:	d9400017 	ldw	r5,0(sp)
   44714:	d9800117 	ldw	r6,4(sp)
   44718:	d9c00217 	ldw	r7,8(sp)
   4471c:	10001d26 	beq	r2,zero,44794 <__register_exitproc+0x110>
   44720:	81000017 	ldw	r4,0(r16)
   44724:	10000115 	stw	zero,4(r2)
   44728:	02000044 	movi	r8,1
   4472c:	22405217 	ldw	r9,328(r4)
   44730:	0007883a 	mov	r3,zero
   44734:	12400015 	stw	r9,0(r2)
   44738:	20805215 	stw	r2,328(r4)
   4473c:	10006215 	stw	zero,392(r2)
   44740:	10006315 	stw	zero,396(r2)
   44744:	883fde26 	beq	r17,zero,446c0 <__register_exitproc+0x3c>
   44748:	18c9883a 	add	r4,r3,r3
   4474c:	2109883a 	add	r4,r4,r4
   44750:	1109883a 	add	r4,r2,r4
   44754:	21802215 	stw	r6,136(r4)
   44758:	01800044 	movi	r6,1
   4475c:	12406217 	ldw	r9,392(r2)
   44760:	30cc983a 	sll	r6,r6,r3
   44764:	4992b03a 	or	r9,r9,r6
   44768:	12406215 	stw	r9,392(r2)
   4476c:	21c04215 	stw	r7,264(r4)
   44770:	01000084 	movi	r4,2
   44774:	893fd21e 	bne	r17,r4,446c0 <__register_exitproc+0x3c>
   44778:	11006317 	ldw	r4,396(r2)
   4477c:	218cb03a 	or	r6,r4,r6
   44780:	11806315 	stw	r6,396(r2)
   44784:	003fce06 	br	446c0 <__register_exitproc+0x3c>
   44788:	18805304 	addi	r2,r3,332
   4478c:	18805215 	stw	r2,328(r3)
   44790:	003fc606 	br	446ac <__register_exitproc+0x28>
   44794:	00bfffc4 	movi	r2,-1
   44798:	003fd006 	br	446dc <__register_exitproc+0x58>

0004479c <__call_exitprocs>:
   4479c:	defff504 	addi	sp,sp,-44
   447a0:	df000915 	stw	fp,36(sp)
   447a4:	dd400615 	stw	r21,24(sp)
   447a8:	dc800315 	stw	r18,12(sp)
   447ac:	dfc00a15 	stw	ra,40(sp)
   447b0:	ddc00815 	stw	r23,32(sp)
   447b4:	dd800715 	stw	r22,28(sp)
   447b8:	dd000515 	stw	r20,20(sp)
   447bc:	dcc00415 	stw	r19,16(sp)
   447c0:	dc400215 	stw	r17,8(sp)
   447c4:	dc000115 	stw	r16,4(sp)
   447c8:	d9000015 	stw	r4,0(sp)
   447cc:	2839883a 	mov	fp,r5
   447d0:	04800044 	movi	r18,1
   447d4:	057fffc4 	movi	r21,-1
   447d8:	008000b4 	movhi	r2,2
   447dc:	10829304 	addi	r2,r2,2636
   447e0:	12000017 	ldw	r8,0(r2)
   447e4:	45005217 	ldw	r20,328(r8)
   447e8:	44c05204 	addi	r19,r8,328
   447ec:	a0001c26 	beq	r20,zero,44860 <__call_exitprocs+0xc4>
   447f0:	a0800117 	ldw	r2,4(r20)
   447f4:	15ffffc4 	addi	r23,r2,-1
   447f8:	b8000d16 	blt	r23,zero,44830 <__call_exitprocs+0x94>
   447fc:	14000044 	addi	r16,r2,1
   44800:	8421883a 	add	r16,r16,r16
   44804:	8421883a 	add	r16,r16,r16
   44808:	84402004 	addi	r17,r16,128
   4480c:	a463883a 	add	r17,r20,r17
   44810:	a421883a 	add	r16,r20,r16
   44814:	e0001e26 	beq	fp,zero,44890 <__call_exitprocs+0xf4>
   44818:	80804017 	ldw	r2,256(r16)
   4481c:	e0801c26 	beq	fp,r2,44890 <__call_exitprocs+0xf4>
   44820:	bdffffc4 	addi	r23,r23,-1
   44824:	843fff04 	addi	r16,r16,-4
   44828:	8c7fff04 	addi	r17,r17,-4
   4482c:	bd7ff91e 	bne	r23,r21,44814 <__call_exitprocs+0x78>
   44830:	00800034 	movhi	r2,0
   44834:	10800004 	addi	r2,r2,0
   44838:	10000926 	beq	r2,zero,44860 <__call_exitprocs+0xc4>
   4483c:	a0800117 	ldw	r2,4(r20)
   44840:	1000301e 	bne	r2,zero,44904 <__call_exitprocs+0x168>
   44844:	a0800017 	ldw	r2,0(r20)
   44848:	10003226 	beq	r2,zero,44914 <__call_exitprocs+0x178>
   4484c:	a009883a 	mov	r4,r20
   44850:	98800015 	stw	r2,0(r19)
   44854:	00000000 	call	0 <__alt_mem_onchip_memory2_1-0x20000>
   44858:	9d000017 	ldw	r20,0(r19)
   4485c:	a03fe41e 	bne	r20,zero,447f0 <__call_exitprocs+0x54>
   44860:	dfc00a17 	ldw	ra,40(sp)
   44864:	df000917 	ldw	fp,36(sp)
   44868:	ddc00817 	ldw	r23,32(sp)
   4486c:	dd800717 	ldw	r22,28(sp)
   44870:	dd400617 	ldw	r21,24(sp)
   44874:	dd000517 	ldw	r20,20(sp)
   44878:	dcc00417 	ldw	r19,16(sp)
   4487c:	dc800317 	ldw	r18,12(sp)
   44880:	dc400217 	ldw	r17,8(sp)
   44884:	dc000117 	ldw	r16,4(sp)
   44888:	dec00b04 	addi	sp,sp,44
   4488c:	f800283a 	ret
   44890:	a0800117 	ldw	r2,4(r20)
   44894:	80c00017 	ldw	r3,0(r16)
   44898:	10bfffc4 	addi	r2,r2,-1
   4489c:	15c01426 	beq	r2,r23,448f0 <__call_exitprocs+0x154>
   448a0:	80000015 	stw	zero,0(r16)
   448a4:	183fde26 	beq	r3,zero,44820 <__call_exitprocs+0x84>
   448a8:	95c8983a 	sll	r4,r18,r23
   448ac:	a0806217 	ldw	r2,392(r20)
   448b0:	a5800117 	ldw	r22,4(r20)
   448b4:	2084703a 	and	r2,r4,r2
   448b8:	10000b26 	beq	r2,zero,448e8 <__call_exitprocs+0x14c>
   448bc:	a0806317 	ldw	r2,396(r20)
   448c0:	2088703a 	and	r4,r4,r2
   448c4:	20000c1e 	bne	r4,zero,448f8 <__call_exitprocs+0x15c>
   448c8:	89400017 	ldw	r5,0(r17)
   448cc:	d9000017 	ldw	r4,0(sp)
   448d0:	183ee83a 	callr	r3
   448d4:	a0800117 	ldw	r2,4(r20)
   448d8:	15bfbf1e 	bne	r2,r22,447d8 <__call_exitprocs+0x3c>
   448dc:	98800017 	ldw	r2,0(r19)
   448e0:	153fcf26 	beq	r2,r20,44820 <__call_exitprocs+0x84>
   448e4:	003fbc06 	br	447d8 <__call_exitprocs+0x3c>
   448e8:	183ee83a 	callr	r3
   448ec:	003ff906 	br	448d4 <__call_exitprocs+0x138>
   448f0:	a5c00115 	stw	r23,4(r20)
   448f4:	003feb06 	br	448a4 <__call_exitprocs+0x108>
   448f8:	89000017 	ldw	r4,0(r17)
   448fc:	183ee83a 	callr	r3
   44900:	003ff406 	br	448d4 <__call_exitprocs+0x138>
   44904:	a0800017 	ldw	r2,0(r20)
   44908:	a027883a 	mov	r19,r20
   4490c:	1029883a 	mov	r20,r2
   44910:	003fb606 	br	447ec <__call_exitprocs+0x50>
   44914:	0005883a 	mov	r2,zero
   44918:	003ffb06 	br	44908 <__call_exitprocs+0x16c>

0004491c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4491c:	defffd04 	addi	sp,sp,-12
   44920:	df000215 	stw	fp,8(sp)
   44924:	df000204 	addi	fp,sp,8
   44928:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4492c:	0001883a 	nop
   44930:	e0bfff17 	ldw	r2,-4(fp)
   44934:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   44938:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4493c:	10000226 	beq	r2,zero,44948 <_exit+0x2c>
    ALT_SIM_FAIL();
   44940:	002af070 	cmpltui	zero,zero,43969
   44944:	00000106 	br	4494c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   44948:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4494c:	003fff06 	br	4494c <_exit+0x30>
